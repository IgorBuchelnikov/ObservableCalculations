<#@ template  debug="true" hostSpecific="true" #>
<#@ output extension="generated.cs" #>
<#@ Assembly Name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="System.Text.RegularExpressions" #> 
<#@ output extension=".generated.cs"#>
<#@ include file=".\ExtensionMethods.ttinclude" #>
using System;
using System.Linq;
using System.Collections.Generic;
using System.ComponentModel;
using System.Collections.ObjectModel;
using System.Linq.Expressions;
using ObservableComputations;

namespace ObservableComputations
{
	public static partial class ExtensionMethods
	{
<#


	IEnumerable<IGrouping<string, ExtensionMethod>> extensionMethodGroups = null;
	try
	{
		extensionMethodGroups = GetExtensionMethods().GroupBy(em => em.Name).OrderBy(emg => emg.Key).ToArray();
	}
	catch(Exception ex)
	{

	}

	foreach (var extensionMethodGroup in extensionMethodGroups)
	{
#>
		#region <#=extensionMethodGroup.Key#>

<#


		foreach (ExtensionMethod extensionMethod in extensionMethodGroup)
		{

#>
		[ObservableComputationsCall]
		public static <#=extensionMethod.TypeName#> <#=extensionMethod.Name#><#=extensionMethod.GenericParameters#>(this
<#
			int index = 0;
			var signatureArguments = extensionMethod.ArgumentsWithoutDefaultValue;
			foreach (ExtensionMethodArgument argument in signatureArguments )
			{
#>
			 <#=argument.Type#> <#=GetAdjustedArgumentName(argument)#><#=index == signatureArguments.Count() - 1 ? ")" : ","#>
<#
				index++;
			}

#><#=extensionMethod.GenericConstraints#>		{
			return new <#=extensionMethod.TypeName#>(
<#
			index = 0;
			foreach (ExtensionMethodArgument argument in extensionMethod.Arguments)
			{
#>
				<#=argument.Name#>: <#=GetAdjustedArgumentValue(argument)#><#=index == extensionMethod.Arguments.Count - 1 ? ");" : ","#>
<#
				index++;
			}
#>
		}

<#
		}
#>
		#endregion
<#
	}
#>
	}
}
<#+
	public string GetAdjustedArgumentName(ExtensionMethodArgument argument)
	{
		if (IsComputingArgument(argument))
		{
			return argument.Name.Replace("Scalar", "Expression");
		}
		else
		{
			return argument.Name;
		}
	}

	public string GetAdjustedArgumentValue(ExtensionMethodArgument argument)
	{
		if  (argument.DefaultValue == null)
		{
			if (IsComputingArgument(argument))
			{
				Regex returnTypeRegex = new Regex("Expression<Func<(.+)>>");
				string returnType = returnTypeRegex.Match(argument.Type).Groups[1].Value;
				return "new Computing<" + returnType + ">(" + GetAdjustedArgumentName(argument) + ")";
			}
			else
			{
				return argument.Name;
			}
		}
		else
		{
			return argument.DefaultValue;
		}
	}
#>
