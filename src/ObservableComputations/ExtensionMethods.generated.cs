 
 
 



using System;
using System.Linq;
using System.Collections.Generic;
using System.ComponentModel;
using System.Collections.ObjectModel;
using System.Linq.Expressions;
using ObservableComputations;

namespace ObservableComputations
{
	public static partial class ExtensionMethods
	{
		#region Aggregating

		[ObservableComputationsCall]
		public static ObservableComputations.Aggregating<TSourceItem, TResult> Aggregating<TSourceItem, TResult>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 (System.Func<TSourceItem, TResult, TResult> aggregateFunc, System.Func<TSourceItem, TResult, TResult> deaggregateFunc) funcs)
			
		{
			return new ObservableComputations.Aggregating<TSourceItem, TResult>(
				sourceScalar: sourceScalar,
				funcs: funcs);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Aggregating<TSourceItem, TResult> Aggregating<TSourceItem, TResult>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 (System.Func<TSourceItem, TResult, TResult> aggregateFunc, System.Func<TSourceItem, TResult, TResult> deaggregateFunc) funcs)
			
		{
			return new ObservableComputations.Aggregating<TSourceItem, TResult>(
				sourceScalar: sourceScalar,
				funcs: funcs);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Aggregating<TSourceItem, TResult> Aggregating<TSourceItem, TResult>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 (System.Func<TSourceItem, TResult, TResult> aggregateFunc, System.Func<TSourceItem, TResult, TResult> deaggregateFunc) funcs)
			
		{
			return new ObservableComputations.Aggregating<TSourceItem, TResult>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				funcs: funcs);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Aggregating<TSourceItem, TResult> Aggregating<TSourceItem, TResult>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 (System.Func<TSourceItem, TResult, TResult> aggregateFunc, System.Func<TSourceItem, TResult, TResult> deaggregateFunc) funcs)
			
		{
			return new ObservableComputations.Aggregating<TSourceItem, TResult>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				funcs: funcs);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Aggregating<TSourceItem, TResult> Aggregating<TSourceItem, TResult>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 (System.Func<TSourceItem, TResult, TResult> aggregateFunc, System.Func<TSourceItem, TResult, TResult> deaggregateFunc) funcs)
			
		{
			return new ObservableComputations.Aggregating<TSourceItem, TResult>(
				source: source,
				funcs: funcs);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Aggregating<TSourceItem, TResult> Aggregating<TSourceItem, TResult>(this
			 ObservableCollection<TSourceItem> source,
			 (System.Func<TSourceItem, TResult, TResult> aggregateFunc, System.Func<TSourceItem, TResult, TResult> deaggregateFunc) funcs)
			
		{
			return new ObservableComputations.Aggregating<TSourceItem, TResult>(
				source: source,
				funcs: funcs);
		}

		#endregion
		#region AllComputing

		[ObservableComputationsCall]
		public static ObservableComputations.AllComputing<TSourceItem> AllComputing<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, bool>> predicateExpression)
			
		{
			return new ObservableComputations.AllComputing<TSourceItem>(
				sourceScalar: sourceScalar,
				predicateExpression: predicateExpression);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.AllComputing<TSourceItem> AllComputing<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, bool>> predicateExpression)
			
		{
			return new ObservableComputations.AllComputing<TSourceItem>(
				sourceScalar: sourceScalar,
				predicateExpression: predicateExpression);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.AllComputing<TSourceItem> AllComputing<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, bool>> predicateExpression)
			
		{
			return new ObservableComputations.AllComputing<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				predicateExpression: predicateExpression);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.AllComputing<TSourceItem> AllComputing<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, bool>> predicateExpression)
			
		{
			return new ObservableComputations.AllComputing<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				predicateExpression: predicateExpression);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.AllComputing<TSourceItem> AllComputing<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, bool>> predicateExpression)
			
		{
			return new ObservableComputations.AllComputing<TSourceItem>(
				source: source,
				predicateExpression: predicateExpression);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.AllComputing<TSourceItem> AllComputing<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, bool>> predicateExpression)
			
		{
			return new ObservableComputations.AllComputing<TSourceItem>(
				source: source,
				predicateExpression: predicateExpression);
		}

		#endregion
		#region AnyComputing

		[ObservableComputationsCall]
		public static ObservableComputations.AnyComputing<TSourceItem> AnyComputing<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, bool>> predicateExpression)
			
		{
			return new ObservableComputations.AnyComputing<TSourceItem>(
				sourceScalar: sourceScalar,
				predicateExpression: predicateExpression);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.AnyComputing<TSourceItem> AnyComputing<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, bool>> predicateExpression)
			
		{
			return new ObservableComputations.AnyComputing<TSourceItem>(
				sourceScalar: sourceScalar,
				predicateExpression: predicateExpression);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.AnyComputing<TSourceItem> AnyComputing<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, bool>> predicateExpression)
			
		{
			return new ObservableComputations.AnyComputing<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				predicateExpression: predicateExpression);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.AnyComputing<TSourceItem> AnyComputing<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, bool>> predicateExpression)
			
		{
			return new ObservableComputations.AnyComputing<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				predicateExpression: predicateExpression);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.AnyComputing<TSourceItem> AnyComputing<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, bool>> predicateExpression)
			
		{
			return new ObservableComputations.AnyComputing<TSourceItem>(
				source: source,
				predicateExpression: predicateExpression);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.AnyComputing<TSourceItem> AnyComputing<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, bool>> predicateExpression)
			
		{
			return new ObservableComputations.AnyComputing<TSourceItem>(
				source: source,
				predicateExpression: predicateExpression);
		}

		#endregion
		#region Appending

		[ObservableComputationsCall]
		public static ObservableComputations.Appending<TSourceItem> Appending<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 TSourceItem item)
			
		{
			return new ObservableComputations.Appending<TSourceItem>(
				source: source,
				item: item);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Appending<TSourceItem> Appending<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 TSourceItem item)
			
		{
			return new ObservableComputations.Appending<TSourceItem>(
				source: source,
				item: item);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Appending<TSourceItem> Appending<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 ObservableComputations.IReadScalar<TSourceItem> itemScalar)
			
		{
			return new ObservableComputations.Appending<TSourceItem>(
				source: source,
				itemScalar: itemScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Appending<TSourceItem> Appending<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 Expression<Func<TSourceItem>> itemExpression)
			
		{
			return new ObservableComputations.Appending<TSourceItem>(
				source: source,
				itemScalar: new Computing<TSourceItem>(itemExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Appending<TSourceItem> Appending<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 ObservableComputations.IReadScalar<TSourceItem> itemScalar)
			
		{
			return new ObservableComputations.Appending<TSourceItem>(
				source: source,
				itemScalar: itemScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Appending<TSourceItem> Appending<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 Expression<Func<TSourceItem>> itemExpression)
			
		{
			return new ObservableComputations.Appending<TSourceItem>(
				source: source,
				itemScalar: new Computing<TSourceItem>(itemExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Appending<TSourceItem> Appending<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 TSourceItem item)
			
		{
			return new ObservableComputations.Appending<TSourceItem>(
				sourceScalar: sourceScalar,
				item: item);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Appending<TSourceItem> Appending<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 TSourceItem item)
			
		{
			return new ObservableComputations.Appending<TSourceItem>(
				sourceScalar: sourceScalar,
				item: item);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Appending<TSourceItem> Appending<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 TSourceItem item)
			
		{
			return new ObservableComputations.Appending<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				item: item);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Appending<TSourceItem> Appending<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 TSourceItem item)
			
		{
			return new ObservableComputations.Appending<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				item: item);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Appending<TSourceItem> Appending<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 ObservableComputations.IReadScalar<TSourceItem> itemScalar)
			
		{
			return new ObservableComputations.Appending<TSourceItem>(
				sourceScalar: sourceScalar,
				itemScalar: itemScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Appending<TSourceItem> Appending<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 Expression<Func<TSourceItem>> itemExpression)
			
		{
			return new ObservableComputations.Appending<TSourceItem>(
				sourceScalar: sourceScalar,
				itemScalar: new Computing<TSourceItem>(itemExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Appending<TSourceItem> Appending<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 ObservableComputations.IReadScalar<TSourceItem> itemScalar)
			
		{
			return new ObservableComputations.Appending<TSourceItem>(
				sourceScalar: sourceScalar,
				itemScalar: itemScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Appending<TSourceItem> Appending<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 Expression<Func<TSourceItem>> itemExpression)
			
		{
			return new ObservableComputations.Appending<TSourceItem>(
				sourceScalar: sourceScalar,
				itemScalar: new Computing<TSourceItem>(itemExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Appending<TSourceItem> Appending<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 ObservableComputations.IReadScalar<TSourceItem> itemScalar)
			
		{
			return new ObservableComputations.Appending<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				itemScalar: itemScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Appending<TSourceItem> Appending<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 Expression<Func<TSourceItem>> itemExpression)
			
		{
			return new ObservableComputations.Appending<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				itemScalar: new Computing<TSourceItem>(itemExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Appending<TSourceItem> Appending<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 ObservableComputations.IReadScalar<TSourceItem> itemScalar)
			
		{
			return new ObservableComputations.Appending<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				itemScalar: itemScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Appending<TSourceItem> Appending<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 Expression<Func<TSourceItem>> itemExpression)
			
		{
			return new ObservableComputations.Appending<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				itemScalar: new Computing<TSourceItem>(itemExpression));
		}

		#endregion
		#region Averaging

		[ObservableComputationsCall]
		public static ObservableComputations.Averaging<TSourceItem, TResult> Averaging<TSourceItem, TResult>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar)
			
		{
			return new ObservableComputations.Averaging<TSourceItem, TResult>(
				sourceScalar: sourceScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Averaging<TSourceItem, TResult> Averaging<TSourceItem, TResult>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar)
			
		{
			return new ObservableComputations.Averaging<TSourceItem, TResult>(
				sourceScalar: sourceScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Averaging<TSourceItem, TResult> Averaging<TSourceItem, TResult>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression)
			
		{
			return new ObservableComputations.Averaging<TSourceItem, TResult>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Averaging<TSourceItem, TResult> Averaging<TSourceItem, TResult>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression)
			
		{
			return new ObservableComputations.Averaging<TSourceItem, TResult>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Averaging<TSourceItem, TResult> Averaging<TSourceItem, TResult>(this
			 System.Collections.Specialized.INotifyCollectionChanged source)
			
		{
			return new ObservableComputations.Averaging<TSourceItem, TResult>(
				source: source);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Averaging<TSourceItem, TResult> Averaging<TSourceItem, TResult>(this
			 ObservableCollection<TSourceItem> source)
			
		{
			return new ObservableComputations.Averaging<TSourceItem, TResult>(
				source: source);
		}

		#endregion
		#region Casting

		[ObservableComputationsCall]
		public static ObservableComputations.Casting<TResultItem> Casting<TResultItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar)
			
		{
			return new ObservableComputations.Casting<TResultItem>(
				sourceScalar: sourceScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Casting<TResultItem> Casting<TResultItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression)
			
		{
			return new ObservableComputations.Casting<TResultItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Casting<TResultItem> Casting<TResultItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source)
			
		{
			return new ObservableComputations.Casting<TResultItem>(
				source: source);
		}

		#endregion
		#region CollectionDispatching

		[ObservableComputationsCall]
		public static ObservableComputations.CollectionDispatching<TSourceItem> CollectionDispatching<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 ObservableComputations.IDispatcher destinationDispatcher,
			 ObservableComputations.IDispatcher sourceDispatcher)
			
		{
			return new ObservableComputations.CollectionDispatching<TSourceItem>(
				source: source,
				destinationDispatcher: destinationDispatcher,
				sourceDispatcher: sourceDispatcher);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.CollectionDispatching<TSourceItem> CollectionDispatching<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 ObservableComputations.IDispatcher destinationDispatcher)
			
		{
			return new ObservableComputations.CollectionDispatching<TSourceItem>(
				source: source,
				destinationDispatcher: destinationDispatcher,
				sourceDispatcher: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.CollectionDispatching<TSourceItem> CollectionDispatching<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 ObservableComputations.IDispatcher destinationDispatcher,
			 ObservableComputations.IDispatcher sourceDispatcher)
			
		{
			return new ObservableComputations.CollectionDispatching<TSourceItem>(
				source: source,
				destinationDispatcher: destinationDispatcher,
				sourceDispatcher: sourceDispatcher);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.CollectionDispatching<TSourceItem> CollectionDispatching<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 ObservableComputations.IDispatcher destinationDispatcher)
			
		{
			return new ObservableComputations.CollectionDispatching<TSourceItem>(
				source: source,
				destinationDispatcher: destinationDispatcher,
				sourceDispatcher: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.CollectionDispatching<TSourceItem> CollectionDispatching<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 ObservableComputations.ICollectionDestinationDispatcher destinationDispatcher,
			 ObservableComputations.IDispatcher sourceDispatcher)
			
		{
			return new ObservableComputations.CollectionDispatching<TSourceItem>(
				source: source,
				destinationDispatcher: destinationDispatcher,
				sourceDispatcher: sourceDispatcher);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.CollectionDispatching<TSourceItem> CollectionDispatching<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 ObservableComputations.ICollectionDestinationDispatcher destinationDispatcher)
			
		{
			return new ObservableComputations.CollectionDispatching<TSourceItem>(
				source: source,
				destinationDispatcher: destinationDispatcher,
				sourceDispatcher: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.CollectionDispatching<TSourceItem> CollectionDispatching<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 ObservableComputations.ICollectionDestinationDispatcher destinationDispatcher,
			 ObservableComputations.IDispatcher sourceDispatcher)
			
		{
			return new ObservableComputations.CollectionDispatching<TSourceItem>(
				source: source,
				destinationDispatcher: destinationDispatcher,
				sourceDispatcher: sourceDispatcher);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.CollectionDispatching<TSourceItem> CollectionDispatching<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 ObservableComputations.ICollectionDestinationDispatcher destinationDispatcher)
			
		{
			return new ObservableComputations.CollectionDispatching<TSourceItem>(
				source: source,
				destinationDispatcher: destinationDispatcher,
				sourceDispatcher: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.CollectionDispatching<TSourceItem> CollectionDispatching<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 ObservableComputations.IDispatcher destinationDispatcher,
			 ObservableComputations.IDispatcher sourceDispatcher)
			
		{
			return new ObservableComputations.CollectionDispatching<TSourceItem>(
				sourceScalar: sourceScalar,
				destinationDispatcher: destinationDispatcher,
				sourceDispatcher: sourceDispatcher);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.CollectionDispatching<TSourceItem> CollectionDispatching<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 ObservableComputations.IDispatcher destinationDispatcher)
			
		{
			return new ObservableComputations.CollectionDispatching<TSourceItem>(
				sourceScalar: sourceScalar,
				destinationDispatcher: destinationDispatcher,
				sourceDispatcher: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.CollectionDispatching<TSourceItem> CollectionDispatching<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 ObservableComputations.IDispatcher destinationDispatcher,
			 ObservableComputations.IDispatcher sourceDispatcher)
			
		{
			return new ObservableComputations.CollectionDispatching<TSourceItem>(
				sourceScalar: sourceScalar,
				destinationDispatcher: destinationDispatcher,
				sourceDispatcher: sourceDispatcher);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.CollectionDispatching<TSourceItem> CollectionDispatching<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 ObservableComputations.IDispatcher destinationDispatcher)
			
		{
			return new ObservableComputations.CollectionDispatching<TSourceItem>(
				sourceScalar: sourceScalar,
				destinationDispatcher: destinationDispatcher,
				sourceDispatcher: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.CollectionDispatching<TSourceItem> CollectionDispatching<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 ObservableComputations.IDispatcher destinationDispatcher,
			 ObservableComputations.IDispatcher sourceDispatcher)
			
		{
			return new ObservableComputations.CollectionDispatching<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				destinationDispatcher: destinationDispatcher,
				sourceDispatcher: sourceDispatcher);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.CollectionDispatching<TSourceItem> CollectionDispatching<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 ObservableComputations.IDispatcher destinationDispatcher)
			
		{
			return new ObservableComputations.CollectionDispatching<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				destinationDispatcher: destinationDispatcher,
				sourceDispatcher: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.CollectionDispatching<TSourceItem> CollectionDispatching<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 ObservableComputations.IDispatcher destinationDispatcher,
			 ObservableComputations.IDispatcher sourceDispatcher)
			
		{
			return new ObservableComputations.CollectionDispatching<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				destinationDispatcher: destinationDispatcher,
				sourceDispatcher: sourceDispatcher);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.CollectionDispatching<TSourceItem> CollectionDispatching<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 ObservableComputations.IDispatcher destinationDispatcher)
			
		{
			return new ObservableComputations.CollectionDispatching<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				destinationDispatcher: destinationDispatcher,
				sourceDispatcher: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.CollectionDispatching<TSourceItem> CollectionDispatching<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 ObservableComputations.ICollectionDestinationDispatcher destinationDispatcher,
			 ObservableComputations.IDispatcher sourceDispatcher)
			
		{
			return new ObservableComputations.CollectionDispatching<TSourceItem>(
				sourceScalar: sourceScalar,
				destinationDispatcher: destinationDispatcher,
				sourceDispatcher: sourceDispatcher);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.CollectionDispatching<TSourceItem> CollectionDispatching<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 ObservableComputations.ICollectionDestinationDispatcher destinationDispatcher)
			
		{
			return new ObservableComputations.CollectionDispatching<TSourceItem>(
				sourceScalar: sourceScalar,
				destinationDispatcher: destinationDispatcher,
				sourceDispatcher: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.CollectionDispatching<TSourceItem> CollectionDispatching<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 ObservableComputations.ICollectionDestinationDispatcher destinationDispatcher,
			 ObservableComputations.IDispatcher sourceDispatcher)
			
		{
			return new ObservableComputations.CollectionDispatching<TSourceItem>(
				sourceScalar: sourceScalar,
				destinationDispatcher: destinationDispatcher,
				sourceDispatcher: sourceDispatcher);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.CollectionDispatching<TSourceItem> CollectionDispatching<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 ObservableComputations.ICollectionDestinationDispatcher destinationDispatcher)
			
		{
			return new ObservableComputations.CollectionDispatching<TSourceItem>(
				sourceScalar: sourceScalar,
				destinationDispatcher: destinationDispatcher,
				sourceDispatcher: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.CollectionDispatching<TSourceItem> CollectionDispatching<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 ObservableComputations.ICollectionDestinationDispatcher destinationDispatcher,
			 ObservableComputations.IDispatcher sourceDispatcher)
			
		{
			return new ObservableComputations.CollectionDispatching<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				destinationDispatcher: destinationDispatcher,
				sourceDispatcher: sourceDispatcher);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.CollectionDispatching<TSourceItem> CollectionDispatching<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 ObservableComputations.ICollectionDestinationDispatcher destinationDispatcher)
			
		{
			return new ObservableComputations.CollectionDispatching<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				destinationDispatcher: destinationDispatcher,
				sourceDispatcher: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.CollectionDispatching<TSourceItem> CollectionDispatching<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 ObservableComputations.ICollectionDestinationDispatcher destinationDispatcher,
			 ObservableComputations.IDispatcher sourceDispatcher)
			
		{
			return new ObservableComputations.CollectionDispatching<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				destinationDispatcher: destinationDispatcher,
				sourceDispatcher: sourceDispatcher);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.CollectionDispatching<TSourceItem> CollectionDispatching<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 ObservableComputations.ICollectionDestinationDispatcher destinationDispatcher)
			
		{
			return new ObservableComputations.CollectionDispatching<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				destinationDispatcher: destinationDispatcher,
				sourceDispatcher: null);
		}

		#endregion
		#region CollectionPausing

		[ObservableComputationsCall]
		public static ObservableComputations.CollectionPausing<TSourceItem> CollectionPausing<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 bool initialIsPaused)
			
		{
			return new ObservableComputations.CollectionPausing<TSourceItem>(
				source: source,
				initialIsPaused: initialIsPaused);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.CollectionPausing<TSourceItem> CollectionPausing<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source)
			
		{
			return new ObservableComputations.CollectionPausing<TSourceItem>(
				source: source,
				initialIsPaused: false);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.CollectionPausing<TSourceItem> CollectionPausing<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 bool initialIsPaused)
			
		{
			return new ObservableComputations.CollectionPausing<TSourceItem>(
				source: source,
				initialIsPaused: initialIsPaused);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.CollectionPausing<TSourceItem> CollectionPausing<TSourceItem>(this
			 ObservableCollection<TSourceItem> source)
			
		{
			return new ObservableComputations.CollectionPausing<TSourceItem>(
				source: source,
				initialIsPaused: false);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.CollectionPausing<TSourceItem> CollectionPausing<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 bool initialIsPaused)
			
		{
			return new ObservableComputations.CollectionPausing<TSourceItem>(
				sourceScalar: sourceScalar,
				initialIsPaused: initialIsPaused);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.CollectionPausing<TSourceItem> CollectionPausing<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar)
			
		{
			return new ObservableComputations.CollectionPausing<TSourceItem>(
				sourceScalar: sourceScalar,
				initialIsPaused: false);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.CollectionPausing<TSourceItem> CollectionPausing<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 bool initialIsPaused)
			
		{
			return new ObservableComputations.CollectionPausing<TSourceItem>(
				sourceScalar: sourceScalar,
				initialIsPaused: initialIsPaused);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.CollectionPausing<TSourceItem> CollectionPausing<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar)
			
		{
			return new ObservableComputations.CollectionPausing<TSourceItem>(
				sourceScalar: sourceScalar,
				initialIsPaused: false);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.CollectionPausing<TSourceItem> CollectionPausing<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 bool initialIsPaused)
			
		{
			return new ObservableComputations.CollectionPausing<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				initialIsPaused: initialIsPaused);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.CollectionPausing<TSourceItem> CollectionPausing<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression)
			
		{
			return new ObservableComputations.CollectionPausing<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				initialIsPaused: false);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.CollectionPausing<TSourceItem> CollectionPausing<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 bool initialIsPaused)
			
		{
			return new ObservableComputations.CollectionPausing<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				initialIsPaused: initialIsPaused);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.CollectionPausing<TSourceItem> CollectionPausing<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression)
			
		{
			return new ObservableComputations.CollectionPausing<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				initialIsPaused: false);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.CollectionPausing<TSourceItem> CollectionPausing<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 ObservableComputations.IReadScalar<bool> isPausedScalar)
			
		{
			return new ObservableComputations.CollectionPausing<TSourceItem>(
				source: source,
				isPausedScalar: isPausedScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.CollectionPausing<TSourceItem> CollectionPausing<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 Expression<Func<bool>> isPausedExpression)
			
		{
			return new ObservableComputations.CollectionPausing<TSourceItem>(
				source: source,
				isPausedScalar: new Computing<bool>(isPausedExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.CollectionPausing<TSourceItem> CollectionPausing<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 ObservableComputations.IReadScalar<bool> isPausedScalar)
			
		{
			return new ObservableComputations.CollectionPausing<TSourceItem>(
				source: source,
				isPausedScalar: isPausedScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.CollectionPausing<TSourceItem> CollectionPausing<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 Expression<Func<bool>> isPausedExpression)
			
		{
			return new ObservableComputations.CollectionPausing<TSourceItem>(
				source: source,
				isPausedScalar: new Computing<bool>(isPausedExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.CollectionPausing<TSourceItem> CollectionPausing<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 ObservableComputations.IReadScalar<bool> isPausedScalar)
			
		{
			return new ObservableComputations.CollectionPausing<TSourceItem>(
				sourceScalar: sourceScalar,
				isPausedScalar: isPausedScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.CollectionPausing<TSourceItem> CollectionPausing<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 Expression<Func<bool>> isPausedExpression)
			
		{
			return new ObservableComputations.CollectionPausing<TSourceItem>(
				sourceScalar: sourceScalar,
				isPausedScalar: new Computing<bool>(isPausedExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.CollectionPausing<TSourceItem> CollectionPausing<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 ObservableComputations.IReadScalar<bool> isPausedScalar)
			
		{
			return new ObservableComputations.CollectionPausing<TSourceItem>(
				sourceScalar: sourceScalar,
				isPausedScalar: isPausedScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.CollectionPausing<TSourceItem> CollectionPausing<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 Expression<Func<bool>> isPausedExpression)
			
		{
			return new ObservableComputations.CollectionPausing<TSourceItem>(
				sourceScalar: sourceScalar,
				isPausedScalar: new Computing<bool>(isPausedExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.CollectionPausing<TSourceItem> CollectionPausing<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 ObservableComputations.IReadScalar<bool> isPausedScalar)
			
		{
			return new ObservableComputations.CollectionPausing<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				isPausedScalar: isPausedScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.CollectionPausing<TSourceItem> CollectionPausing<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 Expression<Func<bool>> isPausedExpression)
			
		{
			return new ObservableComputations.CollectionPausing<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				isPausedScalar: new Computing<bool>(isPausedExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.CollectionPausing<TSourceItem> CollectionPausing<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 ObservableComputations.IReadScalar<bool> isPausedScalar)
			
		{
			return new ObservableComputations.CollectionPausing<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				isPausedScalar: isPausedScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.CollectionPausing<TSourceItem> CollectionPausing<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 Expression<Func<bool>> isPausedExpression)
			
		{
			return new ObservableComputations.CollectionPausing<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				isPausedScalar: new Computing<bool>(isPausedExpression));
		}

		#endregion
		#region Computing

		[ObservableComputationsCall]
		public static ObservableComputations.Computing<TResult> Computing<TResult>(this
			 System.Linq.Expressions.Expression<System.Func<TResult>> getValueExpression)
			
		{
			return new ObservableComputations.Computing<TResult>(
				getValueExpression: getValueExpression);
		}

		#endregion
		#region Concatenating

		[ObservableComputationsCall]
		public static ObservableComputations.Concatenating<TSourceItem> Concatenating<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourcesScalar)
			
		{
			return new ObservableComputations.Concatenating<TSourceItem>(
				sourcesScalar: sourcesScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Concatenating<TSourceItem> Concatenating<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<ObservableCollection<TSourceItem>>> sourcesScalar)
			
		{
			return new ObservableComputations.Concatenating<TSourceItem>(
				sourcesScalar: sourcesScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Concatenating<TSourceItem> Concatenating<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourcesExpression)
			
		{
			return new ObservableComputations.Concatenating<TSourceItem>(
				sourcesScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourcesExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Concatenating<TSourceItem> Concatenating<TSourceItem>(this
			 Expression<Func<ObservableCollection<ObservableCollection<TSourceItem>>>> sourcesExpression)
			
		{
			return new ObservableComputations.Concatenating<TSourceItem>(
				sourcesScalar: new Computing<ObservableCollection<ObservableCollection<TSourceItem>>>(sourcesExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Concatenating<TSourceItem> Concatenating<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged sources)
			
		{
			return new ObservableComputations.Concatenating<TSourceItem>(
				sources: sources);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Concatenating<TSourceItem> Concatenating<TSourceItem>(this
			 ObservableCollection<ObservableCollection<TSourceItem>> sources)
			
		{
			return new ObservableComputations.Concatenating<TSourceItem>(
				sources: sources);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Concatenating<TSourceItem> Concatenating<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 System.Collections.Specialized.INotifyCollectionChanged source2)
			
		{
			return new ObservableComputations.Concatenating<TSourceItem>(
				source1: source1,
				source2: source2);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Concatenating<TSourceItem> Concatenating<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableCollection<TSourceItem> source2)
			
		{
			return new ObservableComputations.Concatenating<TSourceItem>(
				source1: source1,
				source2: source2);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Concatenating<TSourceItem> Concatenating<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 System.Collections.Specialized.INotifyCollectionChanged source2)
			
		{
			return new ObservableComputations.Concatenating<TSourceItem>(
				source1: source1,
				source2: source2);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Concatenating<TSourceItem> Concatenating<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableCollection<TSourceItem> source2)
			
		{
			return new ObservableComputations.Concatenating<TSourceItem>(
				source1: source1,
				source2: source2);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Concatenating<TSourceItem> Concatenating<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 System.Collections.Specialized.INotifyCollectionChanged source2)
			
		{
			return new ObservableComputations.Concatenating<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Concatenating<TSourceItem> Concatenating<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableCollection<TSourceItem> source2)
			
		{
			return new ObservableComputations.Concatenating<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Concatenating<TSourceItem> Concatenating<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 System.Collections.Specialized.INotifyCollectionChanged source2)
			
		{
			return new ObservableComputations.Concatenating<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Concatenating<TSourceItem> Concatenating<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableCollection<TSourceItem> source2)
			
		{
			return new ObservableComputations.Concatenating<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Concatenating<TSourceItem> Concatenating<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 System.Collections.Specialized.INotifyCollectionChanged source2)
			
		{
			return new ObservableComputations.Concatenating<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2: source2);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Concatenating<TSourceItem> Concatenating<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableCollection<TSourceItem> source2)
			
		{
			return new ObservableComputations.Concatenating<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2: source2);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Concatenating<TSourceItem> Concatenating<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 System.Collections.Specialized.INotifyCollectionChanged source2)
			
		{
			return new ObservableComputations.Concatenating<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2: source2);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Concatenating<TSourceItem> Concatenating<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableCollection<TSourceItem> source2)
			
		{
			return new ObservableComputations.Concatenating<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2: source2);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Concatenating<TSourceItem> Concatenating<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar)
			
		{
			return new ObservableComputations.Concatenating<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Concatenating<TSourceItem> Concatenating<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar)
			
		{
			return new ObservableComputations.Concatenating<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Concatenating<TSourceItem> Concatenating<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression)
			
		{
			return new ObservableComputations.Concatenating<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Concatenating<TSourceItem> Concatenating<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression)
			
		{
			return new ObservableComputations.Concatenating<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Concatenating<TSourceItem> Concatenating<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar)
			
		{
			return new ObservableComputations.Concatenating<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Concatenating<TSourceItem> Concatenating<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar)
			
		{
			return new ObservableComputations.Concatenating<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Concatenating<TSourceItem> Concatenating<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression)
			
		{
			return new ObservableComputations.Concatenating<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Concatenating<TSourceItem> Concatenating<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression)
			
		{
			return new ObservableComputations.Concatenating<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Concatenating<TSourceItem> Concatenating<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar)
			
		{
			return new ObservableComputations.Concatenating<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: source2Scalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Concatenating<TSourceItem> Concatenating<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar)
			
		{
			return new ObservableComputations.Concatenating<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: source2Scalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Concatenating<TSourceItem> Concatenating<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression)
			
		{
			return new ObservableComputations.Concatenating<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Concatenating<TSourceItem> Concatenating<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression)
			
		{
			return new ObservableComputations.Concatenating<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Concatenating<TSourceItem> Concatenating<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar)
			
		{
			return new ObservableComputations.Concatenating<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: source2Scalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Concatenating<TSourceItem> Concatenating<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar)
			
		{
			return new ObservableComputations.Concatenating<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: source2Scalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Concatenating<TSourceItem> Concatenating<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression)
			
		{
			return new ObservableComputations.Concatenating<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Concatenating<TSourceItem> Concatenating<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression)
			
		{
			return new ObservableComputations.Concatenating<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Concatenating<TSourceItem> Concatenating<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar)
			
		{
			return new ObservableComputations.Concatenating<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Concatenating<TSourceItem> Concatenating<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar)
			
		{
			return new ObservableComputations.Concatenating<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Concatenating<TSourceItem> Concatenating<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression)
			
		{
			return new ObservableComputations.Concatenating<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Concatenating<TSourceItem> Concatenating<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression)
			
		{
			return new ObservableComputations.Concatenating<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Concatenating<TSourceItem> Concatenating<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar)
			
		{
			return new ObservableComputations.Concatenating<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Concatenating<TSourceItem> Concatenating<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar)
			
		{
			return new ObservableComputations.Concatenating<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Concatenating<TSourceItem> Concatenating<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression)
			
		{
			return new ObservableComputations.Concatenating<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Concatenating<TSourceItem> Concatenating<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression)
			
		{
			return new ObservableComputations.Concatenating<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression));
		}

		#endregion
		#region ConcurrentDictionaring

		[ObservableComputationsCall]
		public static ObservableComputations.ConcurrentDictionaring<TSourceItem, TKey, TValue> ConcurrentDictionaring<TSourceItem, TKey, TValue>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TValue>> valueSelectorExpression,
			 System.Collections.Generic.IEqualityComparer<TKey> equalityComparer)
			
		{
			return new ObservableComputations.ConcurrentDictionaring<TSourceItem, TKey, TValue>(
				sourceScalar: sourceScalar,
				keySelectorExpression: keySelectorExpression,
				valueSelectorExpression: valueSelectorExpression,
				equalityComparer: equalityComparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ConcurrentDictionaring<TSourceItem, TKey, TValue> ConcurrentDictionaring<TSourceItem, TKey, TValue>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TValue>> valueSelectorExpression)
			
		{
			return new ObservableComputations.ConcurrentDictionaring<TSourceItem, TKey, TValue>(
				sourceScalar: sourceScalar,
				keySelectorExpression: keySelectorExpression,
				valueSelectorExpression: valueSelectorExpression,
				equalityComparer: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ConcurrentDictionaring<TSourceItem, TKey, TValue> ConcurrentDictionaring<TSourceItem, TKey, TValue>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TValue>> valueSelectorExpression,
			 System.Collections.Generic.IEqualityComparer<TKey> equalityComparer)
			
		{
			return new ObservableComputations.ConcurrentDictionaring<TSourceItem, TKey, TValue>(
				sourceScalar: sourceScalar,
				keySelectorExpression: keySelectorExpression,
				valueSelectorExpression: valueSelectorExpression,
				equalityComparer: equalityComparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ConcurrentDictionaring<TSourceItem, TKey, TValue> ConcurrentDictionaring<TSourceItem, TKey, TValue>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TValue>> valueSelectorExpression)
			
		{
			return new ObservableComputations.ConcurrentDictionaring<TSourceItem, TKey, TValue>(
				sourceScalar: sourceScalar,
				keySelectorExpression: keySelectorExpression,
				valueSelectorExpression: valueSelectorExpression,
				equalityComparer: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ConcurrentDictionaring<TSourceItem, TKey, TValue> ConcurrentDictionaring<TSourceItem, TKey, TValue>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TValue>> valueSelectorExpression,
			 System.Collections.Generic.IEqualityComparer<TKey> equalityComparer)
			
		{
			return new ObservableComputations.ConcurrentDictionaring<TSourceItem, TKey, TValue>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				keySelectorExpression: keySelectorExpression,
				valueSelectorExpression: valueSelectorExpression,
				equalityComparer: equalityComparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ConcurrentDictionaring<TSourceItem, TKey, TValue> ConcurrentDictionaring<TSourceItem, TKey, TValue>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TValue>> valueSelectorExpression)
			
		{
			return new ObservableComputations.ConcurrentDictionaring<TSourceItem, TKey, TValue>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				keySelectorExpression: keySelectorExpression,
				valueSelectorExpression: valueSelectorExpression,
				equalityComparer: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ConcurrentDictionaring<TSourceItem, TKey, TValue> ConcurrentDictionaring<TSourceItem, TKey, TValue>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TValue>> valueSelectorExpression,
			 System.Collections.Generic.IEqualityComparer<TKey> equalityComparer)
			
		{
			return new ObservableComputations.ConcurrentDictionaring<TSourceItem, TKey, TValue>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				keySelectorExpression: keySelectorExpression,
				valueSelectorExpression: valueSelectorExpression,
				equalityComparer: equalityComparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ConcurrentDictionaring<TSourceItem, TKey, TValue> ConcurrentDictionaring<TSourceItem, TKey, TValue>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TValue>> valueSelectorExpression)
			
		{
			return new ObservableComputations.ConcurrentDictionaring<TSourceItem, TKey, TValue>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				keySelectorExpression: keySelectorExpression,
				valueSelectorExpression: valueSelectorExpression,
				equalityComparer: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ConcurrentDictionaring<TSourceItem, TKey, TValue> ConcurrentDictionaring<TSourceItem, TKey, TValue>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TValue>> valueSelectorExpression,
			 System.Collections.Generic.IEqualityComparer<TKey> equalityComparer)
			
		{
			return new ObservableComputations.ConcurrentDictionaring<TSourceItem, TKey, TValue>(
				source: source,
				keySelectorExpression: keySelectorExpression,
				valueSelectorExpression: valueSelectorExpression,
				equalityComparer: equalityComparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ConcurrentDictionaring<TSourceItem, TKey, TValue> ConcurrentDictionaring<TSourceItem, TKey, TValue>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TValue>> valueSelectorExpression)
			
		{
			return new ObservableComputations.ConcurrentDictionaring<TSourceItem, TKey, TValue>(
				source: source,
				keySelectorExpression: keySelectorExpression,
				valueSelectorExpression: valueSelectorExpression,
				equalityComparer: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ConcurrentDictionaring<TSourceItem, TKey, TValue> ConcurrentDictionaring<TSourceItem, TKey, TValue>(this
			 ObservableCollection<TSourceItem> source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TValue>> valueSelectorExpression,
			 System.Collections.Generic.IEqualityComparer<TKey> equalityComparer)
			
		{
			return new ObservableComputations.ConcurrentDictionaring<TSourceItem, TKey, TValue>(
				source: source,
				keySelectorExpression: keySelectorExpression,
				valueSelectorExpression: valueSelectorExpression,
				equalityComparer: equalityComparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ConcurrentDictionaring<TSourceItem, TKey, TValue> ConcurrentDictionaring<TSourceItem, TKey, TValue>(this
			 ObservableCollection<TSourceItem> source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TValue>> valueSelectorExpression)
			
		{
			return new ObservableComputations.ConcurrentDictionaring<TSourceItem, TKey, TValue>(
				source: source,
				keySelectorExpression: keySelectorExpression,
				valueSelectorExpression: valueSelectorExpression,
				equalityComparer: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ConcurrentDictionaring<TSourceItem, TKey, TValue> ConcurrentDictionaring<TSourceItem, TKey, TValue>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TValue>> valueSelectorExpression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TKey>> equalityComparerScalar)
			
		{
			return new ObservableComputations.ConcurrentDictionaring<TSourceItem, TKey, TValue>(
				sourceScalar: sourceScalar,
				keySelectorExpression: keySelectorExpression,
				valueSelectorExpression: valueSelectorExpression,
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ConcurrentDictionaring<TSourceItem, TKey, TValue> ConcurrentDictionaring<TSourceItem, TKey, TValue>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TValue>> valueSelectorExpression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TKey>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.ConcurrentDictionaring<TSourceItem, TKey, TValue>(
				sourceScalar: sourceScalar,
				keySelectorExpression: keySelectorExpression,
				valueSelectorExpression: valueSelectorExpression,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TKey>>(equalityComparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ConcurrentDictionaring<TSourceItem, TKey, TValue> ConcurrentDictionaring<TSourceItem, TKey, TValue>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TValue>> valueSelectorExpression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TKey>> equalityComparerScalar)
			
		{
			return new ObservableComputations.ConcurrentDictionaring<TSourceItem, TKey, TValue>(
				sourceScalar: sourceScalar,
				keySelectorExpression: keySelectorExpression,
				valueSelectorExpression: valueSelectorExpression,
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ConcurrentDictionaring<TSourceItem, TKey, TValue> ConcurrentDictionaring<TSourceItem, TKey, TValue>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TValue>> valueSelectorExpression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TKey>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.ConcurrentDictionaring<TSourceItem, TKey, TValue>(
				sourceScalar: sourceScalar,
				keySelectorExpression: keySelectorExpression,
				valueSelectorExpression: valueSelectorExpression,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TKey>>(equalityComparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ConcurrentDictionaring<TSourceItem, TKey, TValue> ConcurrentDictionaring<TSourceItem, TKey, TValue>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TValue>> valueSelectorExpression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TKey>> equalityComparerScalar)
			
		{
			return new ObservableComputations.ConcurrentDictionaring<TSourceItem, TKey, TValue>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				keySelectorExpression: keySelectorExpression,
				valueSelectorExpression: valueSelectorExpression,
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ConcurrentDictionaring<TSourceItem, TKey, TValue> ConcurrentDictionaring<TSourceItem, TKey, TValue>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TValue>> valueSelectorExpression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TKey>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.ConcurrentDictionaring<TSourceItem, TKey, TValue>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				keySelectorExpression: keySelectorExpression,
				valueSelectorExpression: valueSelectorExpression,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TKey>>(equalityComparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ConcurrentDictionaring<TSourceItem, TKey, TValue> ConcurrentDictionaring<TSourceItem, TKey, TValue>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TValue>> valueSelectorExpression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TKey>> equalityComparerScalar)
			
		{
			return new ObservableComputations.ConcurrentDictionaring<TSourceItem, TKey, TValue>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				keySelectorExpression: keySelectorExpression,
				valueSelectorExpression: valueSelectorExpression,
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ConcurrentDictionaring<TSourceItem, TKey, TValue> ConcurrentDictionaring<TSourceItem, TKey, TValue>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TValue>> valueSelectorExpression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TKey>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.ConcurrentDictionaring<TSourceItem, TKey, TValue>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				keySelectorExpression: keySelectorExpression,
				valueSelectorExpression: valueSelectorExpression,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TKey>>(equalityComparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ConcurrentDictionaring<TSourceItem, TKey, TValue> ConcurrentDictionaring<TSourceItem, TKey, TValue>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TValue>> valueSelectorExpression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TKey>> equalityComparerScalar)
			
		{
			return new ObservableComputations.ConcurrentDictionaring<TSourceItem, TKey, TValue>(
				source: source,
				keySelectorExpression: keySelectorExpression,
				valueSelectorExpression: valueSelectorExpression,
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ConcurrentDictionaring<TSourceItem, TKey, TValue> ConcurrentDictionaring<TSourceItem, TKey, TValue>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TValue>> valueSelectorExpression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TKey>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.ConcurrentDictionaring<TSourceItem, TKey, TValue>(
				source: source,
				keySelectorExpression: keySelectorExpression,
				valueSelectorExpression: valueSelectorExpression,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TKey>>(equalityComparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ConcurrentDictionaring<TSourceItem, TKey, TValue> ConcurrentDictionaring<TSourceItem, TKey, TValue>(this
			 ObservableCollection<TSourceItem> source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TValue>> valueSelectorExpression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TKey>> equalityComparerScalar)
			
		{
			return new ObservableComputations.ConcurrentDictionaring<TSourceItem, TKey, TValue>(
				source: source,
				keySelectorExpression: keySelectorExpression,
				valueSelectorExpression: valueSelectorExpression,
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ConcurrentDictionaring<TSourceItem, TKey, TValue> ConcurrentDictionaring<TSourceItem, TKey, TValue>(this
			 ObservableCollection<TSourceItem> source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TValue>> valueSelectorExpression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TKey>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.ConcurrentDictionaring<TSourceItem, TKey, TValue>(
				source: source,
				keySelectorExpression: keySelectorExpression,
				valueSelectorExpression: valueSelectorExpression,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TKey>>(equalityComparerExpression));
		}

		#endregion
		#region ContainsComputing

		[ObservableComputationsCall]
		public static ObservableComputations.ContainsComputing<TSourceItem> ContainsComputing<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 ObservableComputations.IReadScalar<TSourceItem> itemScalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.ContainsComputing<TSourceItem>(
				sourceScalar: sourceScalar,
				itemScalar: itemScalar,
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ContainsComputing<TSourceItem> ContainsComputing<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 ObservableComputations.IReadScalar<TSourceItem> itemScalar)
			
		{
			return new ObservableComputations.ContainsComputing<TSourceItem>(
				sourceScalar: sourceScalar,
				itemScalar: itemScalar,
				equalityComparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ContainsComputing<TSourceItem> ContainsComputing<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 ObservableComputations.IReadScalar<TSourceItem> itemScalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.ContainsComputing<TSourceItem>(
				sourceScalar: sourceScalar,
				itemScalar: itemScalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ContainsComputing<TSourceItem> ContainsComputing<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 Expression<Func<TSourceItem>> itemExpression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.ContainsComputing<TSourceItem>(
				sourceScalar: sourceScalar,
				itemScalar: new Computing<TSourceItem>(itemExpression),
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ContainsComputing<TSourceItem> ContainsComputing<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 Expression<Func<TSourceItem>> itemExpression)
			
		{
			return new ObservableComputations.ContainsComputing<TSourceItem>(
				sourceScalar: sourceScalar,
				itemScalar: new Computing<TSourceItem>(itemExpression),
				equalityComparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ContainsComputing<TSourceItem> ContainsComputing<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 Expression<Func<TSourceItem>> itemExpression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.ContainsComputing<TSourceItem>(
				sourceScalar: sourceScalar,
				itemScalar: new Computing<TSourceItem>(itemExpression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ContainsComputing<TSourceItem> ContainsComputing<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 ObservableComputations.IReadScalar<TSourceItem> itemScalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.ContainsComputing<TSourceItem>(
				sourceScalar: sourceScalar,
				itemScalar: itemScalar,
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ContainsComputing<TSourceItem> ContainsComputing<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 ObservableComputations.IReadScalar<TSourceItem> itemScalar)
			
		{
			return new ObservableComputations.ContainsComputing<TSourceItem>(
				sourceScalar: sourceScalar,
				itemScalar: itemScalar,
				equalityComparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ContainsComputing<TSourceItem> ContainsComputing<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 ObservableComputations.IReadScalar<TSourceItem> itemScalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.ContainsComputing<TSourceItem>(
				sourceScalar: sourceScalar,
				itemScalar: itemScalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ContainsComputing<TSourceItem> ContainsComputing<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 Expression<Func<TSourceItem>> itemExpression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.ContainsComputing<TSourceItem>(
				sourceScalar: sourceScalar,
				itemScalar: new Computing<TSourceItem>(itemExpression),
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ContainsComputing<TSourceItem> ContainsComputing<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 Expression<Func<TSourceItem>> itemExpression)
			
		{
			return new ObservableComputations.ContainsComputing<TSourceItem>(
				sourceScalar: sourceScalar,
				itemScalar: new Computing<TSourceItem>(itemExpression),
				equalityComparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ContainsComputing<TSourceItem> ContainsComputing<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 Expression<Func<TSourceItem>> itemExpression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.ContainsComputing<TSourceItem>(
				sourceScalar: sourceScalar,
				itemScalar: new Computing<TSourceItem>(itemExpression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ContainsComputing<TSourceItem> ContainsComputing<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 ObservableComputations.IReadScalar<TSourceItem> itemScalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.ContainsComputing<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				itemScalar: itemScalar,
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ContainsComputing<TSourceItem> ContainsComputing<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 ObservableComputations.IReadScalar<TSourceItem> itemScalar)
			
		{
			return new ObservableComputations.ContainsComputing<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				itemScalar: itemScalar,
				equalityComparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ContainsComputing<TSourceItem> ContainsComputing<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 ObservableComputations.IReadScalar<TSourceItem> itemScalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.ContainsComputing<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				itemScalar: itemScalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ContainsComputing<TSourceItem> ContainsComputing<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 Expression<Func<TSourceItem>> itemExpression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.ContainsComputing<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				itemScalar: new Computing<TSourceItem>(itemExpression),
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ContainsComputing<TSourceItem> ContainsComputing<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 Expression<Func<TSourceItem>> itemExpression)
			
		{
			return new ObservableComputations.ContainsComputing<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				itemScalar: new Computing<TSourceItem>(itemExpression),
				equalityComparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ContainsComputing<TSourceItem> ContainsComputing<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 Expression<Func<TSourceItem>> itemExpression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.ContainsComputing<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				itemScalar: new Computing<TSourceItem>(itemExpression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ContainsComputing<TSourceItem> ContainsComputing<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 ObservableComputations.IReadScalar<TSourceItem> itemScalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.ContainsComputing<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				itemScalar: itemScalar,
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ContainsComputing<TSourceItem> ContainsComputing<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 ObservableComputations.IReadScalar<TSourceItem> itemScalar)
			
		{
			return new ObservableComputations.ContainsComputing<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				itemScalar: itemScalar,
				equalityComparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ContainsComputing<TSourceItem> ContainsComputing<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 ObservableComputations.IReadScalar<TSourceItem> itemScalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.ContainsComputing<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				itemScalar: itemScalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ContainsComputing<TSourceItem> ContainsComputing<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 Expression<Func<TSourceItem>> itemExpression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.ContainsComputing<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				itemScalar: new Computing<TSourceItem>(itemExpression),
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ContainsComputing<TSourceItem> ContainsComputing<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 Expression<Func<TSourceItem>> itemExpression)
			
		{
			return new ObservableComputations.ContainsComputing<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				itemScalar: new Computing<TSourceItem>(itemExpression),
				equalityComparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ContainsComputing<TSourceItem> ContainsComputing<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 Expression<Func<TSourceItem>> itemExpression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.ContainsComputing<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				itemScalar: new Computing<TSourceItem>(itemExpression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ContainsComputing<TSourceItem> ContainsComputing<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 TSourceItem item,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.ContainsComputing<TSourceItem>(
				sourceScalar: sourceScalar,
				item: item,
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ContainsComputing<TSourceItem> ContainsComputing<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 TSourceItem item)
			
		{
			return new ObservableComputations.ContainsComputing<TSourceItem>(
				sourceScalar: sourceScalar,
				item: item,
				equalityComparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ContainsComputing<TSourceItem> ContainsComputing<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 TSourceItem item,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.ContainsComputing<TSourceItem>(
				sourceScalar: sourceScalar,
				item: item,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ContainsComputing<TSourceItem> ContainsComputing<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 TSourceItem item,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.ContainsComputing<TSourceItem>(
				sourceScalar: sourceScalar,
				item: item,
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ContainsComputing<TSourceItem> ContainsComputing<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 TSourceItem item)
			
		{
			return new ObservableComputations.ContainsComputing<TSourceItem>(
				sourceScalar: sourceScalar,
				item: item,
				equalityComparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ContainsComputing<TSourceItem> ContainsComputing<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 TSourceItem item,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.ContainsComputing<TSourceItem>(
				sourceScalar: sourceScalar,
				item: item,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ContainsComputing<TSourceItem> ContainsComputing<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 TSourceItem item,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.ContainsComputing<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				item: item,
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ContainsComputing<TSourceItem> ContainsComputing<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 TSourceItem item)
			
		{
			return new ObservableComputations.ContainsComputing<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				item: item,
				equalityComparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ContainsComputing<TSourceItem> ContainsComputing<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 TSourceItem item,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.ContainsComputing<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				item: item,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ContainsComputing<TSourceItem> ContainsComputing<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 TSourceItem item,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.ContainsComputing<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				item: item,
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ContainsComputing<TSourceItem> ContainsComputing<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 TSourceItem item)
			
		{
			return new ObservableComputations.ContainsComputing<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				item: item,
				equalityComparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ContainsComputing<TSourceItem> ContainsComputing<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 TSourceItem item,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.ContainsComputing<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				item: item,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ContainsComputing<TSourceItem> ContainsComputing<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 ObservableComputations.IReadScalar<TSourceItem> itemScalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.ContainsComputing<TSourceItem>(
				sourceScalar: sourceScalar,
				itemScalar: itemScalar,
				equalityComparer: equalityComparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ContainsComputing<TSourceItem> ContainsComputing<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 Expression<Func<TSourceItem>> itemExpression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.ContainsComputing<TSourceItem>(
				sourceScalar: sourceScalar,
				itemScalar: new Computing<TSourceItem>(itemExpression),
				equalityComparer: equalityComparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ContainsComputing<TSourceItem> ContainsComputing<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 ObservableComputations.IReadScalar<TSourceItem> itemScalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.ContainsComputing<TSourceItem>(
				sourceScalar: sourceScalar,
				itemScalar: itemScalar,
				equalityComparer: equalityComparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ContainsComputing<TSourceItem> ContainsComputing<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 Expression<Func<TSourceItem>> itemExpression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.ContainsComputing<TSourceItem>(
				sourceScalar: sourceScalar,
				itemScalar: new Computing<TSourceItem>(itemExpression),
				equalityComparer: equalityComparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ContainsComputing<TSourceItem> ContainsComputing<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 ObservableComputations.IReadScalar<TSourceItem> itemScalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.ContainsComputing<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				itemScalar: itemScalar,
				equalityComparer: equalityComparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ContainsComputing<TSourceItem> ContainsComputing<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 Expression<Func<TSourceItem>> itemExpression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.ContainsComputing<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				itemScalar: new Computing<TSourceItem>(itemExpression),
				equalityComparer: equalityComparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ContainsComputing<TSourceItem> ContainsComputing<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 ObservableComputations.IReadScalar<TSourceItem> itemScalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.ContainsComputing<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				itemScalar: itemScalar,
				equalityComparer: equalityComparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ContainsComputing<TSourceItem> ContainsComputing<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 Expression<Func<TSourceItem>> itemExpression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.ContainsComputing<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				itemScalar: new Computing<TSourceItem>(itemExpression),
				equalityComparer: equalityComparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ContainsComputing<TSourceItem> ContainsComputing<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 TSourceItem item,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.ContainsComputing<TSourceItem>(
				sourceScalar: sourceScalar,
				item: item,
				equalityComparer: equalityComparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ContainsComputing<TSourceItem> ContainsComputing<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 TSourceItem item,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.ContainsComputing<TSourceItem>(
				sourceScalar: sourceScalar,
				item: item,
				equalityComparer: equalityComparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ContainsComputing<TSourceItem> ContainsComputing<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 TSourceItem item,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.ContainsComputing<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				item: item,
				equalityComparer: equalityComparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ContainsComputing<TSourceItem> ContainsComputing<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 TSourceItem item,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.ContainsComputing<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				item: item,
				equalityComparer: equalityComparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ContainsComputing<TSourceItem> ContainsComputing<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 ObservableComputations.IReadScalar<TSourceItem> itemScalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.ContainsComputing<TSourceItem>(
				source: source,
				itemScalar: itemScalar,
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ContainsComputing<TSourceItem> ContainsComputing<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 ObservableComputations.IReadScalar<TSourceItem> itemScalar)
			
		{
			return new ObservableComputations.ContainsComputing<TSourceItem>(
				source: source,
				itemScalar: itemScalar,
				equalityComparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ContainsComputing<TSourceItem> ContainsComputing<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 ObservableComputations.IReadScalar<TSourceItem> itemScalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.ContainsComputing<TSourceItem>(
				source: source,
				itemScalar: itemScalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ContainsComputing<TSourceItem> ContainsComputing<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 Expression<Func<TSourceItem>> itemExpression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.ContainsComputing<TSourceItem>(
				source: source,
				itemScalar: new Computing<TSourceItem>(itemExpression),
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ContainsComputing<TSourceItem> ContainsComputing<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 Expression<Func<TSourceItem>> itemExpression)
			
		{
			return new ObservableComputations.ContainsComputing<TSourceItem>(
				source: source,
				itemScalar: new Computing<TSourceItem>(itemExpression),
				equalityComparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ContainsComputing<TSourceItem> ContainsComputing<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 Expression<Func<TSourceItem>> itemExpression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.ContainsComputing<TSourceItem>(
				source: source,
				itemScalar: new Computing<TSourceItem>(itemExpression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ContainsComputing<TSourceItem> ContainsComputing<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 ObservableComputations.IReadScalar<TSourceItem> itemScalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.ContainsComputing<TSourceItem>(
				source: source,
				itemScalar: itemScalar,
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ContainsComputing<TSourceItem> ContainsComputing<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 ObservableComputations.IReadScalar<TSourceItem> itemScalar)
			
		{
			return new ObservableComputations.ContainsComputing<TSourceItem>(
				source: source,
				itemScalar: itemScalar,
				equalityComparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ContainsComputing<TSourceItem> ContainsComputing<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 ObservableComputations.IReadScalar<TSourceItem> itemScalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.ContainsComputing<TSourceItem>(
				source: source,
				itemScalar: itemScalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ContainsComputing<TSourceItem> ContainsComputing<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 Expression<Func<TSourceItem>> itemExpression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.ContainsComputing<TSourceItem>(
				source: source,
				itemScalar: new Computing<TSourceItem>(itemExpression),
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ContainsComputing<TSourceItem> ContainsComputing<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 Expression<Func<TSourceItem>> itemExpression)
			
		{
			return new ObservableComputations.ContainsComputing<TSourceItem>(
				source: source,
				itemScalar: new Computing<TSourceItem>(itemExpression),
				equalityComparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ContainsComputing<TSourceItem> ContainsComputing<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 Expression<Func<TSourceItem>> itemExpression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.ContainsComputing<TSourceItem>(
				source: source,
				itemScalar: new Computing<TSourceItem>(itemExpression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ContainsComputing<TSourceItem> ContainsComputing<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 TSourceItem item,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.ContainsComputing<TSourceItem>(
				source: source,
				item: item,
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ContainsComputing<TSourceItem> ContainsComputing<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 TSourceItem item)
			
		{
			return new ObservableComputations.ContainsComputing<TSourceItem>(
				source: source,
				item: item,
				equalityComparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ContainsComputing<TSourceItem> ContainsComputing<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 TSourceItem item,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.ContainsComputing<TSourceItem>(
				source: source,
				item: item,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ContainsComputing<TSourceItem> ContainsComputing<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 TSourceItem item,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.ContainsComputing<TSourceItem>(
				source: source,
				item: item,
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ContainsComputing<TSourceItem> ContainsComputing<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 TSourceItem item)
			
		{
			return new ObservableComputations.ContainsComputing<TSourceItem>(
				source: source,
				item: item,
				equalityComparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ContainsComputing<TSourceItem> ContainsComputing<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 TSourceItem item,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.ContainsComputing<TSourceItem>(
				source: source,
				item: item,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ContainsComputing<TSourceItem> ContainsComputing<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 ObservableComputations.IReadScalar<TSourceItem> itemScalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.ContainsComputing<TSourceItem>(
				source: source,
				itemScalar: itemScalar,
				equalityComparer: equalityComparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ContainsComputing<TSourceItem> ContainsComputing<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 Expression<Func<TSourceItem>> itemExpression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.ContainsComputing<TSourceItem>(
				source: source,
				itemScalar: new Computing<TSourceItem>(itemExpression),
				equalityComparer: equalityComparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ContainsComputing<TSourceItem> ContainsComputing<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 ObservableComputations.IReadScalar<TSourceItem> itemScalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.ContainsComputing<TSourceItem>(
				source: source,
				itemScalar: itemScalar,
				equalityComparer: equalityComparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ContainsComputing<TSourceItem> ContainsComputing<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 Expression<Func<TSourceItem>> itemExpression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.ContainsComputing<TSourceItem>(
				source: source,
				itemScalar: new Computing<TSourceItem>(itemExpression),
				equalityComparer: equalityComparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ContainsComputing<TSourceItem> ContainsComputing<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 TSourceItem item,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.ContainsComputing<TSourceItem>(
				source: source,
				item: item,
				equalityComparer: equalityComparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ContainsComputing<TSourceItem> ContainsComputing<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 TSourceItem item,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.ContainsComputing<TSourceItem>(
				source: source,
				item: item,
				equalityComparer: equalityComparer);
		}

		#endregion
		#region Dictionaring

		[ObservableComputationsCall]
		public static ObservableComputations.Dictionaring<TSourceItem, TKey, TValue> Dictionaring<TSourceItem, TKey, TValue>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TValue>> valueSelectorExpression,
			 System.Collections.Generic.IEqualityComparer<TKey> equalityComparer)
			
		{
			return new ObservableComputations.Dictionaring<TSourceItem, TKey, TValue>(
				sourceScalar: sourceScalar,
				keySelectorExpression: keySelectorExpression,
				valueSelectorExpression: valueSelectorExpression,
				equalityComparer: equalityComparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Dictionaring<TSourceItem, TKey, TValue> Dictionaring<TSourceItem, TKey, TValue>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TValue>> valueSelectorExpression)
			
		{
			return new ObservableComputations.Dictionaring<TSourceItem, TKey, TValue>(
				sourceScalar: sourceScalar,
				keySelectorExpression: keySelectorExpression,
				valueSelectorExpression: valueSelectorExpression,
				equalityComparer: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Dictionaring<TSourceItem, TKey, TValue> Dictionaring<TSourceItem, TKey, TValue>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TValue>> valueSelectorExpression,
			 System.Collections.Generic.IEqualityComparer<TKey> equalityComparer)
			
		{
			return new ObservableComputations.Dictionaring<TSourceItem, TKey, TValue>(
				sourceScalar: sourceScalar,
				keySelectorExpression: keySelectorExpression,
				valueSelectorExpression: valueSelectorExpression,
				equalityComparer: equalityComparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Dictionaring<TSourceItem, TKey, TValue> Dictionaring<TSourceItem, TKey, TValue>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TValue>> valueSelectorExpression)
			
		{
			return new ObservableComputations.Dictionaring<TSourceItem, TKey, TValue>(
				sourceScalar: sourceScalar,
				keySelectorExpression: keySelectorExpression,
				valueSelectorExpression: valueSelectorExpression,
				equalityComparer: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Dictionaring<TSourceItem, TKey, TValue> Dictionaring<TSourceItem, TKey, TValue>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TValue>> valueSelectorExpression,
			 System.Collections.Generic.IEqualityComparer<TKey> equalityComparer)
			
		{
			return new ObservableComputations.Dictionaring<TSourceItem, TKey, TValue>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				keySelectorExpression: keySelectorExpression,
				valueSelectorExpression: valueSelectorExpression,
				equalityComparer: equalityComparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Dictionaring<TSourceItem, TKey, TValue> Dictionaring<TSourceItem, TKey, TValue>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TValue>> valueSelectorExpression)
			
		{
			return new ObservableComputations.Dictionaring<TSourceItem, TKey, TValue>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				keySelectorExpression: keySelectorExpression,
				valueSelectorExpression: valueSelectorExpression,
				equalityComparer: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Dictionaring<TSourceItem, TKey, TValue> Dictionaring<TSourceItem, TKey, TValue>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TValue>> valueSelectorExpression,
			 System.Collections.Generic.IEqualityComparer<TKey> equalityComparer)
			
		{
			return new ObservableComputations.Dictionaring<TSourceItem, TKey, TValue>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				keySelectorExpression: keySelectorExpression,
				valueSelectorExpression: valueSelectorExpression,
				equalityComparer: equalityComparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Dictionaring<TSourceItem, TKey, TValue> Dictionaring<TSourceItem, TKey, TValue>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TValue>> valueSelectorExpression)
			
		{
			return new ObservableComputations.Dictionaring<TSourceItem, TKey, TValue>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				keySelectorExpression: keySelectorExpression,
				valueSelectorExpression: valueSelectorExpression,
				equalityComparer: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Dictionaring<TSourceItem, TKey, TValue> Dictionaring<TSourceItem, TKey, TValue>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TValue>> valueSelectorExpression,
			 System.Collections.Generic.IEqualityComparer<TKey> equalityComparer)
			
		{
			return new ObservableComputations.Dictionaring<TSourceItem, TKey, TValue>(
				source: source,
				keySelectorExpression: keySelectorExpression,
				valueSelectorExpression: valueSelectorExpression,
				equalityComparer: equalityComparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Dictionaring<TSourceItem, TKey, TValue> Dictionaring<TSourceItem, TKey, TValue>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TValue>> valueSelectorExpression)
			
		{
			return new ObservableComputations.Dictionaring<TSourceItem, TKey, TValue>(
				source: source,
				keySelectorExpression: keySelectorExpression,
				valueSelectorExpression: valueSelectorExpression,
				equalityComparer: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Dictionaring<TSourceItem, TKey, TValue> Dictionaring<TSourceItem, TKey, TValue>(this
			 ObservableCollection<TSourceItem> source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TValue>> valueSelectorExpression,
			 System.Collections.Generic.IEqualityComparer<TKey> equalityComparer)
			
		{
			return new ObservableComputations.Dictionaring<TSourceItem, TKey, TValue>(
				source: source,
				keySelectorExpression: keySelectorExpression,
				valueSelectorExpression: valueSelectorExpression,
				equalityComparer: equalityComparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Dictionaring<TSourceItem, TKey, TValue> Dictionaring<TSourceItem, TKey, TValue>(this
			 ObservableCollection<TSourceItem> source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TValue>> valueSelectorExpression)
			
		{
			return new ObservableComputations.Dictionaring<TSourceItem, TKey, TValue>(
				source: source,
				keySelectorExpression: keySelectorExpression,
				valueSelectorExpression: valueSelectorExpression,
				equalityComparer: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Dictionaring<TSourceItem, TKey, TValue> Dictionaring<TSourceItem, TKey, TValue>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TValue>> valueSelectorExpression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TKey>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Dictionaring<TSourceItem, TKey, TValue>(
				sourceScalar: sourceScalar,
				keySelectorExpression: keySelectorExpression,
				valueSelectorExpression: valueSelectorExpression,
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Dictionaring<TSourceItem, TKey, TValue> Dictionaring<TSourceItem, TKey, TValue>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TValue>> valueSelectorExpression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TKey>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Dictionaring<TSourceItem, TKey, TValue>(
				sourceScalar: sourceScalar,
				keySelectorExpression: keySelectorExpression,
				valueSelectorExpression: valueSelectorExpression,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TKey>>(equalityComparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Dictionaring<TSourceItem, TKey, TValue> Dictionaring<TSourceItem, TKey, TValue>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TValue>> valueSelectorExpression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TKey>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Dictionaring<TSourceItem, TKey, TValue>(
				sourceScalar: sourceScalar,
				keySelectorExpression: keySelectorExpression,
				valueSelectorExpression: valueSelectorExpression,
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Dictionaring<TSourceItem, TKey, TValue> Dictionaring<TSourceItem, TKey, TValue>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TValue>> valueSelectorExpression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TKey>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Dictionaring<TSourceItem, TKey, TValue>(
				sourceScalar: sourceScalar,
				keySelectorExpression: keySelectorExpression,
				valueSelectorExpression: valueSelectorExpression,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TKey>>(equalityComparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Dictionaring<TSourceItem, TKey, TValue> Dictionaring<TSourceItem, TKey, TValue>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TValue>> valueSelectorExpression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TKey>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Dictionaring<TSourceItem, TKey, TValue>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				keySelectorExpression: keySelectorExpression,
				valueSelectorExpression: valueSelectorExpression,
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Dictionaring<TSourceItem, TKey, TValue> Dictionaring<TSourceItem, TKey, TValue>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TValue>> valueSelectorExpression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TKey>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Dictionaring<TSourceItem, TKey, TValue>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				keySelectorExpression: keySelectorExpression,
				valueSelectorExpression: valueSelectorExpression,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TKey>>(equalityComparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Dictionaring<TSourceItem, TKey, TValue> Dictionaring<TSourceItem, TKey, TValue>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TValue>> valueSelectorExpression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TKey>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Dictionaring<TSourceItem, TKey, TValue>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				keySelectorExpression: keySelectorExpression,
				valueSelectorExpression: valueSelectorExpression,
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Dictionaring<TSourceItem, TKey, TValue> Dictionaring<TSourceItem, TKey, TValue>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TValue>> valueSelectorExpression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TKey>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Dictionaring<TSourceItem, TKey, TValue>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				keySelectorExpression: keySelectorExpression,
				valueSelectorExpression: valueSelectorExpression,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TKey>>(equalityComparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Dictionaring<TSourceItem, TKey, TValue> Dictionaring<TSourceItem, TKey, TValue>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TValue>> valueSelectorExpression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TKey>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Dictionaring<TSourceItem, TKey, TValue>(
				source: source,
				keySelectorExpression: keySelectorExpression,
				valueSelectorExpression: valueSelectorExpression,
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Dictionaring<TSourceItem, TKey, TValue> Dictionaring<TSourceItem, TKey, TValue>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TValue>> valueSelectorExpression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TKey>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Dictionaring<TSourceItem, TKey, TValue>(
				source: source,
				keySelectorExpression: keySelectorExpression,
				valueSelectorExpression: valueSelectorExpression,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TKey>>(equalityComparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Dictionaring<TSourceItem, TKey, TValue> Dictionaring<TSourceItem, TKey, TValue>(this
			 ObservableCollection<TSourceItem> source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TValue>> valueSelectorExpression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TKey>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Dictionaring<TSourceItem, TKey, TValue>(
				source: source,
				keySelectorExpression: keySelectorExpression,
				valueSelectorExpression: valueSelectorExpression,
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Dictionaring<TSourceItem, TKey, TValue> Dictionaring<TSourceItem, TKey, TValue>(this
			 ObservableCollection<TSourceItem> source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TValue>> valueSelectorExpression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TKey>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Dictionaring<TSourceItem, TKey, TValue>(
				source: source,
				keySelectorExpression: keySelectorExpression,
				valueSelectorExpression: valueSelectorExpression,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TKey>>(equalityComparerExpression));
		}

		#endregion
		#region Differing

		[ObservableComputationsCall]
		public static ObservableComputations.Differing<TResult> Differing<TResult>(this
			 ObservableComputations.IReadScalar<TResult> scalar,
			 System.Collections.Generic.IEqualityComparer<TResult> equalityComparer)
			
		{
			return new ObservableComputations.Differing<TResult>(
				scalar: scalar,
				equalityComparer: equalityComparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Differing<TResult> Differing<TResult>(this
			 ObservableComputations.IReadScalar<TResult> scalar)
			
		{
			return new ObservableComputations.Differing<TResult>(
				scalar: scalar,
				equalityComparer: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Differing<TResult> Differing<TResult>(this
			 Expression<Func<TResult>> scalar,
			 System.Collections.Generic.IEqualityComparer<TResult> equalityComparer)
			
		{
			return new ObservableComputations.Differing<TResult>(
				scalar: new Computing<TResult>(scalar),
				equalityComparer: equalityComparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Differing<TResult> Differing<TResult>(this
			 Expression<Func<TResult>> scalar)
			
		{
			return new ObservableComputations.Differing<TResult>(
				scalar: new Computing<TResult>(scalar),
				equalityComparer: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Differing<TResult> Differing<TResult>(this
			 ObservableComputations.IReadScalar<TResult> scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TResult>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Differing<TResult>(
				scalar: scalar,
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Differing<TResult> Differing<TResult>(this
			 ObservableComputations.IReadScalar<TResult> scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TResult>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Differing<TResult>(
				scalar: scalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TResult>>(equalityComparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Differing<TResult> Differing<TResult>(this
			 Expression<Func<TResult>> scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TResult>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Differing<TResult>(
				scalar: new Computing<TResult>(scalar),
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Differing<TResult> Differing<TResult>(this
			 Expression<Func<TResult>> scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TResult>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Differing<TResult>(
				scalar: new Computing<TResult>(scalar),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TResult>>(equalityComparerExpression));
		}

		#endregion
		#region Distincting

		[ObservableComputationsCall]
		public static ObservableComputations.Distincting<TSourceItem> Distincting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Distincting<TSourceItem>(
				sourceScalar: sourceScalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Distincting<TSourceItem> Distincting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Distincting<TSourceItem>(
				sourceScalar: sourceScalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Distincting<TSourceItem> Distincting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Distincting<TSourceItem>(
				sourceScalar: sourceScalar,
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Distincting<TSourceItem> Distincting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar)
			
		{
			return new ObservableComputations.Distincting<TSourceItem>(
				sourceScalar: sourceScalar,
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Distincting<TSourceItem> Distincting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Distincting<TSourceItem>(
				sourceScalar: sourceScalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Distincting<TSourceItem> Distincting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Distincting<TSourceItem>(
				sourceScalar: sourceScalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Distincting<TSourceItem> Distincting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Distincting<TSourceItem>(
				sourceScalar: sourceScalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Distincting<TSourceItem> Distincting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Distincting<TSourceItem>(
				sourceScalar: sourceScalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Distincting<TSourceItem> Distincting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Distincting<TSourceItem>(
				sourceScalar: sourceScalar,
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Distincting<TSourceItem> Distincting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar)
			
		{
			return new ObservableComputations.Distincting<TSourceItem>(
				sourceScalar: sourceScalar,
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Distincting<TSourceItem> Distincting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Distincting<TSourceItem>(
				sourceScalar: sourceScalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Distincting<TSourceItem> Distincting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Distincting<TSourceItem>(
				sourceScalar: sourceScalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Distincting<TSourceItem> Distincting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Distincting<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Distincting<TSourceItem> Distincting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Distincting<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Distincting<TSourceItem> Distincting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Distincting<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Distincting<TSourceItem> Distincting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression)
			
		{
			return new ObservableComputations.Distincting<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Distincting<TSourceItem> Distincting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Distincting<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Distincting<TSourceItem> Distincting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Distincting<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Distincting<TSourceItem> Distincting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Distincting<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Distincting<TSourceItem> Distincting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Distincting<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Distincting<TSourceItem> Distincting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Distincting<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Distincting<TSourceItem> Distincting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression)
			
		{
			return new ObservableComputations.Distincting<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Distincting<TSourceItem> Distincting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Distincting<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Distincting<TSourceItem> Distincting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Distincting<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Distincting<TSourceItem> Distincting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Distincting<TSourceItem>(
				source: source,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Distincting<TSourceItem> Distincting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Distincting<TSourceItem>(
				source: source,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Distincting<TSourceItem> Distincting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 int capacity)
			
		{
			return new ObservableComputations.Distincting<TSourceItem>(
				source: source,
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Distincting<TSourceItem> Distincting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source)
			
		{
			return new ObservableComputations.Distincting<TSourceItem>(
				source: source,
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Distincting<TSourceItem> Distincting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Distincting<TSourceItem>(
				source: source,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Distincting<TSourceItem> Distincting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Distincting<TSourceItem>(
				source: source,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Distincting<TSourceItem> Distincting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Distincting<TSourceItem>(
				source: source,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Distincting<TSourceItem> Distincting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Distincting<TSourceItem>(
				source: source,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Distincting<TSourceItem> Distincting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 int capacity)
			
		{
			return new ObservableComputations.Distincting<TSourceItem>(
				source: source,
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Distincting<TSourceItem> Distincting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source)
			
		{
			return new ObservableComputations.Distincting<TSourceItem>(
				source: source,
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Distincting<TSourceItem> Distincting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Distincting<TSourceItem>(
				source: source,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Distincting<TSourceItem> Distincting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Distincting<TSourceItem>(
				source: source,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Distincting<TSourceItem> Distincting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Distincting<TSourceItem>(
				source: source,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Distincting<TSourceItem> Distincting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Distincting<TSourceItem>(
				source: source,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Distincting<TSourceItem> Distincting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Distincting<TSourceItem>(
				source: source,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Distincting<TSourceItem> Distincting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Distincting<TSourceItem>(
				source: source,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Distincting<TSourceItem> Distincting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Distincting<TSourceItem>(
				sourceScalar: sourceScalar,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Distincting<TSourceItem> Distincting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Distincting<TSourceItem>(
				sourceScalar: sourceScalar,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Distincting<TSourceItem> Distincting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Distincting<TSourceItem>(
				sourceScalar: sourceScalar,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Distincting<TSourceItem> Distincting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Distincting<TSourceItem>(
				sourceScalar: sourceScalar,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Distincting<TSourceItem> Distincting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Distincting<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Distincting<TSourceItem> Distincting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Distincting<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Distincting<TSourceItem> Distincting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Distincting<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Distincting<TSourceItem> Distincting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Distincting<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		#endregion
		#region Excepting

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 System.Collections.Specialized.INotifyCollectionChanged source2)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableCollection<TSourceItem> source2,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableCollection<TSourceItem> source2,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableCollection<TSourceItem> source2,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableCollection<TSourceItem> source2)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableCollection<TSourceItem> source2,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableCollection<TSourceItem> source2,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 System.Collections.Specialized.INotifyCollectionChanged source2)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableCollection<TSourceItem> source2,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableCollection<TSourceItem> source2,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableCollection<TSourceItem> source2,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableCollection<TSourceItem> source2)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableCollection<TSourceItem> source2,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableCollection<TSourceItem> source2,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2: source2,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2: source2,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2: source2,
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 System.Collections.Specialized.INotifyCollectionChanged source2)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2: source2,
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2: source2,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2: source2,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableCollection<TSourceItem> source2,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2: source2,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableCollection<TSourceItem> source2,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2: source2,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableCollection<TSourceItem> source2,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2: source2,
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableCollection<TSourceItem> source2)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2: source2,
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableCollection<TSourceItem> source2,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2: source2,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableCollection<TSourceItem> source2,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2: source2,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2: source2,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2: source2,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2: source2,
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 System.Collections.Specialized.INotifyCollectionChanged source2)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2: source2,
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2: source2,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2: source2,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableCollection<TSourceItem> source2,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2: source2,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableCollection<TSourceItem> source2,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2: source2,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableCollection<TSourceItem> source2,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2: source2,
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableCollection<TSourceItem> source2)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2: source2,
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableCollection<TSourceItem> source2,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2: source2,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableCollection<TSourceItem> source2,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2: source2,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableCollection<TSourceItem> source2,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableCollection<TSourceItem> source2,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableCollection<TSourceItem> source2,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableCollection<TSourceItem> source2,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2: source2,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2: source2,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableCollection<TSourceItem> source2,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2: source2,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableCollection<TSourceItem> source2,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2: source2,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2: source2,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2: source2,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableCollection<TSourceItem> source2,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2: source2,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableCollection<TSourceItem> source2,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2: source2,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 System.Collections.Specialized.INotifyCollectionChanged source2)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableCollection<TSourceItem> source2,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableCollection<TSourceItem> source2,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableCollection<TSourceItem> source2,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableCollection<TSourceItem> source2)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableCollection<TSourceItem> source2,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableCollection<TSourceItem> source2,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 System.Collections.Specialized.INotifyCollectionChanged source2)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableCollection<TSourceItem> source2,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableCollection<TSourceItem> source2,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableCollection<TSourceItem> source2,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableCollection<TSourceItem> source2)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableCollection<TSourceItem> source2,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableCollection<TSourceItem> source2,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableCollection<TSourceItem> source2,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableCollection<TSourceItem> source2,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableCollection<TSourceItem> source2,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableCollection<TSourceItem> source2,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Excepting<TSourceItem> Excepting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Excepting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		#endregion
		#region Extending

		[ObservableComputationsCall]
		public static ObservableComputations.Extending<TSourceItem> Extending<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar)
			
		{
			return new ObservableComputations.Extending<TSourceItem>(
				sourceScalar: sourceScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Extending<TSourceItem> Extending<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar)
			
		{
			return new ObservableComputations.Extending<TSourceItem>(
				sourceScalar: sourceScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Extending<TSourceItem> Extending<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression)
			
		{
			return new ObservableComputations.Extending<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Extending<TSourceItem> Extending<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression)
			
		{
			return new ObservableComputations.Extending<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Extending<TSourceItem> Extending<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source)
			
		{
			return new ObservableComputations.Extending<TSourceItem>(
				source: source);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Extending<TSourceItem> Extending<TSourceItem>(this
			 ObservableCollection<TSourceItem> source)
			
		{
			return new ObservableComputations.Extending<TSourceItem>(
				source: source);
		}

		#endregion
		#region Filtering

		[ObservableComputationsCall]
		public static ObservableComputations.Filtering<TSourceItem> Filtering<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, bool>> predicateExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Filtering<TSourceItem>(
				sourceScalar: sourceScalar,
				predicateExpression: predicateExpression,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Filtering<TSourceItem> Filtering<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, bool>> predicateExpression)
			
		{
			return new ObservableComputations.Filtering<TSourceItem>(
				sourceScalar: sourceScalar,
				predicateExpression: predicateExpression,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Filtering<TSourceItem> Filtering<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, bool>> predicateExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Filtering<TSourceItem>(
				sourceScalar: sourceScalar,
				predicateExpression: predicateExpression,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Filtering<TSourceItem> Filtering<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, bool>> predicateExpression)
			
		{
			return new ObservableComputations.Filtering<TSourceItem>(
				sourceScalar: sourceScalar,
				predicateExpression: predicateExpression,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Filtering<TSourceItem> Filtering<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, bool>> predicateExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Filtering<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				predicateExpression: predicateExpression,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Filtering<TSourceItem> Filtering<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, bool>> predicateExpression)
			
		{
			return new ObservableComputations.Filtering<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				predicateExpression: predicateExpression,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Filtering<TSourceItem> Filtering<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, bool>> predicateExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Filtering<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				predicateExpression: predicateExpression,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Filtering<TSourceItem> Filtering<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, bool>> predicateExpression)
			
		{
			return new ObservableComputations.Filtering<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				predicateExpression: predicateExpression,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Filtering<TSourceItem> Filtering<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, bool>> predicateExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Filtering<TSourceItem>(
				source: source,
				predicateExpression: predicateExpression,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Filtering<TSourceItem> Filtering<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, bool>> predicateExpression)
			
		{
			return new ObservableComputations.Filtering<TSourceItem>(
				source: source,
				predicateExpression: predicateExpression,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Filtering<TSourceItem> Filtering<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, bool>> predicateExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Filtering<TSourceItem>(
				source: source,
				predicateExpression: predicateExpression,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Filtering<TSourceItem> Filtering<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, bool>> predicateExpression)
			
		{
			return new ObservableComputations.Filtering<TSourceItem>(
				source: source,
				predicateExpression: predicateExpression,
				capacity: 0);
		}

		#endregion
		#region FirstComputing

		[ObservableComputationsCall]
		public static ObservableComputations.FirstComputing<TSourceItem> FirstComputing<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.FirstComputing<TSourceItem>(
				sourceScalar: sourceScalar,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.FirstComputing<TSourceItem> FirstComputing<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar)
			
		{
			return new ObservableComputations.FirstComputing<TSourceItem>(
				sourceScalar: sourceScalar,
				defaultValue: default(TSourceItem));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.FirstComputing<TSourceItem> FirstComputing<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.FirstComputing<TSourceItem>(
				sourceScalar: sourceScalar,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.FirstComputing<TSourceItem> FirstComputing<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar)
			
		{
			return new ObservableComputations.FirstComputing<TSourceItem>(
				sourceScalar: sourceScalar,
				defaultValue: default(TSourceItem));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.FirstComputing<TSourceItem> FirstComputing<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.FirstComputing<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.FirstComputing<TSourceItem> FirstComputing<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression)
			
		{
			return new ObservableComputations.FirstComputing<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				defaultValue: default(TSourceItem));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.FirstComputing<TSourceItem> FirstComputing<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.FirstComputing<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.FirstComputing<TSourceItem> FirstComputing<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression)
			
		{
			return new ObservableComputations.FirstComputing<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				defaultValue: default(TSourceItem));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.FirstComputing<TSourceItem> FirstComputing<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.FirstComputing<TSourceItem>(
				source: source,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.FirstComputing<TSourceItem> FirstComputing<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source)
			
		{
			return new ObservableComputations.FirstComputing<TSourceItem>(
				source: source,
				defaultValue: default(TSourceItem));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.FirstComputing<TSourceItem> FirstComputing<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.FirstComputing<TSourceItem>(
				source: source,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.FirstComputing<TSourceItem> FirstComputing<TSourceItem>(this
			 ObservableCollection<TSourceItem> source)
			
		{
			return new ObservableComputations.FirstComputing<TSourceItem>(
				source: source,
				defaultValue: default(TSourceItem));
		}

		#endregion
		#region Grouping

		[ObservableComputationsCall]
		public static ObservableComputations.Grouping<TSourceItem, TKey> Grouping<TSourceItem, TKey>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TKey>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Grouping<TSourceItem, TKey>(
				sourceScalar: sourceScalar,
				keySelectorExpression: keySelectorExpression,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Grouping<TSourceItem, TKey> Grouping<TSourceItem, TKey>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TKey>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Grouping<TSourceItem, TKey>(
				sourceScalar: sourceScalar,
				keySelectorExpression: keySelectorExpression,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Grouping<TSourceItem, TKey> Grouping<TSourceItem, TKey>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Grouping<TSourceItem, TKey>(
				sourceScalar: sourceScalar,
				keySelectorExpression: keySelectorExpression,
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Grouping<TSourceItem, TKey> Grouping<TSourceItem, TKey>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression)
			
		{
			return new ObservableComputations.Grouping<TSourceItem, TKey>(
				sourceScalar: sourceScalar,
				keySelectorExpression: keySelectorExpression,
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Grouping<TSourceItem, TKey> Grouping<TSourceItem, TKey>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TKey>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Grouping<TSourceItem, TKey>(
				sourceScalar: sourceScalar,
				keySelectorExpression: keySelectorExpression,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TKey>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Grouping<TSourceItem, TKey> Grouping<TSourceItem, TKey>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TKey>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Grouping<TSourceItem, TKey>(
				sourceScalar: sourceScalar,
				keySelectorExpression: keySelectorExpression,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TKey>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Grouping<TSourceItem, TKey> Grouping<TSourceItem, TKey>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TKey>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Grouping<TSourceItem, TKey>(
				sourceScalar: sourceScalar,
				keySelectorExpression: keySelectorExpression,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Grouping<TSourceItem, TKey> Grouping<TSourceItem, TKey>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TKey>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Grouping<TSourceItem, TKey>(
				sourceScalar: sourceScalar,
				keySelectorExpression: keySelectorExpression,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Grouping<TSourceItem, TKey> Grouping<TSourceItem, TKey>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Grouping<TSourceItem, TKey>(
				sourceScalar: sourceScalar,
				keySelectorExpression: keySelectorExpression,
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Grouping<TSourceItem, TKey> Grouping<TSourceItem, TKey>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression)
			
		{
			return new ObservableComputations.Grouping<TSourceItem, TKey>(
				sourceScalar: sourceScalar,
				keySelectorExpression: keySelectorExpression,
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Grouping<TSourceItem, TKey> Grouping<TSourceItem, TKey>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TKey>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Grouping<TSourceItem, TKey>(
				sourceScalar: sourceScalar,
				keySelectorExpression: keySelectorExpression,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TKey>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Grouping<TSourceItem, TKey> Grouping<TSourceItem, TKey>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TKey>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Grouping<TSourceItem, TKey>(
				sourceScalar: sourceScalar,
				keySelectorExpression: keySelectorExpression,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TKey>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Grouping<TSourceItem, TKey> Grouping<TSourceItem, TKey>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TKey>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Grouping<TSourceItem, TKey>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				keySelectorExpression: keySelectorExpression,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Grouping<TSourceItem, TKey> Grouping<TSourceItem, TKey>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TKey>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Grouping<TSourceItem, TKey>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				keySelectorExpression: keySelectorExpression,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Grouping<TSourceItem, TKey> Grouping<TSourceItem, TKey>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Grouping<TSourceItem, TKey>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				keySelectorExpression: keySelectorExpression,
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Grouping<TSourceItem, TKey> Grouping<TSourceItem, TKey>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression)
			
		{
			return new ObservableComputations.Grouping<TSourceItem, TKey>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				keySelectorExpression: keySelectorExpression,
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Grouping<TSourceItem, TKey> Grouping<TSourceItem, TKey>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TKey>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Grouping<TSourceItem, TKey>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				keySelectorExpression: keySelectorExpression,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TKey>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Grouping<TSourceItem, TKey> Grouping<TSourceItem, TKey>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TKey>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Grouping<TSourceItem, TKey>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				keySelectorExpression: keySelectorExpression,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TKey>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Grouping<TSourceItem, TKey> Grouping<TSourceItem, TKey>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TKey>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Grouping<TSourceItem, TKey>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				keySelectorExpression: keySelectorExpression,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Grouping<TSourceItem, TKey> Grouping<TSourceItem, TKey>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TKey>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Grouping<TSourceItem, TKey>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				keySelectorExpression: keySelectorExpression,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Grouping<TSourceItem, TKey> Grouping<TSourceItem, TKey>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Grouping<TSourceItem, TKey>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				keySelectorExpression: keySelectorExpression,
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Grouping<TSourceItem, TKey> Grouping<TSourceItem, TKey>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression)
			
		{
			return new ObservableComputations.Grouping<TSourceItem, TKey>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				keySelectorExpression: keySelectorExpression,
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Grouping<TSourceItem, TKey> Grouping<TSourceItem, TKey>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TKey>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Grouping<TSourceItem, TKey>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				keySelectorExpression: keySelectorExpression,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TKey>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Grouping<TSourceItem, TKey> Grouping<TSourceItem, TKey>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TKey>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Grouping<TSourceItem, TKey>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				keySelectorExpression: keySelectorExpression,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TKey>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Grouping<TSourceItem, TKey> Grouping<TSourceItem, TKey>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TKey>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Grouping<TSourceItem, TKey>(
				source: source,
				keySelectorExpression: keySelectorExpression,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Grouping<TSourceItem, TKey> Grouping<TSourceItem, TKey>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TKey>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Grouping<TSourceItem, TKey>(
				source: source,
				keySelectorExpression: keySelectorExpression,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Grouping<TSourceItem, TKey> Grouping<TSourceItem, TKey>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Grouping<TSourceItem, TKey>(
				source: source,
				keySelectorExpression: keySelectorExpression,
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Grouping<TSourceItem, TKey> Grouping<TSourceItem, TKey>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression)
			
		{
			return new ObservableComputations.Grouping<TSourceItem, TKey>(
				source: source,
				keySelectorExpression: keySelectorExpression,
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Grouping<TSourceItem, TKey> Grouping<TSourceItem, TKey>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TKey>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Grouping<TSourceItem, TKey>(
				source: source,
				keySelectorExpression: keySelectorExpression,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TKey>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Grouping<TSourceItem, TKey> Grouping<TSourceItem, TKey>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TKey>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Grouping<TSourceItem, TKey>(
				source: source,
				keySelectorExpression: keySelectorExpression,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TKey>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Grouping<TSourceItem, TKey> Grouping<TSourceItem, TKey>(this
			 ObservableCollection<TSourceItem> source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TKey>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Grouping<TSourceItem, TKey>(
				source: source,
				keySelectorExpression: keySelectorExpression,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Grouping<TSourceItem, TKey> Grouping<TSourceItem, TKey>(this
			 ObservableCollection<TSourceItem> source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TKey>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Grouping<TSourceItem, TKey>(
				source: source,
				keySelectorExpression: keySelectorExpression,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Grouping<TSourceItem, TKey> Grouping<TSourceItem, TKey>(this
			 ObservableCollection<TSourceItem> source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Grouping<TSourceItem, TKey>(
				source: source,
				keySelectorExpression: keySelectorExpression,
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Grouping<TSourceItem, TKey> Grouping<TSourceItem, TKey>(this
			 ObservableCollection<TSourceItem> source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression)
			
		{
			return new ObservableComputations.Grouping<TSourceItem, TKey>(
				source: source,
				keySelectorExpression: keySelectorExpression,
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Grouping<TSourceItem, TKey> Grouping<TSourceItem, TKey>(this
			 ObservableCollection<TSourceItem> source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TKey>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Grouping<TSourceItem, TKey>(
				source: source,
				keySelectorExpression: keySelectorExpression,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TKey>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Grouping<TSourceItem, TKey> Grouping<TSourceItem, TKey>(this
			 ObservableCollection<TSourceItem> source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TKey>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Grouping<TSourceItem, TKey>(
				source: source,
				keySelectorExpression: keySelectorExpression,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TKey>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Grouping<TSourceItem, TKey> Grouping<TSourceItem, TKey>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 System.Collections.Generic.IEqualityComparer<TKey> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Grouping<TSourceItem, TKey>(
				sourceScalar: sourceScalar,
				keySelectorExpression: keySelectorExpression,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Grouping<TSourceItem, TKey> Grouping<TSourceItem, TKey>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 System.Collections.Generic.IEqualityComparer<TKey> equalityComparer)
			
		{
			return new ObservableComputations.Grouping<TSourceItem, TKey>(
				sourceScalar: sourceScalar,
				keySelectorExpression: keySelectorExpression,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Grouping<TSourceItem, TKey> Grouping<TSourceItem, TKey>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 System.Collections.Generic.IEqualityComparer<TKey> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Grouping<TSourceItem, TKey>(
				sourceScalar: sourceScalar,
				keySelectorExpression: keySelectorExpression,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Grouping<TSourceItem, TKey> Grouping<TSourceItem, TKey>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 System.Collections.Generic.IEqualityComparer<TKey> equalityComparer)
			
		{
			return new ObservableComputations.Grouping<TSourceItem, TKey>(
				sourceScalar: sourceScalar,
				keySelectorExpression: keySelectorExpression,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Grouping<TSourceItem, TKey> Grouping<TSourceItem, TKey>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 System.Collections.Generic.IEqualityComparer<TKey> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Grouping<TSourceItem, TKey>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				keySelectorExpression: keySelectorExpression,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Grouping<TSourceItem, TKey> Grouping<TSourceItem, TKey>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 System.Collections.Generic.IEqualityComparer<TKey> equalityComparer)
			
		{
			return new ObservableComputations.Grouping<TSourceItem, TKey>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				keySelectorExpression: keySelectorExpression,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Grouping<TSourceItem, TKey> Grouping<TSourceItem, TKey>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 System.Collections.Generic.IEqualityComparer<TKey> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Grouping<TSourceItem, TKey>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				keySelectorExpression: keySelectorExpression,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Grouping<TSourceItem, TKey> Grouping<TSourceItem, TKey>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 System.Collections.Generic.IEqualityComparer<TKey> equalityComparer)
			
		{
			return new ObservableComputations.Grouping<TSourceItem, TKey>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				keySelectorExpression: keySelectorExpression,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Grouping<TSourceItem, TKey> Grouping<TSourceItem, TKey>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 System.Collections.Generic.IEqualityComparer<TKey> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Grouping<TSourceItem, TKey>(
				source: source,
				keySelectorExpression: keySelectorExpression,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Grouping<TSourceItem, TKey> Grouping<TSourceItem, TKey>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 System.Collections.Generic.IEqualityComparer<TKey> equalityComparer)
			
		{
			return new ObservableComputations.Grouping<TSourceItem, TKey>(
				source: source,
				keySelectorExpression: keySelectorExpression,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Grouping<TSourceItem, TKey> Grouping<TSourceItem, TKey>(this
			 ObservableCollection<TSourceItem> source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 System.Collections.Generic.IEqualityComparer<TKey> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Grouping<TSourceItem, TKey>(
				source: source,
				keySelectorExpression: keySelectorExpression,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Grouping<TSourceItem, TKey> Grouping<TSourceItem, TKey>(this
			 ObservableCollection<TSourceItem> source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 System.Collections.Generic.IEqualityComparer<TKey> equalityComparer)
			
		{
			return new ObservableComputations.Grouping<TSourceItem, TKey>(
				source: source,
				keySelectorExpression: keySelectorExpression,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		#endregion
		#region GroupJoining

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TKey>> equalityComparerScalar)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: outerSourceScalar,
				innerSourceScalar: innerSourceScalar,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: outerSourceScalar,
				innerSourceScalar: innerSourceScalar,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TKey>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: outerSourceScalar,
				innerSourceScalar: innerSourceScalar,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TKey>>(equalityComparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar,
			 ObservableComputations.IReadScalar<ObservableCollection<TInnerSourceItem>> innerSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TKey>> equalityComparerScalar)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: outerSourceScalar,
				innerSourceScalar: innerSourceScalar,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar,
			 ObservableComputations.IReadScalar<ObservableCollection<TInnerSourceItem>> innerSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: outerSourceScalar,
				innerSourceScalar: innerSourceScalar,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar,
			 ObservableComputations.IReadScalar<ObservableCollection<TInnerSourceItem>> innerSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TKey>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: outerSourceScalar,
				innerSourceScalar: innerSourceScalar,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TKey>>(equalityComparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> innerSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TKey>> equalityComparerScalar)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: outerSourceScalar,
				innerSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(innerSourceExpression),
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> innerSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: outerSourceScalar,
				innerSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(innerSourceExpression),
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> innerSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TKey>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: outerSourceScalar,
				innerSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(innerSourceExpression),
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TKey>>(equalityComparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar,
			 Expression<Func<ObservableCollection<TInnerSourceItem>>> innerSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TKey>> equalityComparerScalar)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: outerSourceScalar,
				innerSourceScalar: new Computing<ObservableCollection<TInnerSourceItem>>(innerSourceExpression),
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar,
			 Expression<Func<ObservableCollection<TInnerSourceItem>>> innerSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: outerSourceScalar,
				innerSourceScalar: new Computing<ObservableCollection<TInnerSourceItem>>(innerSourceExpression),
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar,
			 Expression<Func<ObservableCollection<TInnerSourceItem>>> innerSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TKey>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: outerSourceScalar,
				innerSourceScalar: new Computing<ObservableCollection<TInnerSourceItem>>(innerSourceExpression),
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TKey>>(equalityComparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TOuterSourceItem>> outerSourceScalar,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TKey>> equalityComparerScalar)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: outerSourceScalar,
				innerSourceScalar: innerSourceScalar,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TOuterSourceItem>> outerSourceScalar,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: outerSourceScalar,
				innerSourceScalar: innerSourceScalar,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TOuterSourceItem>> outerSourceScalar,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TKey>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: outerSourceScalar,
				innerSourceScalar: innerSourceScalar,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TKey>>(equalityComparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TOuterSourceItem>> outerSourceScalar,
			 ObservableComputations.IReadScalar<ObservableCollection<TInnerSourceItem>> innerSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TKey>> equalityComparerScalar)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: outerSourceScalar,
				innerSourceScalar: innerSourceScalar,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TOuterSourceItem>> outerSourceScalar,
			 ObservableComputations.IReadScalar<ObservableCollection<TInnerSourceItem>> innerSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: outerSourceScalar,
				innerSourceScalar: innerSourceScalar,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TOuterSourceItem>> outerSourceScalar,
			 ObservableComputations.IReadScalar<ObservableCollection<TInnerSourceItem>> innerSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TKey>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: outerSourceScalar,
				innerSourceScalar: innerSourceScalar,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TKey>>(equalityComparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TOuterSourceItem>> outerSourceScalar,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> innerSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TKey>> equalityComparerScalar)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: outerSourceScalar,
				innerSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(innerSourceExpression),
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TOuterSourceItem>> outerSourceScalar,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> innerSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: outerSourceScalar,
				innerSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(innerSourceExpression),
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TOuterSourceItem>> outerSourceScalar,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> innerSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TKey>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: outerSourceScalar,
				innerSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(innerSourceExpression),
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TKey>>(equalityComparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TOuterSourceItem>> outerSourceScalar,
			 Expression<Func<ObservableCollection<TInnerSourceItem>>> innerSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TKey>> equalityComparerScalar)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: outerSourceScalar,
				innerSourceScalar: new Computing<ObservableCollection<TInnerSourceItem>>(innerSourceExpression),
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TOuterSourceItem>> outerSourceScalar,
			 Expression<Func<ObservableCollection<TInnerSourceItem>>> innerSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: outerSourceScalar,
				innerSourceScalar: new Computing<ObservableCollection<TInnerSourceItem>>(innerSourceExpression),
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TOuterSourceItem>> outerSourceScalar,
			 Expression<Func<ObservableCollection<TInnerSourceItem>>> innerSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TKey>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: outerSourceScalar,
				innerSourceScalar: new Computing<ObservableCollection<TInnerSourceItem>>(innerSourceExpression),
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TKey>>(equalityComparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> outerSourceExpression,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TKey>> equalityComparerScalar)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(outerSourceExpression),
				innerSourceScalar: innerSourceScalar,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> outerSourceExpression,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(outerSourceExpression),
				innerSourceScalar: innerSourceScalar,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> outerSourceExpression,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TKey>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(outerSourceExpression),
				innerSourceScalar: innerSourceScalar,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TKey>>(equalityComparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> outerSourceExpression,
			 ObservableComputations.IReadScalar<ObservableCollection<TInnerSourceItem>> innerSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TKey>> equalityComparerScalar)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(outerSourceExpression),
				innerSourceScalar: innerSourceScalar,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> outerSourceExpression,
			 ObservableComputations.IReadScalar<ObservableCollection<TInnerSourceItem>> innerSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(outerSourceExpression),
				innerSourceScalar: innerSourceScalar,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> outerSourceExpression,
			 ObservableComputations.IReadScalar<ObservableCollection<TInnerSourceItem>> innerSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TKey>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(outerSourceExpression),
				innerSourceScalar: innerSourceScalar,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TKey>>(equalityComparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> outerSourceExpression,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> innerSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TKey>> equalityComparerScalar)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(outerSourceExpression),
				innerSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(innerSourceExpression),
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> outerSourceExpression,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> innerSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(outerSourceExpression),
				innerSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(innerSourceExpression),
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> outerSourceExpression,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> innerSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TKey>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(outerSourceExpression),
				innerSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(innerSourceExpression),
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TKey>>(equalityComparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> outerSourceExpression,
			 Expression<Func<ObservableCollection<TInnerSourceItem>>> innerSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TKey>> equalityComparerScalar)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(outerSourceExpression),
				innerSourceScalar: new Computing<ObservableCollection<TInnerSourceItem>>(innerSourceExpression),
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> outerSourceExpression,
			 Expression<Func<ObservableCollection<TInnerSourceItem>>> innerSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(outerSourceExpression),
				innerSourceScalar: new Computing<ObservableCollection<TInnerSourceItem>>(innerSourceExpression),
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> outerSourceExpression,
			 Expression<Func<ObservableCollection<TInnerSourceItem>>> innerSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TKey>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(outerSourceExpression),
				innerSourceScalar: new Computing<ObservableCollection<TInnerSourceItem>>(innerSourceExpression),
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TKey>>(equalityComparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 Expression<Func<ObservableCollection<TOuterSourceItem>>> outerSourceExpression,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TKey>> equalityComparerScalar)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: new Computing<ObservableCollection<TOuterSourceItem>>(outerSourceExpression),
				innerSourceScalar: innerSourceScalar,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 Expression<Func<ObservableCollection<TOuterSourceItem>>> outerSourceExpression,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: new Computing<ObservableCollection<TOuterSourceItem>>(outerSourceExpression),
				innerSourceScalar: innerSourceScalar,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 Expression<Func<ObservableCollection<TOuterSourceItem>>> outerSourceExpression,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TKey>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: new Computing<ObservableCollection<TOuterSourceItem>>(outerSourceExpression),
				innerSourceScalar: innerSourceScalar,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TKey>>(equalityComparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 Expression<Func<ObservableCollection<TOuterSourceItem>>> outerSourceExpression,
			 ObservableComputations.IReadScalar<ObservableCollection<TInnerSourceItem>> innerSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TKey>> equalityComparerScalar)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: new Computing<ObservableCollection<TOuterSourceItem>>(outerSourceExpression),
				innerSourceScalar: innerSourceScalar,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 Expression<Func<ObservableCollection<TOuterSourceItem>>> outerSourceExpression,
			 ObservableComputations.IReadScalar<ObservableCollection<TInnerSourceItem>> innerSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: new Computing<ObservableCollection<TOuterSourceItem>>(outerSourceExpression),
				innerSourceScalar: innerSourceScalar,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 Expression<Func<ObservableCollection<TOuterSourceItem>>> outerSourceExpression,
			 ObservableComputations.IReadScalar<ObservableCollection<TInnerSourceItem>> innerSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TKey>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: new Computing<ObservableCollection<TOuterSourceItem>>(outerSourceExpression),
				innerSourceScalar: innerSourceScalar,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TKey>>(equalityComparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 Expression<Func<ObservableCollection<TOuterSourceItem>>> outerSourceExpression,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> innerSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TKey>> equalityComparerScalar)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: new Computing<ObservableCollection<TOuterSourceItem>>(outerSourceExpression),
				innerSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(innerSourceExpression),
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 Expression<Func<ObservableCollection<TOuterSourceItem>>> outerSourceExpression,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> innerSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: new Computing<ObservableCollection<TOuterSourceItem>>(outerSourceExpression),
				innerSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(innerSourceExpression),
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 Expression<Func<ObservableCollection<TOuterSourceItem>>> outerSourceExpression,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> innerSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TKey>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: new Computing<ObservableCollection<TOuterSourceItem>>(outerSourceExpression),
				innerSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(innerSourceExpression),
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TKey>>(equalityComparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 Expression<Func<ObservableCollection<TOuterSourceItem>>> outerSourceExpression,
			 Expression<Func<ObservableCollection<TInnerSourceItem>>> innerSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TKey>> equalityComparerScalar)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: new Computing<ObservableCollection<TOuterSourceItem>>(outerSourceExpression),
				innerSourceScalar: new Computing<ObservableCollection<TInnerSourceItem>>(innerSourceExpression),
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 Expression<Func<ObservableCollection<TOuterSourceItem>>> outerSourceExpression,
			 Expression<Func<ObservableCollection<TInnerSourceItem>>> innerSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: new Computing<ObservableCollection<TOuterSourceItem>>(outerSourceExpression),
				innerSourceScalar: new Computing<ObservableCollection<TInnerSourceItem>>(innerSourceExpression),
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 Expression<Func<ObservableCollection<TOuterSourceItem>>> outerSourceExpression,
			 Expression<Func<ObservableCollection<TInnerSourceItem>>> innerSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TKey>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: new Computing<ObservableCollection<TOuterSourceItem>>(outerSourceExpression),
				innerSourceScalar: new Computing<ObservableCollection<TInnerSourceItem>>(innerSourceExpression),
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TKey>>(equalityComparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar,
			 System.Collections.Specialized.INotifyCollectionChanged innerSource,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TKey>> equalityComparerScalar)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: outerSourceScalar,
				innerSource: innerSource,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar,
			 System.Collections.Specialized.INotifyCollectionChanged innerSource,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: outerSourceScalar,
				innerSource: innerSource,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar,
			 System.Collections.Specialized.INotifyCollectionChanged innerSource,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TKey>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: outerSourceScalar,
				innerSource: innerSource,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TKey>>(equalityComparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar,
			 ObservableCollection<TInnerSourceItem> innerSource,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TKey>> equalityComparerScalar)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: outerSourceScalar,
				innerSource: innerSource,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar,
			 ObservableCollection<TInnerSourceItem> innerSource,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: outerSourceScalar,
				innerSource: innerSource,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar,
			 ObservableCollection<TInnerSourceItem> innerSource,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TKey>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: outerSourceScalar,
				innerSource: innerSource,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TKey>>(equalityComparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TOuterSourceItem>> outerSourceScalar,
			 System.Collections.Specialized.INotifyCollectionChanged innerSource,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TKey>> equalityComparerScalar)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: outerSourceScalar,
				innerSource: innerSource,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TOuterSourceItem>> outerSourceScalar,
			 System.Collections.Specialized.INotifyCollectionChanged innerSource,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: outerSourceScalar,
				innerSource: innerSource,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TOuterSourceItem>> outerSourceScalar,
			 System.Collections.Specialized.INotifyCollectionChanged innerSource,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TKey>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: outerSourceScalar,
				innerSource: innerSource,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TKey>>(equalityComparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TOuterSourceItem>> outerSourceScalar,
			 ObservableCollection<TInnerSourceItem> innerSource,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TKey>> equalityComparerScalar)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: outerSourceScalar,
				innerSource: innerSource,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TOuterSourceItem>> outerSourceScalar,
			 ObservableCollection<TInnerSourceItem> innerSource,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: outerSourceScalar,
				innerSource: innerSource,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TOuterSourceItem>> outerSourceScalar,
			 ObservableCollection<TInnerSourceItem> innerSource,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TKey>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: outerSourceScalar,
				innerSource: innerSource,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TKey>>(equalityComparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> outerSourceExpression,
			 System.Collections.Specialized.INotifyCollectionChanged innerSource,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TKey>> equalityComparerScalar)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(outerSourceExpression),
				innerSource: innerSource,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> outerSourceExpression,
			 System.Collections.Specialized.INotifyCollectionChanged innerSource,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(outerSourceExpression),
				innerSource: innerSource,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> outerSourceExpression,
			 System.Collections.Specialized.INotifyCollectionChanged innerSource,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TKey>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(outerSourceExpression),
				innerSource: innerSource,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TKey>>(equalityComparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> outerSourceExpression,
			 ObservableCollection<TInnerSourceItem> innerSource,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TKey>> equalityComparerScalar)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(outerSourceExpression),
				innerSource: innerSource,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> outerSourceExpression,
			 ObservableCollection<TInnerSourceItem> innerSource,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(outerSourceExpression),
				innerSource: innerSource,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> outerSourceExpression,
			 ObservableCollection<TInnerSourceItem> innerSource,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TKey>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(outerSourceExpression),
				innerSource: innerSource,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TKey>>(equalityComparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 Expression<Func<ObservableCollection<TOuterSourceItem>>> outerSourceExpression,
			 System.Collections.Specialized.INotifyCollectionChanged innerSource,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TKey>> equalityComparerScalar)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: new Computing<ObservableCollection<TOuterSourceItem>>(outerSourceExpression),
				innerSource: innerSource,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 Expression<Func<ObservableCollection<TOuterSourceItem>>> outerSourceExpression,
			 System.Collections.Specialized.INotifyCollectionChanged innerSource,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: new Computing<ObservableCollection<TOuterSourceItem>>(outerSourceExpression),
				innerSource: innerSource,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 Expression<Func<ObservableCollection<TOuterSourceItem>>> outerSourceExpression,
			 System.Collections.Specialized.INotifyCollectionChanged innerSource,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TKey>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: new Computing<ObservableCollection<TOuterSourceItem>>(outerSourceExpression),
				innerSource: innerSource,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TKey>>(equalityComparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 Expression<Func<ObservableCollection<TOuterSourceItem>>> outerSourceExpression,
			 ObservableCollection<TInnerSourceItem> innerSource,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TKey>> equalityComparerScalar)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: new Computing<ObservableCollection<TOuterSourceItem>>(outerSourceExpression),
				innerSource: innerSource,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 Expression<Func<ObservableCollection<TOuterSourceItem>>> outerSourceExpression,
			 ObservableCollection<TInnerSourceItem> innerSource,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: new Computing<ObservableCollection<TOuterSourceItem>>(outerSourceExpression),
				innerSource: innerSource,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 Expression<Func<ObservableCollection<TOuterSourceItem>>> outerSourceExpression,
			 ObservableCollection<TInnerSourceItem> innerSource,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TKey>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: new Computing<ObservableCollection<TOuterSourceItem>>(outerSourceExpression),
				innerSource: innerSource,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TKey>>(equalityComparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar,
			 System.Collections.Specialized.INotifyCollectionChanged innerSource,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 System.Collections.Generic.IEqualityComparer<TKey> equalityComparer)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: outerSourceScalar,
				innerSource: innerSource,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparer: equalityComparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar,
			 ObservableCollection<TInnerSourceItem> innerSource,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 System.Collections.Generic.IEqualityComparer<TKey> equalityComparer)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: outerSourceScalar,
				innerSource: innerSource,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparer: equalityComparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TOuterSourceItem>> outerSourceScalar,
			 System.Collections.Specialized.INotifyCollectionChanged innerSource,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 System.Collections.Generic.IEqualityComparer<TKey> equalityComparer)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: outerSourceScalar,
				innerSource: innerSource,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparer: equalityComparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TOuterSourceItem>> outerSourceScalar,
			 ObservableCollection<TInnerSourceItem> innerSource,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 System.Collections.Generic.IEqualityComparer<TKey> equalityComparer)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: outerSourceScalar,
				innerSource: innerSource,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparer: equalityComparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> outerSourceExpression,
			 System.Collections.Specialized.INotifyCollectionChanged innerSource,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 System.Collections.Generic.IEqualityComparer<TKey> equalityComparer)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(outerSourceExpression),
				innerSource: innerSource,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparer: equalityComparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> outerSourceExpression,
			 ObservableCollection<TInnerSourceItem> innerSource,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 System.Collections.Generic.IEqualityComparer<TKey> equalityComparer)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(outerSourceExpression),
				innerSource: innerSource,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparer: equalityComparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 Expression<Func<ObservableCollection<TOuterSourceItem>>> outerSourceExpression,
			 System.Collections.Specialized.INotifyCollectionChanged innerSource,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 System.Collections.Generic.IEqualityComparer<TKey> equalityComparer)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: new Computing<ObservableCollection<TOuterSourceItem>>(outerSourceExpression),
				innerSource: innerSource,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparer: equalityComparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 Expression<Func<ObservableCollection<TOuterSourceItem>>> outerSourceExpression,
			 ObservableCollection<TInnerSourceItem> innerSource,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 System.Collections.Generic.IEqualityComparer<TKey> equalityComparer)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: new Computing<ObservableCollection<TOuterSourceItem>>(outerSourceExpression),
				innerSource: innerSource,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparer: equalityComparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 System.Collections.Generic.IEqualityComparer<TKey> equalityComparer)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: outerSourceScalar,
				innerSourceScalar: innerSourceScalar,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparer: equalityComparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar,
			 ObservableComputations.IReadScalar<ObservableCollection<TInnerSourceItem>> innerSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 System.Collections.Generic.IEqualityComparer<TKey> equalityComparer)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: outerSourceScalar,
				innerSourceScalar: innerSourceScalar,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparer: equalityComparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> innerSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 System.Collections.Generic.IEqualityComparer<TKey> equalityComparer)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: outerSourceScalar,
				innerSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(innerSourceExpression),
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparer: equalityComparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar,
			 Expression<Func<ObservableCollection<TInnerSourceItem>>> innerSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 System.Collections.Generic.IEqualityComparer<TKey> equalityComparer)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: outerSourceScalar,
				innerSourceScalar: new Computing<ObservableCollection<TInnerSourceItem>>(innerSourceExpression),
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparer: equalityComparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TOuterSourceItem>> outerSourceScalar,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 System.Collections.Generic.IEqualityComparer<TKey> equalityComparer)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: outerSourceScalar,
				innerSourceScalar: innerSourceScalar,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparer: equalityComparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TOuterSourceItem>> outerSourceScalar,
			 ObservableComputations.IReadScalar<ObservableCollection<TInnerSourceItem>> innerSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 System.Collections.Generic.IEqualityComparer<TKey> equalityComparer)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: outerSourceScalar,
				innerSourceScalar: innerSourceScalar,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparer: equalityComparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TOuterSourceItem>> outerSourceScalar,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> innerSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 System.Collections.Generic.IEqualityComparer<TKey> equalityComparer)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: outerSourceScalar,
				innerSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(innerSourceExpression),
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparer: equalityComparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TOuterSourceItem>> outerSourceScalar,
			 Expression<Func<ObservableCollection<TInnerSourceItem>>> innerSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 System.Collections.Generic.IEqualityComparer<TKey> equalityComparer)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: outerSourceScalar,
				innerSourceScalar: new Computing<ObservableCollection<TInnerSourceItem>>(innerSourceExpression),
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparer: equalityComparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> outerSourceExpression,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 System.Collections.Generic.IEqualityComparer<TKey> equalityComparer)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(outerSourceExpression),
				innerSourceScalar: innerSourceScalar,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparer: equalityComparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> outerSourceExpression,
			 ObservableComputations.IReadScalar<ObservableCollection<TInnerSourceItem>> innerSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 System.Collections.Generic.IEqualityComparer<TKey> equalityComparer)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(outerSourceExpression),
				innerSourceScalar: innerSourceScalar,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparer: equalityComparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> outerSourceExpression,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> innerSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 System.Collections.Generic.IEqualityComparer<TKey> equalityComparer)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(outerSourceExpression),
				innerSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(innerSourceExpression),
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparer: equalityComparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> outerSourceExpression,
			 Expression<Func<ObservableCollection<TInnerSourceItem>>> innerSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 System.Collections.Generic.IEqualityComparer<TKey> equalityComparer)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(outerSourceExpression),
				innerSourceScalar: new Computing<ObservableCollection<TInnerSourceItem>>(innerSourceExpression),
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparer: equalityComparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 Expression<Func<ObservableCollection<TOuterSourceItem>>> outerSourceExpression,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 System.Collections.Generic.IEqualityComparer<TKey> equalityComparer)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: new Computing<ObservableCollection<TOuterSourceItem>>(outerSourceExpression),
				innerSourceScalar: innerSourceScalar,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparer: equalityComparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 Expression<Func<ObservableCollection<TOuterSourceItem>>> outerSourceExpression,
			 ObservableComputations.IReadScalar<ObservableCollection<TInnerSourceItem>> innerSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 System.Collections.Generic.IEqualityComparer<TKey> equalityComparer)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: new Computing<ObservableCollection<TOuterSourceItem>>(outerSourceExpression),
				innerSourceScalar: innerSourceScalar,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparer: equalityComparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 Expression<Func<ObservableCollection<TOuterSourceItem>>> outerSourceExpression,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> innerSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 System.Collections.Generic.IEqualityComparer<TKey> equalityComparer)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: new Computing<ObservableCollection<TOuterSourceItem>>(outerSourceExpression),
				innerSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(innerSourceExpression),
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparer: equalityComparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 Expression<Func<ObservableCollection<TOuterSourceItem>>> outerSourceExpression,
			 Expression<Func<ObservableCollection<TInnerSourceItem>>> innerSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 System.Collections.Generic.IEqualityComparer<TKey> equalityComparer)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSourceScalar: new Computing<ObservableCollection<TOuterSourceItem>>(outerSourceExpression),
				innerSourceScalar: new Computing<ObservableCollection<TInnerSourceItem>>(innerSourceExpression),
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparer: equalityComparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 System.Collections.Specialized.INotifyCollectionChanged outerSource,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TKey>> equalityComparerScalar)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSource: outerSource,
				innerSourceScalar: innerSourceScalar,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 System.Collections.Specialized.INotifyCollectionChanged outerSource,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSource: outerSource,
				innerSourceScalar: innerSourceScalar,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 System.Collections.Specialized.INotifyCollectionChanged outerSource,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TKey>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSource: outerSource,
				innerSourceScalar: innerSourceScalar,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TKey>>(equalityComparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 System.Collections.Specialized.INotifyCollectionChanged outerSource,
			 ObservableComputations.IReadScalar<ObservableCollection<TInnerSourceItem>> innerSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TKey>> equalityComparerScalar)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSource: outerSource,
				innerSourceScalar: innerSourceScalar,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 System.Collections.Specialized.INotifyCollectionChanged outerSource,
			 ObservableComputations.IReadScalar<ObservableCollection<TInnerSourceItem>> innerSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSource: outerSource,
				innerSourceScalar: innerSourceScalar,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 System.Collections.Specialized.INotifyCollectionChanged outerSource,
			 ObservableComputations.IReadScalar<ObservableCollection<TInnerSourceItem>> innerSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TKey>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSource: outerSource,
				innerSourceScalar: innerSourceScalar,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TKey>>(equalityComparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 System.Collections.Specialized.INotifyCollectionChanged outerSource,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> innerSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TKey>> equalityComparerScalar)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSource: outerSource,
				innerSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(innerSourceExpression),
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 System.Collections.Specialized.INotifyCollectionChanged outerSource,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> innerSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSource: outerSource,
				innerSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(innerSourceExpression),
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 System.Collections.Specialized.INotifyCollectionChanged outerSource,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> innerSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TKey>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSource: outerSource,
				innerSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(innerSourceExpression),
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TKey>>(equalityComparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 System.Collections.Specialized.INotifyCollectionChanged outerSource,
			 Expression<Func<ObservableCollection<TInnerSourceItem>>> innerSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TKey>> equalityComparerScalar)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSource: outerSource,
				innerSourceScalar: new Computing<ObservableCollection<TInnerSourceItem>>(innerSourceExpression),
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 System.Collections.Specialized.INotifyCollectionChanged outerSource,
			 Expression<Func<ObservableCollection<TInnerSourceItem>>> innerSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSource: outerSource,
				innerSourceScalar: new Computing<ObservableCollection<TInnerSourceItem>>(innerSourceExpression),
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 System.Collections.Specialized.INotifyCollectionChanged outerSource,
			 Expression<Func<ObservableCollection<TInnerSourceItem>>> innerSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TKey>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSource: outerSource,
				innerSourceScalar: new Computing<ObservableCollection<TInnerSourceItem>>(innerSourceExpression),
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TKey>>(equalityComparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 ObservableCollection<TOuterSourceItem> outerSource,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TKey>> equalityComparerScalar)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSource: outerSource,
				innerSourceScalar: innerSourceScalar,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 ObservableCollection<TOuterSourceItem> outerSource,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSource: outerSource,
				innerSourceScalar: innerSourceScalar,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 ObservableCollection<TOuterSourceItem> outerSource,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TKey>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSource: outerSource,
				innerSourceScalar: innerSourceScalar,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TKey>>(equalityComparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 ObservableCollection<TOuterSourceItem> outerSource,
			 ObservableComputations.IReadScalar<ObservableCollection<TInnerSourceItem>> innerSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TKey>> equalityComparerScalar)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSource: outerSource,
				innerSourceScalar: innerSourceScalar,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 ObservableCollection<TOuterSourceItem> outerSource,
			 ObservableComputations.IReadScalar<ObservableCollection<TInnerSourceItem>> innerSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSource: outerSource,
				innerSourceScalar: innerSourceScalar,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 ObservableCollection<TOuterSourceItem> outerSource,
			 ObservableComputations.IReadScalar<ObservableCollection<TInnerSourceItem>> innerSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TKey>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSource: outerSource,
				innerSourceScalar: innerSourceScalar,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TKey>>(equalityComparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 ObservableCollection<TOuterSourceItem> outerSource,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> innerSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TKey>> equalityComparerScalar)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSource: outerSource,
				innerSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(innerSourceExpression),
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 ObservableCollection<TOuterSourceItem> outerSource,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> innerSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSource: outerSource,
				innerSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(innerSourceExpression),
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 ObservableCollection<TOuterSourceItem> outerSource,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> innerSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TKey>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSource: outerSource,
				innerSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(innerSourceExpression),
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TKey>>(equalityComparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 ObservableCollection<TOuterSourceItem> outerSource,
			 Expression<Func<ObservableCollection<TInnerSourceItem>>> innerSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TKey>> equalityComparerScalar)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSource: outerSource,
				innerSourceScalar: new Computing<ObservableCollection<TInnerSourceItem>>(innerSourceExpression),
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 ObservableCollection<TOuterSourceItem> outerSource,
			 Expression<Func<ObservableCollection<TInnerSourceItem>>> innerSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSource: outerSource,
				innerSourceScalar: new Computing<ObservableCollection<TInnerSourceItem>>(innerSourceExpression),
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 ObservableCollection<TOuterSourceItem> outerSource,
			 Expression<Func<ObservableCollection<TInnerSourceItem>>> innerSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TKey>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSource: outerSource,
				innerSourceScalar: new Computing<ObservableCollection<TInnerSourceItem>>(innerSourceExpression),
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TKey>>(equalityComparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 System.Collections.Specialized.INotifyCollectionChanged outerSource,
			 System.Collections.Specialized.INotifyCollectionChanged innerSource,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TKey>> equalityComparerScalar)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSource: outerSource,
				innerSource: innerSource,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 System.Collections.Specialized.INotifyCollectionChanged outerSource,
			 System.Collections.Specialized.INotifyCollectionChanged innerSource,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSource: outerSource,
				innerSource: innerSource,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 System.Collections.Specialized.INotifyCollectionChanged outerSource,
			 System.Collections.Specialized.INotifyCollectionChanged innerSource,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TKey>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSource: outerSource,
				innerSource: innerSource,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TKey>>(equalityComparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 System.Collections.Specialized.INotifyCollectionChanged outerSource,
			 ObservableCollection<TInnerSourceItem> innerSource,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TKey>> equalityComparerScalar)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSource: outerSource,
				innerSource: innerSource,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 System.Collections.Specialized.INotifyCollectionChanged outerSource,
			 ObservableCollection<TInnerSourceItem> innerSource,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSource: outerSource,
				innerSource: innerSource,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 System.Collections.Specialized.INotifyCollectionChanged outerSource,
			 ObservableCollection<TInnerSourceItem> innerSource,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TKey>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSource: outerSource,
				innerSource: innerSource,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TKey>>(equalityComparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 ObservableCollection<TOuterSourceItem> outerSource,
			 System.Collections.Specialized.INotifyCollectionChanged innerSource,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TKey>> equalityComparerScalar)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSource: outerSource,
				innerSource: innerSource,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 ObservableCollection<TOuterSourceItem> outerSource,
			 System.Collections.Specialized.INotifyCollectionChanged innerSource,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSource: outerSource,
				innerSource: innerSource,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 ObservableCollection<TOuterSourceItem> outerSource,
			 System.Collections.Specialized.INotifyCollectionChanged innerSource,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TKey>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSource: outerSource,
				innerSource: innerSource,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TKey>>(equalityComparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 ObservableCollection<TOuterSourceItem> outerSource,
			 ObservableCollection<TInnerSourceItem> innerSource,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TKey>> equalityComparerScalar)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSource: outerSource,
				innerSource: innerSource,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 ObservableCollection<TOuterSourceItem> outerSource,
			 ObservableCollection<TInnerSourceItem> innerSource,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSource: outerSource,
				innerSource: innerSource,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 ObservableCollection<TOuterSourceItem> outerSource,
			 ObservableCollection<TInnerSourceItem> innerSource,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TKey>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSource: outerSource,
				innerSource: innerSource,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TKey>>(equalityComparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 System.Collections.Specialized.INotifyCollectionChanged outerSource,
			 System.Collections.Specialized.INotifyCollectionChanged innerSource,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 System.Collections.Generic.IEqualityComparer<TKey> equalityComparer)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSource: outerSource,
				innerSource: innerSource,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparer: equalityComparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 System.Collections.Specialized.INotifyCollectionChanged outerSource,
			 ObservableCollection<TInnerSourceItem> innerSource,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 System.Collections.Generic.IEqualityComparer<TKey> equalityComparer)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSource: outerSource,
				innerSource: innerSource,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparer: equalityComparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 ObservableCollection<TOuterSourceItem> outerSource,
			 System.Collections.Specialized.INotifyCollectionChanged innerSource,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 System.Collections.Generic.IEqualityComparer<TKey> equalityComparer)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSource: outerSource,
				innerSource: innerSource,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparer: equalityComparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 ObservableCollection<TOuterSourceItem> outerSource,
			 ObservableCollection<TInnerSourceItem> innerSource,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 System.Collections.Generic.IEqualityComparer<TKey> equalityComparer)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSource: outerSource,
				innerSource: innerSource,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparer: equalityComparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 System.Collections.Specialized.INotifyCollectionChanged outerSource,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 System.Collections.Generic.IEqualityComparer<TKey> equalityComparer)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSource: outerSource,
				innerSourceScalar: innerSourceScalar,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparer: equalityComparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 System.Collections.Specialized.INotifyCollectionChanged outerSource,
			 ObservableComputations.IReadScalar<ObservableCollection<TInnerSourceItem>> innerSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 System.Collections.Generic.IEqualityComparer<TKey> equalityComparer)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSource: outerSource,
				innerSourceScalar: innerSourceScalar,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparer: equalityComparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 System.Collections.Specialized.INotifyCollectionChanged outerSource,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> innerSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 System.Collections.Generic.IEqualityComparer<TKey> equalityComparer)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSource: outerSource,
				innerSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(innerSourceExpression),
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparer: equalityComparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 System.Collections.Specialized.INotifyCollectionChanged outerSource,
			 Expression<Func<ObservableCollection<TInnerSourceItem>>> innerSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 System.Collections.Generic.IEqualityComparer<TKey> equalityComparer)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSource: outerSource,
				innerSourceScalar: new Computing<ObservableCollection<TInnerSourceItem>>(innerSourceExpression),
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparer: equalityComparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 ObservableCollection<TOuterSourceItem> outerSource,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 System.Collections.Generic.IEqualityComparer<TKey> equalityComparer)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSource: outerSource,
				innerSourceScalar: innerSourceScalar,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparer: equalityComparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 ObservableCollection<TOuterSourceItem> outerSource,
			 ObservableComputations.IReadScalar<ObservableCollection<TInnerSourceItem>> innerSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 System.Collections.Generic.IEqualityComparer<TKey> equalityComparer)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSource: outerSource,
				innerSourceScalar: innerSourceScalar,
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparer: equalityComparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 ObservableCollection<TOuterSourceItem> outerSource,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> innerSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 System.Collections.Generic.IEqualityComparer<TKey> equalityComparer)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSource: outerSource,
				innerSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(innerSourceExpression),
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparer: equalityComparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey> GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(this
			 ObservableCollection<TOuterSourceItem> outerSource,
			 Expression<Func<ObservableCollection<TInnerSourceItem>>> innerSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>> outerKeySelector,
			 System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>> innerKeySelector,
			 System.Collections.Generic.IEqualityComparer<TKey> equalityComparer)
			
		{
			return new ObservableComputations.GroupJoining<TOuterSourceItem, TInnerSourceItem, TKey>(
				outerSource: outerSource,
				innerSourceScalar: new Computing<ObservableCollection<TInnerSourceItem>>(innerSourceExpression),
				outerKeySelector: outerKeySelector,
				innerKeySelector: innerKeySelector,
				equalityComparer: equalityComparer);
		}

		#endregion
		#region HashSetting

		[ObservableComputationsCall]
		public static ObservableComputations.HashSetting<TSourceItem, TKey> HashSetting<TSourceItem, TKey>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 System.Collections.Generic.IEqualityComparer<TKey> equalityComparer)
			
		{
			return new ObservableComputations.HashSetting<TSourceItem, TKey>(
				sourceScalar: sourceScalar,
				keySelectorExpression: keySelectorExpression,
				equalityComparer: equalityComparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.HashSetting<TSourceItem, TKey> HashSetting<TSourceItem, TKey>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression)
			
		{
			return new ObservableComputations.HashSetting<TSourceItem, TKey>(
				sourceScalar: sourceScalar,
				keySelectorExpression: keySelectorExpression,
				equalityComparer: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.HashSetting<TSourceItem, TKey> HashSetting<TSourceItem, TKey>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 System.Collections.Generic.IEqualityComparer<TKey> equalityComparer)
			
		{
			return new ObservableComputations.HashSetting<TSourceItem, TKey>(
				sourceScalar: sourceScalar,
				keySelectorExpression: keySelectorExpression,
				equalityComparer: equalityComparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.HashSetting<TSourceItem, TKey> HashSetting<TSourceItem, TKey>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression)
			
		{
			return new ObservableComputations.HashSetting<TSourceItem, TKey>(
				sourceScalar: sourceScalar,
				keySelectorExpression: keySelectorExpression,
				equalityComparer: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.HashSetting<TSourceItem, TKey> HashSetting<TSourceItem, TKey>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 System.Collections.Generic.IEqualityComparer<TKey> equalityComparer)
			
		{
			return new ObservableComputations.HashSetting<TSourceItem, TKey>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				keySelectorExpression: keySelectorExpression,
				equalityComparer: equalityComparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.HashSetting<TSourceItem, TKey> HashSetting<TSourceItem, TKey>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression)
			
		{
			return new ObservableComputations.HashSetting<TSourceItem, TKey>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				keySelectorExpression: keySelectorExpression,
				equalityComparer: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.HashSetting<TSourceItem, TKey> HashSetting<TSourceItem, TKey>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 System.Collections.Generic.IEqualityComparer<TKey> equalityComparer)
			
		{
			return new ObservableComputations.HashSetting<TSourceItem, TKey>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				keySelectorExpression: keySelectorExpression,
				equalityComparer: equalityComparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.HashSetting<TSourceItem, TKey> HashSetting<TSourceItem, TKey>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression)
			
		{
			return new ObservableComputations.HashSetting<TSourceItem, TKey>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				keySelectorExpression: keySelectorExpression,
				equalityComparer: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.HashSetting<TSourceItem, TKey> HashSetting<TSourceItem, TKey>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 System.Collections.Generic.IEqualityComparer<TKey> equalityComparer)
			
		{
			return new ObservableComputations.HashSetting<TSourceItem, TKey>(
				source: source,
				keySelectorExpression: keySelectorExpression,
				equalityComparer: equalityComparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.HashSetting<TSourceItem, TKey> HashSetting<TSourceItem, TKey>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression)
			
		{
			return new ObservableComputations.HashSetting<TSourceItem, TKey>(
				source: source,
				keySelectorExpression: keySelectorExpression,
				equalityComparer: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.HashSetting<TSourceItem, TKey> HashSetting<TSourceItem, TKey>(this
			 ObservableCollection<TSourceItem> source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 System.Collections.Generic.IEqualityComparer<TKey> equalityComparer)
			
		{
			return new ObservableComputations.HashSetting<TSourceItem, TKey>(
				source: source,
				keySelectorExpression: keySelectorExpression,
				equalityComparer: equalityComparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.HashSetting<TSourceItem, TKey> HashSetting<TSourceItem, TKey>(this
			 ObservableCollection<TSourceItem> source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression)
			
		{
			return new ObservableComputations.HashSetting<TSourceItem, TKey>(
				source: source,
				keySelectorExpression: keySelectorExpression,
				equalityComparer: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.HashSetting<TSourceItem, TKey> HashSetting<TSourceItem, TKey>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TKey>> equalityComparerScalar)
			
		{
			return new ObservableComputations.HashSetting<TSourceItem, TKey>(
				sourceScalar: sourceScalar,
				keySelectorExpression: keySelectorExpression,
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.HashSetting<TSourceItem, TKey> HashSetting<TSourceItem, TKey>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TKey>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.HashSetting<TSourceItem, TKey>(
				sourceScalar: sourceScalar,
				keySelectorExpression: keySelectorExpression,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TKey>>(equalityComparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.HashSetting<TSourceItem, TKey> HashSetting<TSourceItem, TKey>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TKey>> equalityComparerScalar)
			
		{
			return new ObservableComputations.HashSetting<TSourceItem, TKey>(
				sourceScalar: sourceScalar,
				keySelectorExpression: keySelectorExpression,
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.HashSetting<TSourceItem, TKey> HashSetting<TSourceItem, TKey>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TKey>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.HashSetting<TSourceItem, TKey>(
				sourceScalar: sourceScalar,
				keySelectorExpression: keySelectorExpression,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TKey>>(equalityComparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.HashSetting<TSourceItem, TKey> HashSetting<TSourceItem, TKey>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TKey>> equalityComparerScalar)
			
		{
			return new ObservableComputations.HashSetting<TSourceItem, TKey>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				keySelectorExpression: keySelectorExpression,
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.HashSetting<TSourceItem, TKey> HashSetting<TSourceItem, TKey>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TKey>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.HashSetting<TSourceItem, TKey>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				keySelectorExpression: keySelectorExpression,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TKey>>(equalityComparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.HashSetting<TSourceItem, TKey> HashSetting<TSourceItem, TKey>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TKey>> equalityComparerScalar)
			
		{
			return new ObservableComputations.HashSetting<TSourceItem, TKey>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				keySelectorExpression: keySelectorExpression,
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.HashSetting<TSourceItem, TKey> HashSetting<TSourceItem, TKey>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TKey>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.HashSetting<TSourceItem, TKey>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				keySelectorExpression: keySelectorExpression,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TKey>>(equalityComparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.HashSetting<TSourceItem, TKey> HashSetting<TSourceItem, TKey>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TKey>> equalityComparerScalar)
			
		{
			return new ObservableComputations.HashSetting<TSourceItem, TKey>(
				source: source,
				keySelectorExpression: keySelectorExpression,
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.HashSetting<TSourceItem, TKey> HashSetting<TSourceItem, TKey>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TKey>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.HashSetting<TSourceItem, TKey>(
				source: source,
				keySelectorExpression: keySelectorExpression,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TKey>>(equalityComparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.HashSetting<TSourceItem, TKey> HashSetting<TSourceItem, TKey>(this
			 ObservableCollection<TSourceItem> source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TKey>> equalityComparerScalar)
			
		{
			return new ObservableComputations.HashSetting<TSourceItem, TKey>(
				source: source,
				keySelectorExpression: keySelectorExpression,
				equalityComparerScalar: equalityComparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.HashSetting<TSourceItem, TKey> HashSetting<TSourceItem, TKey>(this
			 ObservableCollection<TSourceItem> source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>> keySelectorExpression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TKey>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.HashSetting<TSourceItem, TKey>(
				source: source,
				keySelectorExpression: keySelectorExpression,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TKey>>(equalityComparerExpression));
		}

		#endregion
		#region IndicesComputing

		[ObservableComputationsCall]
		public static ObservableComputations.IndicesComputing<TSourceItem> IndicesComputing<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, bool>> predicateExpression,
			 int capacity)
			
		{
			return new ObservableComputations.IndicesComputing<TSourceItem>(
				sourceScalar: sourceScalar,
				predicateExpression: predicateExpression,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.IndicesComputing<TSourceItem> IndicesComputing<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, bool>> predicateExpression)
			
		{
			return new ObservableComputations.IndicesComputing<TSourceItem>(
				sourceScalar: sourceScalar,
				predicateExpression: predicateExpression,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.IndicesComputing<TSourceItem> IndicesComputing<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, bool>> predicateExpression,
			 int capacity)
			
		{
			return new ObservableComputations.IndicesComputing<TSourceItem>(
				sourceScalar: sourceScalar,
				predicateExpression: predicateExpression,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.IndicesComputing<TSourceItem> IndicesComputing<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, bool>> predicateExpression)
			
		{
			return new ObservableComputations.IndicesComputing<TSourceItem>(
				sourceScalar: sourceScalar,
				predicateExpression: predicateExpression,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.IndicesComputing<TSourceItem> IndicesComputing<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, bool>> predicateExpression,
			 int capacity)
			
		{
			return new ObservableComputations.IndicesComputing<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				predicateExpression: predicateExpression,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.IndicesComputing<TSourceItem> IndicesComputing<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, bool>> predicateExpression)
			
		{
			return new ObservableComputations.IndicesComputing<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				predicateExpression: predicateExpression,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.IndicesComputing<TSourceItem> IndicesComputing<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, bool>> predicateExpression,
			 int capacity)
			
		{
			return new ObservableComputations.IndicesComputing<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				predicateExpression: predicateExpression,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.IndicesComputing<TSourceItem> IndicesComputing<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, bool>> predicateExpression)
			
		{
			return new ObservableComputations.IndicesComputing<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				predicateExpression: predicateExpression,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.IndicesComputing<TSourceItem> IndicesComputing<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, bool>> predicateExpression,
			 int capacity)
			
		{
			return new ObservableComputations.IndicesComputing<TSourceItem>(
				source: source,
				predicateExpression: predicateExpression,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.IndicesComputing<TSourceItem> IndicesComputing<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, bool>> predicateExpression)
			
		{
			return new ObservableComputations.IndicesComputing<TSourceItem>(
				source: source,
				predicateExpression: predicateExpression,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.IndicesComputing<TSourceItem> IndicesComputing<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, bool>> predicateExpression,
			 int capacity)
			
		{
			return new ObservableComputations.IndicesComputing<TSourceItem>(
				source: source,
				predicateExpression: predicateExpression,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.IndicesComputing<TSourceItem> IndicesComputing<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, bool>> predicateExpression)
			
		{
			return new ObservableComputations.IndicesComputing<TSourceItem>(
				source: source,
				predicateExpression: predicateExpression,
				capacity: 0);
		}

		#endregion
		#region Intersecting

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 System.Collections.Specialized.INotifyCollectionChanged source2)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableCollection<TSourceItem> source2,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableCollection<TSourceItem> source2,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableCollection<TSourceItem> source2,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableCollection<TSourceItem> source2)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableCollection<TSourceItem> source2,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableCollection<TSourceItem> source2,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 System.Collections.Specialized.INotifyCollectionChanged source2)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableCollection<TSourceItem> source2,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableCollection<TSourceItem> source2,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableCollection<TSourceItem> source2,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableCollection<TSourceItem> source2)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableCollection<TSourceItem> source2,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableCollection<TSourceItem> source2,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2: source2,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2: source2,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2: source2,
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 System.Collections.Specialized.INotifyCollectionChanged source2)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2: source2,
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2: source2,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2: source2,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableCollection<TSourceItem> source2,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2: source2,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableCollection<TSourceItem> source2,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2: source2,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableCollection<TSourceItem> source2,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2: source2,
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableCollection<TSourceItem> source2)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2: source2,
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableCollection<TSourceItem> source2,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2: source2,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableCollection<TSourceItem> source2,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2: source2,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2: source2,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2: source2,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2: source2,
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 System.Collections.Specialized.INotifyCollectionChanged source2)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2: source2,
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2: source2,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2: source2,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableCollection<TSourceItem> source2,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2: source2,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableCollection<TSourceItem> source2,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2: source2,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableCollection<TSourceItem> source2,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2: source2,
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableCollection<TSourceItem> source2)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2: source2,
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableCollection<TSourceItem> source2,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2: source2,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableCollection<TSourceItem> source2,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2: source2,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableCollection<TSourceItem> source2,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableCollection<TSourceItem> source2,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableCollection<TSourceItem> source2,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableCollection<TSourceItem> source2,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2: source2,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2: source2,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableCollection<TSourceItem> source2,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2: source2,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableCollection<TSourceItem> source2,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2: source2,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2: source2,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2: source2,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableCollection<TSourceItem> source2,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2: source2,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableCollection<TSourceItem> source2,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2: source2,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 System.Collections.Specialized.INotifyCollectionChanged source2)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableCollection<TSourceItem> source2,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableCollection<TSourceItem> source2,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableCollection<TSourceItem> source2,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableCollection<TSourceItem> source2)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableCollection<TSourceItem> source2,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableCollection<TSourceItem> source2,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 System.Collections.Specialized.INotifyCollectionChanged source2)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableCollection<TSourceItem> source2,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableCollection<TSourceItem> source2,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableCollection<TSourceItem> source2,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableCollection<TSourceItem> source2)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableCollection<TSourceItem> source2,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableCollection<TSourceItem> source2,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableCollection<TSourceItem> source2,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableCollection<TSourceItem> source2,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableCollection<TSourceItem> source2,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableCollection<TSourceItem> source2,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Intersecting<TSourceItem> Intersecting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Intersecting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		#endregion
		#region ItemComputing

		[ObservableComputationsCall]
		public static ObservableComputations.ItemComputing<TSourceItem> ItemComputing<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 int index,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.ItemComputing<TSourceItem>(
				sourceScalar: sourceScalar,
				index: index,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ItemComputing<TSourceItem> ItemComputing<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 int index)
			
		{
			return new ObservableComputations.ItemComputing<TSourceItem>(
				sourceScalar: sourceScalar,
				index: index,
				defaultValue: default(TSourceItem));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ItemComputing<TSourceItem> ItemComputing<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 int index,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.ItemComputing<TSourceItem>(
				sourceScalar: sourceScalar,
				index: index,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ItemComputing<TSourceItem> ItemComputing<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 int index)
			
		{
			return new ObservableComputations.ItemComputing<TSourceItem>(
				sourceScalar: sourceScalar,
				index: index,
				defaultValue: default(TSourceItem));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ItemComputing<TSourceItem> ItemComputing<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 int index,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.ItemComputing<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				index: index,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ItemComputing<TSourceItem> ItemComputing<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 int index)
			
		{
			return new ObservableComputations.ItemComputing<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				index: index,
				defaultValue: default(TSourceItem));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ItemComputing<TSourceItem> ItemComputing<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 int index,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.ItemComputing<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				index: index,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ItemComputing<TSourceItem> ItemComputing<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 int index)
			
		{
			return new ObservableComputations.ItemComputing<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				index: index,
				defaultValue: default(TSourceItem));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ItemComputing<TSourceItem> ItemComputing<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 ObservableComputations.IReadScalar<int> indexScalar,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.ItemComputing<TSourceItem>(
				sourceScalar: sourceScalar,
				indexScalar: indexScalar,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ItemComputing<TSourceItem> ItemComputing<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 ObservableComputations.IReadScalar<int> indexScalar)
			
		{
			return new ObservableComputations.ItemComputing<TSourceItem>(
				sourceScalar: sourceScalar,
				indexScalar: indexScalar,
				defaultValue: default);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ItemComputing<TSourceItem> ItemComputing<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 Expression<Func<int>> indexExpression,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.ItemComputing<TSourceItem>(
				sourceScalar: sourceScalar,
				indexScalar: new Computing<int>(indexExpression),
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ItemComputing<TSourceItem> ItemComputing<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 Expression<Func<int>> indexExpression)
			
		{
			return new ObservableComputations.ItemComputing<TSourceItem>(
				sourceScalar: sourceScalar,
				indexScalar: new Computing<int>(indexExpression),
				defaultValue: default);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ItemComputing<TSourceItem> ItemComputing<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 ObservableComputations.IReadScalar<int> indexScalar,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.ItemComputing<TSourceItem>(
				sourceScalar: sourceScalar,
				indexScalar: indexScalar,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ItemComputing<TSourceItem> ItemComputing<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 ObservableComputations.IReadScalar<int> indexScalar)
			
		{
			return new ObservableComputations.ItemComputing<TSourceItem>(
				sourceScalar: sourceScalar,
				indexScalar: indexScalar,
				defaultValue: default);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ItemComputing<TSourceItem> ItemComputing<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 Expression<Func<int>> indexExpression,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.ItemComputing<TSourceItem>(
				sourceScalar: sourceScalar,
				indexScalar: new Computing<int>(indexExpression),
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ItemComputing<TSourceItem> ItemComputing<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 Expression<Func<int>> indexExpression)
			
		{
			return new ObservableComputations.ItemComputing<TSourceItem>(
				sourceScalar: sourceScalar,
				indexScalar: new Computing<int>(indexExpression),
				defaultValue: default);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ItemComputing<TSourceItem> ItemComputing<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 ObservableComputations.IReadScalar<int> indexScalar,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.ItemComputing<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				indexScalar: indexScalar,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ItemComputing<TSourceItem> ItemComputing<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 ObservableComputations.IReadScalar<int> indexScalar)
			
		{
			return new ObservableComputations.ItemComputing<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				indexScalar: indexScalar,
				defaultValue: default);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ItemComputing<TSourceItem> ItemComputing<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 Expression<Func<int>> indexExpression,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.ItemComputing<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				indexScalar: new Computing<int>(indexExpression),
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ItemComputing<TSourceItem> ItemComputing<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 Expression<Func<int>> indexExpression)
			
		{
			return new ObservableComputations.ItemComputing<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				indexScalar: new Computing<int>(indexExpression),
				defaultValue: default);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ItemComputing<TSourceItem> ItemComputing<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 ObservableComputations.IReadScalar<int> indexScalar,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.ItemComputing<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				indexScalar: indexScalar,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ItemComputing<TSourceItem> ItemComputing<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 ObservableComputations.IReadScalar<int> indexScalar)
			
		{
			return new ObservableComputations.ItemComputing<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				indexScalar: indexScalar,
				defaultValue: default);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ItemComputing<TSourceItem> ItemComputing<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 Expression<Func<int>> indexExpression,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.ItemComputing<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				indexScalar: new Computing<int>(indexExpression),
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ItemComputing<TSourceItem> ItemComputing<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 Expression<Func<int>> indexExpression)
			
		{
			return new ObservableComputations.ItemComputing<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				indexScalar: new Computing<int>(indexExpression),
				defaultValue: default);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ItemComputing<TSourceItem> ItemComputing<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 int index,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.ItemComputing<TSourceItem>(
				source: source,
				index: index,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ItemComputing<TSourceItem> ItemComputing<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 int index)
			
		{
			return new ObservableComputations.ItemComputing<TSourceItem>(
				source: source,
				index: index,
				defaultValue: default);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ItemComputing<TSourceItem> ItemComputing<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 int index,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.ItemComputing<TSourceItem>(
				source: source,
				index: index,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ItemComputing<TSourceItem> ItemComputing<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 int index)
			
		{
			return new ObservableComputations.ItemComputing<TSourceItem>(
				source: source,
				index: index,
				defaultValue: default);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ItemComputing<TSourceItem> ItemComputing<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 ObservableComputations.IReadScalar<int> indexScalar,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.ItemComputing<TSourceItem>(
				source: source,
				indexScalar: indexScalar,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ItemComputing<TSourceItem> ItemComputing<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 ObservableComputations.IReadScalar<int> indexScalar)
			
		{
			return new ObservableComputations.ItemComputing<TSourceItem>(
				source: source,
				indexScalar: indexScalar,
				defaultValue: default);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ItemComputing<TSourceItem> ItemComputing<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 Expression<Func<int>> indexExpression,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.ItemComputing<TSourceItem>(
				source: source,
				indexScalar: new Computing<int>(indexExpression),
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ItemComputing<TSourceItem> ItemComputing<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 Expression<Func<int>> indexExpression)
			
		{
			return new ObservableComputations.ItemComputing<TSourceItem>(
				source: source,
				indexScalar: new Computing<int>(indexExpression),
				defaultValue: default);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ItemComputing<TSourceItem> ItemComputing<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 ObservableComputations.IReadScalar<int> indexScalar,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.ItemComputing<TSourceItem>(
				source: source,
				indexScalar: indexScalar,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ItemComputing<TSourceItem> ItemComputing<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 ObservableComputations.IReadScalar<int> indexScalar)
			
		{
			return new ObservableComputations.ItemComputing<TSourceItem>(
				source: source,
				indexScalar: indexScalar,
				defaultValue: default);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ItemComputing<TSourceItem> ItemComputing<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 Expression<Func<int>> indexExpression,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.ItemComputing<TSourceItem>(
				source: source,
				indexScalar: new Computing<int>(indexExpression),
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ItemComputing<TSourceItem> ItemComputing<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 Expression<Func<int>> indexExpression)
			
		{
			return new ObservableComputations.ItemComputing<TSourceItem>(
				source: source,
				indexScalar: new Computing<int>(indexExpression),
				defaultValue: default);
		}

		#endregion
		#region Joining

		[ObservableComputationsCall]
		public static ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem> Joining<TLeftSourceItem, TRightSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> leftSourceScalar,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> rightSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TLeftSourceItem, TRightSourceItem, bool>> predicateExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem>(
				leftSourceScalar: leftSourceScalar,
				rightSourceScalar: rightSourceScalar,
				predicateExpression: predicateExpression,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem> Joining<TLeftSourceItem, TRightSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> leftSourceScalar,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> rightSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TLeftSourceItem, TRightSourceItem, bool>> predicateExpression)
			
		{
			return new ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem>(
				leftSourceScalar: leftSourceScalar,
				rightSourceScalar: rightSourceScalar,
				predicateExpression: predicateExpression,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem> Joining<TLeftSourceItem, TRightSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> leftSourceScalar,
			 ObservableComputations.IReadScalar<ObservableCollection<TRightSourceItem>> rightSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TLeftSourceItem, TRightSourceItem, bool>> predicateExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem>(
				leftSourceScalar: leftSourceScalar,
				rightSourceScalar: rightSourceScalar,
				predicateExpression: predicateExpression,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem> Joining<TLeftSourceItem, TRightSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> leftSourceScalar,
			 ObservableComputations.IReadScalar<ObservableCollection<TRightSourceItem>> rightSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TLeftSourceItem, TRightSourceItem, bool>> predicateExpression)
			
		{
			return new ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem>(
				leftSourceScalar: leftSourceScalar,
				rightSourceScalar: rightSourceScalar,
				predicateExpression: predicateExpression,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem> Joining<TLeftSourceItem, TRightSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> leftSourceScalar,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> rightSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TLeftSourceItem, TRightSourceItem, bool>> predicateExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem>(
				leftSourceScalar: leftSourceScalar,
				rightSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(rightSourceExpression),
				predicateExpression: predicateExpression,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem> Joining<TLeftSourceItem, TRightSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> leftSourceScalar,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> rightSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TLeftSourceItem, TRightSourceItem, bool>> predicateExpression)
			
		{
			return new ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem>(
				leftSourceScalar: leftSourceScalar,
				rightSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(rightSourceExpression),
				predicateExpression: predicateExpression,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem> Joining<TLeftSourceItem, TRightSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> leftSourceScalar,
			 Expression<Func<ObservableCollection<TRightSourceItem>>> rightSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TLeftSourceItem, TRightSourceItem, bool>> predicateExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem>(
				leftSourceScalar: leftSourceScalar,
				rightSourceScalar: new Computing<ObservableCollection<TRightSourceItem>>(rightSourceExpression),
				predicateExpression: predicateExpression,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem> Joining<TLeftSourceItem, TRightSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> leftSourceScalar,
			 Expression<Func<ObservableCollection<TRightSourceItem>>> rightSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TLeftSourceItem, TRightSourceItem, bool>> predicateExpression)
			
		{
			return new ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem>(
				leftSourceScalar: leftSourceScalar,
				rightSourceScalar: new Computing<ObservableCollection<TRightSourceItem>>(rightSourceExpression),
				predicateExpression: predicateExpression,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem> Joining<TLeftSourceItem, TRightSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TLeftSourceItem>> leftSourceScalar,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> rightSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TLeftSourceItem, TRightSourceItem, bool>> predicateExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem>(
				leftSourceScalar: leftSourceScalar,
				rightSourceScalar: rightSourceScalar,
				predicateExpression: predicateExpression,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem> Joining<TLeftSourceItem, TRightSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TLeftSourceItem>> leftSourceScalar,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> rightSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TLeftSourceItem, TRightSourceItem, bool>> predicateExpression)
			
		{
			return new ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem>(
				leftSourceScalar: leftSourceScalar,
				rightSourceScalar: rightSourceScalar,
				predicateExpression: predicateExpression,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem> Joining<TLeftSourceItem, TRightSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TLeftSourceItem>> leftSourceScalar,
			 ObservableComputations.IReadScalar<ObservableCollection<TRightSourceItem>> rightSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TLeftSourceItem, TRightSourceItem, bool>> predicateExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem>(
				leftSourceScalar: leftSourceScalar,
				rightSourceScalar: rightSourceScalar,
				predicateExpression: predicateExpression,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem> Joining<TLeftSourceItem, TRightSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TLeftSourceItem>> leftSourceScalar,
			 ObservableComputations.IReadScalar<ObservableCollection<TRightSourceItem>> rightSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TLeftSourceItem, TRightSourceItem, bool>> predicateExpression)
			
		{
			return new ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem>(
				leftSourceScalar: leftSourceScalar,
				rightSourceScalar: rightSourceScalar,
				predicateExpression: predicateExpression,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem> Joining<TLeftSourceItem, TRightSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TLeftSourceItem>> leftSourceScalar,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> rightSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TLeftSourceItem, TRightSourceItem, bool>> predicateExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem>(
				leftSourceScalar: leftSourceScalar,
				rightSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(rightSourceExpression),
				predicateExpression: predicateExpression,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem> Joining<TLeftSourceItem, TRightSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TLeftSourceItem>> leftSourceScalar,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> rightSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TLeftSourceItem, TRightSourceItem, bool>> predicateExpression)
			
		{
			return new ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem>(
				leftSourceScalar: leftSourceScalar,
				rightSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(rightSourceExpression),
				predicateExpression: predicateExpression,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem> Joining<TLeftSourceItem, TRightSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TLeftSourceItem>> leftSourceScalar,
			 Expression<Func<ObservableCollection<TRightSourceItem>>> rightSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TLeftSourceItem, TRightSourceItem, bool>> predicateExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem>(
				leftSourceScalar: leftSourceScalar,
				rightSourceScalar: new Computing<ObservableCollection<TRightSourceItem>>(rightSourceExpression),
				predicateExpression: predicateExpression,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem> Joining<TLeftSourceItem, TRightSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TLeftSourceItem>> leftSourceScalar,
			 Expression<Func<ObservableCollection<TRightSourceItem>>> rightSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TLeftSourceItem, TRightSourceItem, bool>> predicateExpression)
			
		{
			return new ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem>(
				leftSourceScalar: leftSourceScalar,
				rightSourceScalar: new Computing<ObservableCollection<TRightSourceItem>>(rightSourceExpression),
				predicateExpression: predicateExpression,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem> Joining<TLeftSourceItem, TRightSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> leftSourceExpression,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> rightSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TLeftSourceItem, TRightSourceItem, bool>> predicateExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem>(
				leftSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(leftSourceExpression),
				rightSourceScalar: rightSourceScalar,
				predicateExpression: predicateExpression,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem> Joining<TLeftSourceItem, TRightSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> leftSourceExpression,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> rightSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TLeftSourceItem, TRightSourceItem, bool>> predicateExpression)
			
		{
			return new ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem>(
				leftSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(leftSourceExpression),
				rightSourceScalar: rightSourceScalar,
				predicateExpression: predicateExpression,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem> Joining<TLeftSourceItem, TRightSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> leftSourceExpression,
			 ObservableComputations.IReadScalar<ObservableCollection<TRightSourceItem>> rightSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TLeftSourceItem, TRightSourceItem, bool>> predicateExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem>(
				leftSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(leftSourceExpression),
				rightSourceScalar: rightSourceScalar,
				predicateExpression: predicateExpression,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem> Joining<TLeftSourceItem, TRightSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> leftSourceExpression,
			 ObservableComputations.IReadScalar<ObservableCollection<TRightSourceItem>> rightSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TLeftSourceItem, TRightSourceItem, bool>> predicateExpression)
			
		{
			return new ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem>(
				leftSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(leftSourceExpression),
				rightSourceScalar: rightSourceScalar,
				predicateExpression: predicateExpression,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem> Joining<TLeftSourceItem, TRightSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> leftSourceExpression,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> rightSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TLeftSourceItem, TRightSourceItem, bool>> predicateExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem>(
				leftSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(leftSourceExpression),
				rightSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(rightSourceExpression),
				predicateExpression: predicateExpression,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem> Joining<TLeftSourceItem, TRightSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> leftSourceExpression,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> rightSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TLeftSourceItem, TRightSourceItem, bool>> predicateExpression)
			
		{
			return new ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem>(
				leftSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(leftSourceExpression),
				rightSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(rightSourceExpression),
				predicateExpression: predicateExpression,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem> Joining<TLeftSourceItem, TRightSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> leftSourceExpression,
			 Expression<Func<ObservableCollection<TRightSourceItem>>> rightSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TLeftSourceItem, TRightSourceItem, bool>> predicateExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem>(
				leftSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(leftSourceExpression),
				rightSourceScalar: new Computing<ObservableCollection<TRightSourceItem>>(rightSourceExpression),
				predicateExpression: predicateExpression,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem> Joining<TLeftSourceItem, TRightSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> leftSourceExpression,
			 Expression<Func<ObservableCollection<TRightSourceItem>>> rightSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TLeftSourceItem, TRightSourceItem, bool>> predicateExpression)
			
		{
			return new ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem>(
				leftSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(leftSourceExpression),
				rightSourceScalar: new Computing<ObservableCollection<TRightSourceItem>>(rightSourceExpression),
				predicateExpression: predicateExpression,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem> Joining<TLeftSourceItem, TRightSourceItem>(this
			 Expression<Func<ObservableCollection<TLeftSourceItem>>> leftSourceExpression,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> rightSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TLeftSourceItem, TRightSourceItem, bool>> predicateExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem>(
				leftSourceScalar: new Computing<ObservableCollection<TLeftSourceItem>>(leftSourceExpression),
				rightSourceScalar: rightSourceScalar,
				predicateExpression: predicateExpression,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem> Joining<TLeftSourceItem, TRightSourceItem>(this
			 Expression<Func<ObservableCollection<TLeftSourceItem>>> leftSourceExpression,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> rightSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TLeftSourceItem, TRightSourceItem, bool>> predicateExpression)
			
		{
			return new ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem>(
				leftSourceScalar: new Computing<ObservableCollection<TLeftSourceItem>>(leftSourceExpression),
				rightSourceScalar: rightSourceScalar,
				predicateExpression: predicateExpression,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem> Joining<TLeftSourceItem, TRightSourceItem>(this
			 Expression<Func<ObservableCollection<TLeftSourceItem>>> leftSourceExpression,
			 ObservableComputations.IReadScalar<ObservableCollection<TRightSourceItem>> rightSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TLeftSourceItem, TRightSourceItem, bool>> predicateExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem>(
				leftSourceScalar: new Computing<ObservableCollection<TLeftSourceItem>>(leftSourceExpression),
				rightSourceScalar: rightSourceScalar,
				predicateExpression: predicateExpression,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem> Joining<TLeftSourceItem, TRightSourceItem>(this
			 Expression<Func<ObservableCollection<TLeftSourceItem>>> leftSourceExpression,
			 ObservableComputations.IReadScalar<ObservableCollection<TRightSourceItem>> rightSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TLeftSourceItem, TRightSourceItem, bool>> predicateExpression)
			
		{
			return new ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem>(
				leftSourceScalar: new Computing<ObservableCollection<TLeftSourceItem>>(leftSourceExpression),
				rightSourceScalar: rightSourceScalar,
				predicateExpression: predicateExpression,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem> Joining<TLeftSourceItem, TRightSourceItem>(this
			 Expression<Func<ObservableCollection<TLeftSourceItem>>> leftSourceExpression,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> rightSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TLeftSourceItem, TRightSourceItem, bool>> predicateExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem>(
				leftSourceScalar: new Computing<ObservableCollection<TLeftSourceItem>>(leftSourceExpression),
				rightSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(rightSourceExpression),
				predicateExpression: predicateExpression,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem> Joining<TLeftSourceItem, TRightSourceItem>(this
			 Expression<Func<ObservableCollection<TLeftSourceItem>>> leftSourceExpression,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> rightSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TLeftSourceItem, TRightSourceItem, bool>> predicateExpression)
			
		{
			return new ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem>(
				leftSourceScalar: new Computing<ObservableCollection<TLeftSourceItem>>(leftSourceExpression),
				rightSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(rightSourceExpression),
				predicateExpression: predicateExpression,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem> Joining<TLeftSourceItem, TRightSourceItem>(this
			 Expression<Func<ObservableCollection<TLeftSourceItem>>> leftSourceExpression,
			 Expression<Func<ObservableCollection<TRightSourceItem>>> rightSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TLeftSourceItem, TRightSourceItem, bool>> predicateExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem>(
				leftSourceScalar: new Computing<ObservableCollection<TLeftSourceItem>>(leftSourceExpression),
				rightSourceScalar: new Computing<ObservableCollection<TRightSourceItem>>(rightSourceExpression),
				predicateExpression: predicateExpression,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem> Joining<TLeftSourceItem, TRightSourceItem>(this
			 Expression<Func<ObservableCollection<TLeftSourceItem>>> leftSourceExpression,
			 Expression<Func<ObservableCollection<TRightSourceItem>>> rightSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TLeftSourceItem, TRightSourceItem, bool>> predicateExpression)
			
		{
			return new ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem>(
				leftSourceScalar: new Computing<ObservableCollection<TLeftSourceItem>>(leftSourceExpression),
				rightSourceScalar: new Computing<ObservableCollection<TRightSourceItem>>(rightSourceExpression),
				predicateExpression: predicateExpression,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem> Joining<TLeftSourceItem, TRightSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged leftSource,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> rightSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TLeftSourceItem, TRightSourceItem, bool>> predicateExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem>(
				leftSource: leftSource,
				rightSourceScalar: rightSourceScalar,
				predicateExpression: predicateExpression,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem> Joining<TLeftSourceItem, TRightSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged leftSource,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> rightSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TLeftSourceItem, TRightSourceItem, bool>> predicateExpression)
			
		{
			return new ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem>(
				leftSource: leftSource,
				rightSourceScalar: rightSourceScalar,
				predicateExpression: predicateExpression,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem> Joining<TLeftSourceItem, TRightSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged leftSource,
			 ObservableComputations.IReadScalar<ObservableCollection<TRightSourceItem>> rightSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TLeftSourceItem, TRightSourceItem, bool>> predicateExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem>(
				leftSource: leftSource,
				rightSourceScalar: rightSourceScalar,
				predicateExpression: predicateExpression,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem> Joining<TLeftSourceItem, TRightSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged leftSource,
			 ObservableComputations.IReadScalar<ObservableCollection<TRightSourceItem>> rightSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TLeftSourceItem, TRightSourceItem, bool>> predicateExpression)
			
		{
			return new ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem>(
				leftSource: leftSource,
				rightSourceScalar: rightSourceScalar,
				predicateExpression: predicateExpression,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem> Joining<TLeftSourceItem, TRightSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged leftSource,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> rightSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TLeftSourceItem, TRightSourceItem, bool>> predicateExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem>(
				leftSource: leftSource,
				rightSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(rightSourceExpression),
				predicateExpression: predicateExpression,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem> Joining<TLeftSourceItem, TRightSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged leftSource,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> rightSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TLeftSourceItem, TRightSourceItem, bool>> predicateExpression)
			
		{
			return new ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem>(
				leftSource: leftSource,
				rightSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(rightSourceExpression),
				predicateExpression: predicateExpression,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem> Joining<TLeftSourceItem, TRightSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged leftSource,
			 Expression<Func<ObservableCollection<TRightSourceItem>>> rightSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TLeftSourceItem, TRightSourceItem, bool>> predicateExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem>(
				leftSource: leftSource,
				rightSourceScalar: new Computing<ObservableCollection<TRightSourceItem>>(rightSourceExpression),
				predicateExpression: predicateExpression,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem> Joining<TLeftSourceItem, TRightSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged leftSource,
			 Expression<Func<ObservableCollection<TRightSourceItem>>> rightSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TLeftSourceItem, TRightSourceItem, bool>> predicateExpression)
			
		{
			return new ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem>(
				leftSource: leftSource,
				rightSourceScalar: new Computing<ObservableCollection<TRightSourceItem>>(rightSourceExpression),
				predicateExpression: predicateExpression,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem> Joining<TLeftSourceItem, TRightSourceItem>(this
			 ObservableCollection<TLeftSourceItem> leftSource,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> rightSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TLeftSourceItem, TRightSourceItem, bool>> predicateExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem>(
				leftSource: leftSource,
				rightSourceScalar: rightSourceScalar,
				predicateExpression: predicateExpression,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem> Joining<TLeftSourceItem, TRightSourceItem>(this
			 ObservableCollection<TLeftSourceItem> leftSource,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> rightSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TLeftSourceItem, TRightSourceItem, bool>> predicateExpression)
			
		{
			return new ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem>(
				leftSource: leftSource,
				rightSourceScalar: rightSourceScalar,
				predicateExpression: predicateExpression,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem> Joining<TLeftSourceItem, TRightSourceItem>(this
			 ObservableCollection<TLeftSourceItem> leftSource,
			 ObservableComputations.IReadScalar<ObservableCollection<TRightSourceItem>> rightSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TLeftSourceItem, TRightSourceItem, bool>> predicateExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem>(
				leftSource: leftSource,
				rightSourceScalar: rightSourceScalar,
				predicateExpression: predicateExpression,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem> Joining<TLeftSourceItem, TRightSourceItem>(this
			 ObservableCollection<TLeftSourceItem> leftSource,
			 ObservableComputations.IReadScalar<ObservableCollection<TRightSourceItem>> rightSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TLeftSourceItem, TRightSourceItem, bool>> predicateExpression)
			
		{
			return new ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem>(
				leftSource: leftSource,
				rightSourceScalar: rightSourceScalar,
				predicateExpression: predicateExpression,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem> Joining<TLeftSourceItem, TRightSourceItem>(this
			 ObservableCollection<TLeftSourceItem> leftSource,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> rightSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TLeftSourceItem, TRightSourceItem, bool>> predicateExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem>(
				leftSource: leftSource,
				rightSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(rightSourceExpression),
				predicateExpression: predicateExpression,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem> Joining<TLeftSourceItem, TRightSourceItem>(this
			 ObservableCollection<TLeftSourceItem> leftSource,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> rightSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TLeftSourceItem, TRightSourceItem, bool>> predicateExpression)
			
		{
			return new ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem>(
				leftSource: leftSource,
				rightSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(rightSourceExpression),
				predicateExpression: predicateExpression,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem> Joining<TLeftSourceItem, TRightSourceItem>(this
			 ObservableCollection<TLeftSourceItem> leftSource,
			 Expression<Func<ObservableCollection<TRightSourceItem>>> rightSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TLeftSourceItem, TRightSourceItem, bool>> predicateExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem>(
				leftSource: leftSource,
				rightSourceScalar: new Computing<ObservableCollection<TRightSourceItem>>(rightSourceExpression),
				predicateExpression: predicateExpression,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem> Joining<TLeftSourceItem, TRightSourceItem>(this
			 ObservableCollection<TLeftSourceItem> leftSource,
			 Expression<Func<ObservableCollection<TRightSourceItem>>> rightSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TLeftSourceItem, TRightSourceItem, bool>> predicateExpression)
			
		{
			return new ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem>(
				leftSource: leftSource,
				rightSourceScalar: new Computing<ObservableCollection<TRightSourceItem>>(rightSourceExpression),
				predicateExpression: predicateExpression,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem> Joining<TLeftSourceItem, TRightSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> leftSourceScalar,
			 System.Collections.Specialized.INotifyCollectionChanged rightSource,
			 System.Linq.Expressions.Expression<System.Func<TLeftSourceItem, TRightSourceItem, bool>> predicateExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem>(
				leftSourceScalar: leftSourceScalar,
				rightSource: rightSource,
				predicateExpression: predicateExpression,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem> Joining<TLeftSourceItem, TRightSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> leftSourceScalar,
			 System.Collections.Specialized.INotifyCollectionChanged rightSource,
			 System.Linq.Expressions.Expression<System.Func<TLeftSourceItem, TRightSourceItem, bool>> predicateExpression)
			
		{
			return new ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem>(
				leftSourceScalar: leftSourceScalar,
				rightSource: rightSource,
				predicateExpression: predicateExpression,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem> Joining<TLeftSourceItem, TRightSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> leftSourceScalar,
			 ObservableCollection<TRightSourceItem> rightSource,
			 System.Linq.Expressions.Expression<System.Func<TLeftSourceItem, TRightSourceItem, bool>> predicateExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem>(
				leftSourceScalar: leftSourceScalar,
				rightSource: rightSource,
				predicateExpression: predicateExpression,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem> Joining<TLeftSourceItem, TRightSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> leftSourceScalar,
			 ObservableCollection<TRightSourceItem> rightSource,
			 System.Linq.Expressions.Expression<System.Func<TLeftSourceItem, TRightSourceItem, bool>> predicateExpression)
			
		{
			return new ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem>(
				leftSourceScalar: leftSourceScalar,
				rightSource: rightSource,
				predicateExpression: predicateExpression,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem> Joining<TLeftSourceItem, TRightSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TLeftSourceItem>> leftSourceScalar,
			 System.Collections.Specialized.INotifyCollectionChanged rightSource,
			 System.Linq.Expressions.Expression<System.Func<TLeftSourceItem, TRightSourceItem, bool>> predicateExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem>(
				leftSourceScalar: leftSourceScalar,
				rightSource: rightSource,
				predicateExpression: predicateExpression,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem> Joining<TLeftSourceItem, TRightSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TLeftSourceItem>> leftSourceScalar,
			 System.Collections.Specialized.INotifyCollectionChanged rightSource,
			 System.Linq.Expressions.Expression<System.Func<TLeftSourceItem, TRightSourceItem, bool>> predicateExpression)
			
		{
			return new ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem>(
				leftSourceScalar: leftSourceScalar,
				rightSource: rightSource,
				predicateExpression: predicateExpression,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem> Joining<TLeftSourceItem, TRightSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TLeftSourceItem>> leftSourceScalar,
			 ObservableCollection<TRightSourceItem> rightSource,
			 System.Linq.Expressions.Expression<System.Func<TLeftSourceItem, TRightSourceItem, bool>> predicateExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem>(
				leftSourceScalar: leftSourceScalar,
				rightSource: rightSource,
				predicateExpression: predicateExpression,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem> Joining<TLeftSourceItem, TRightSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TLeftSourceItem>> leftSourceScalar,
			 ObservableCollection<TRightSourceItem> rightSource,
			 System.Linq.Expressions.Expression<System.Func<TLeftSourceItem, TRightSourceItem, bool>> predicateExpression)
			
		{
			return new ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem>(
				leftSourceScalar: leftSourceScalar,
				rightSource: rightSource,
				predicateExpression: predicateExpression,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem> Joining<TLeftSourceItem, TRightSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> leftSourceExpression,
			 System.Collections.Specialized.INotifyCollectionChanged rightSource,
			 System.Linq.Expressions.Expression<System.Func<TLeftSourceItem, TRightSourceItem, bool>> predicateExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem>(
				leftSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(leftSourceExpression),
				rightSource: rightSource,
				predicateExpression: predicateExpression,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem> Joining<TLeftSourceItem, TRightSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> leftSourceExpression,
			 System.Collections.Specialized.INotifyCollectionChanged rightSource,
			 System.Linq.Expressions.Expression<System.Func<TLeftSourceItem, TRightSourceItem, bool>> predicateExpression)
			
		{
			return new ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem>(
				leftSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(leftSourceExpression),
				rightSource: rightSource,
				predicateExpression: predicateExpression,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem> Joining<TLeftSourceItem, TRightSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> leftSourceExpression,
			 ObservableCollection<TRightSourceItem> rightSource,
			 System.Linq.Expressions.Expression<System.Func<TLeftSourceItem, TRightSourceItem, bool>> predicateExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem>(
				leftSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(leftSourceExpression),
				rightSource: rightSource,
				predicateExpression: predicateExpression,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem> Joining<TLeftSourceItem, TRightSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> leftSourceExpression,
			 ObservableCollection<TRightSourceItem> rightSource,
			 System.Linq.Expressions.Expression<System.Func<TLeftSourceItem, TRightSourceItem, bool>> predicateExpression)
			
		{
			return new ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem>(
				leftSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(leftSourceExpression),
				rightSource: rightSource,
				predicateExpression: predicateExpression,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem> Joining<TLeftSourceItem, TRightSourceItem>(this
			 Expression<Func<ObservableCollection<TLeftSourceItem>>> leftSourceExpression,
			 System.Collections.Specialized.INotifyCollectionChanged rightSource,
			 System.Linq.Expressions.Expression<System.Func<TLeftSourceItem, TRightSourceItem, bool>> predicateExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem>(
				leftSourceScalar: new Computing<ObservableCollection<TLeftSourceItem>>(leftSourceExpression),
				rightSource: rightSource,
				predicateExpression: predicateExpression,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem> Joining<TLeftSourceItem, TRightSourceItem>(this
			 Expression<Func<ObservableCollection<TLeftSourceItem>>> leftSourceExpression,
			 System.Collections.Specialized.INotifyCollectionChanged rightSource,
			 System.Linq.Expressions.Expression<System.Func<TLeftSourceItem, TRightSourceItem, bool>> predicateExpression)
			
		{
			return new ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem>(
				leftSourceScalar: new Computing<ObservableCollection<TLeftSourceItem>>(leftSourceExpression),
				rightSource: rightSource,
				predicateExpression: predicateExpression,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem> Joining<TLeftSourceItem, TRightSourceItem>(this
			 Expression<Func<ObservableCollection<TLeftSourceItem>>> leftSourceExpression,
			 ObservableCollection<TRightSourceItem> rightSource,
			 System.Linq.Expressions.Expression<System.Func<TLeftSourceItem, TRightSourceItem, bool>> predicateExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem>(
				leftSourceScalar: new Computing<ObservableCollection<TLeftSourceItem>>(leftSourceExpression),
				rightSource: rightSource,
				predicateExpression: predicateExpression,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem> Joining<TLeftSourceItem, TRightSourceItem>(this
			 Expression<Func<ObservableCollection<TLeftSourceItem>>> leftSourceExpression,
			 ObservableCollection<TRightSourceItem> rightSource,
			 System.Linq.Expressions.Expression<System.Func<TLeftSourceItem, TRightSourceItem, bool>> predicateExpression)
			
		{
			return new ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem>(
				leftSourceScalar: new Computing<ObservableCollection<TLeftSourceItem>>(leftSourceExpression),
				rightSource: rightSource,
				predicateExpression: predicateExpression,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem> Joining<TLeftSourceItem, TRightSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged leftSource,
			 System.Collections.Specialized.INotifyCollectionChanged rightSource,
			 System.Linq.Expressions.Expression<System.Func<TLeftSourceItem, TRightSourceItem, bool>> predicateExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem>(
				leftSource: leftSource,
				rightSource: rightSource,
				predicateExpression: predicateExpression,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem> Joining<TLeftSourceItem, TRightSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged leftSource,
			 System.Collections.Specialized.INotifyCollectionChanged rightSource,
			 System.Linq.Expressions.Expression<System.Func<TLeftSourceItem, TRightSourceItem, bool>> predicateExpression)
			
		{
			return new ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem>(
				leftSource: leftSource,
				rightSource: rightSource,
				predicateExpression: predicateExpression,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem> Joining<TLeftSourceItem, TRightSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged leftSource,
			 ObservableCollection<TRightSourceItem> rightSource,
			 System.Linq.Expressions.Expression<System.Func<TLeftSourceItem, TRightSourceItem, bool>> predicateExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem>(
				leftSource: leftSource,
				rightSource: rightSource,
				predicateExpression: predicateExpression,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem> Joining<TLeftSourceItem, TRightSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged leftSource,
			 ObservableCollection<TRightSourceItem> rightSource,
			 System.Linq.Expressions.Expression<System.Func<TLeftSourceItem, TRightSourceItem, bool>> predicateExpression)
			
		{
			return new ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem>(
				leftSource: leftSource,
				rightSource: rightSource,
				predicateExpression: predicateExpression,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem> Joining<TLeftSourceItem, TRightSourceItem>(this
			 ObservableCollection<TLeftSourceItem> leftSource,
			 System.Collections.Specialized.INotifyCollectionChanged rightSource,
			 System.Linq.Expressions.Expression<System.Func<TLeftSourceItem, TRightSourceItem, bool>> predicateExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem>(
				leftSource: leftSource,
				rightSource: rightSource,
				predicateExpression: predicateExpression,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem> Joining<TLeftSourceItem, TRightSourceItem>(this
			 ObservableCollection<TLeftSourceItem> leftSource,
			 System.Collections.Specialized.INotifyCollectionChanged rightSource,
			 System.Linq.Expressions.Expression<System.Func<TLeftSourceItem, TRightSourceItem, bool>> predicateExpression)
			
		{
			return new ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem>(
				leftSource: leftSource,
				rightSource: rightSource,
				predicateExpression: predicateExpression,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem> Joining<TLeftSourceItem, TRightSourceItem>(this
			 ObservableCollection<TLeftSourceItem> leftSource,
			 ObservableCollection<TRightSourceItem> rightSource,
			 System.Linq.Expressions.Expression<System.Func<TLeftSourceItem, TRightSourceItem, bool>> predicateExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem>(
				leftSource: leftSource,
				rightSource: rightSource,
				predicateExpression: predicateExpression,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem> Joining<TLeftSourceItem, TRightSourceItem>(this
			 ObservableCollection<TLeftSourceItem> leftSource,
			 ObservableCollection<TRightSourceItem> rightSource,
			 System.Linq.Expressions.Expression<System.Func<TLeftSourceItem, TRightSourceItem, bool>> predicateExpression)
			
		{
			return new ObservableComputations.Joining<TLeftSourceItem, TRightSourceItem>(
				leftSource: leftSource,
				rightSource: rightSource,
				predicateExpression: predicateExpression,
				capacity: 0);
		}

		#endregion
		#region LastComputing

		[ObservableComputationsCall]
		public static ObservableComputations.LastComputing<TSourceItem> LastComputing<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.LastComputing<TSourceItem>(
				sourceScalar: sourceScalar,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.LastComputing<TSourceItem> LastComputing<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar)
			
		{
			return new ObservableComputations.LastComputing<TSourceItem>(
				sourceScalar: sourceScalar,
				defaultValue: default(TSourceItem));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.LastComputing<TSourceItem> LastComputing<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.LastComputing<TSourceItem>(
				sourceScalar: sourceScalar,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.LastComputing<TSourceItem> LastComputing<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar)
			
		{
			return new ObservableComputations.LastComputing<TSourceItem>(
				sourceScalar: sourceScalar,
				defaultValue: default(TSourceItem));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.LastComputing<TSourceItem> LastComputing<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.LastComputing<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.LastComputing<TSourceItem> LastComputing<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression)
			
		{
			return new ObservableComputations.LastComputing<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				defaultValue: default(TSourceItem));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.LastComputing<TSourceItem> LastComputing<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.LastComputing<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.LastComputing<TSourceItem> LastComputing<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression)
			
		{
			return new ObservableComputations.LastComputing<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				defaultValue: default(TSourceItem));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.LastComputing<TSourceItem> LastComputing<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.LastComputing<TSourceItem>(
				source: source,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.LastComputing<TSourceItem> LastComputing<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source)
			
		{
			return new ObservableComputations.LastComputing<TSourceItem>(
				source: source,
				defaultValue: default(TSourceItem));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.LastComputing<TSourceItem> LastComputing<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.LastComputing<TSourceItem>(
				source: source,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.LastComputing<TSourceItem> LastComputing<TSourceItem>(this
			 ObservableCollection<TSourceItem> source)
			
		{
			return new ObservableComputations.LastComputing<TSourceItem>(
				source: source,
				defaultValue: default(TSourceItem));
		}

		#endregion
		#region Maximazing

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Maximazing<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 System.Collections.Generic.IComparer<TSourceItem> comparer,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				sourceScalar: sourceScalar,
				mode: MinimazingOrMaximazingMode.Maximazing,
				comparer: comparer,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Maximazing<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 System.Collections.Generic.IComparer<TSourceItem> comparer)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				sourceScalar: sourceScalar,
				mode: MinimazingOrMaximazingMode.Maximazing,
				comparer: comparer,
				defaultValue: default(TSourceItem));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Maximazing<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				sourceScalar: sourceScalar,
				mode: MinimazingOrMaximazingMode.Maximazing,
				comparer: null,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Maximazing<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				sourceScalar: sourceScalar,
				mode: MinimazingOrMaximazingMode.Maximazing,
				comparer: null,
				defaultValue: default(TSourceItem));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Maximazing<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 System.Collections.Generic.IComparer<TSourceItem> comparer,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				sourceScalar: sourceScalar,
				mode: MinimazingOrMaximazingMode.Maximazing,
				comparer: comparer,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Maximazing<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 System.Collections.Generic.IComparer<TSourceItem> comparer)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				sourceScalar: sourceScalar,
				mode: MinimazingOrMaximazingMode.Maximazing,
				comparer: comparer,
				defaultValue: default(TSourceItem));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Maximazing<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				sourceScalar: sourceScalar,
				mode: MinimazingOrMaximazingMode.Maximazing,
				comparer: null,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Maximazing<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				sourceScalar: sourceScalar,
				mode: MinimazingOrMaximazingMode.Maximazing,
				comparer: null,
				defaultValue: default(TSourceItem));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Maximazing<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 System.Collections.Generic.IComparer<TSourceItem> comparer,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				mode: MinimazingOrMaximazingMode.Maximazing,
				comparer: comparer,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Maximazing<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 System.Collections.Generic.IComparer<TSourceItem> comparer)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				mode: MinimazingOrMaximazingMode.Maximazing,
				comparer: comparer,
				defaultValue: default(TSourceItem));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Maximazing<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				mode: MinimazingOrMaximazingMode.Maximazing,
				comparer: null,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Maximazing<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				mode: MinimazingOrMaximazingMode.Maximazing,
				comparer: null,
				defaultValue: default(TSourceItem));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Maximazing<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 System.Collections.Generic.IComparer<TSourceItem> comparer,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				mode: MinimazingOrMaximazingMode.Maximazing,
				comparer: comparer,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Maximazing<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 System.Collections.Generic.IComparer<TSourceItem> comparer)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				mode: MinimazingOrMaximazingMode.Maximazing,
				comparer: comparer,
				defaultValue: default(TSourceItem));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Maximazing<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				mode: MinimazingOrMaximazingMode.Maximazing,
				comparer: null,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Maximazing<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				mode: MinimazingOrMaximazingMode.Maximazing,
				comparer: null,
				defaultValue: default(TSourceItem));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Maximazing<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IComparer<TSourceItem>> comparerScalar,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				sourceScalar: sourceScalar,
				mode: MinimazingOrMaximazingMode.Maximazing,
				comparerScalar: comparerScalar,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Maximazing<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IComparer<TSourceItem>> comparerScalar)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				sourceScalar: sourceScalar,
				mode: MinimazingOrMaximazingMode.Maximazing,
				comparerScalar: comparerScalar,
				defaultValue: default(TSourceItem));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Maximazing<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 Expression<Func<System.Collections.Generic.IComparer<TSourceItem>>> comparerExpression,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				sourceScalar: sourceScalar,
				mode: MinimazingOrMaximazingMode.Maximazing,
				comparerScalar: new Computing<System.Collections.Generic.IComparer<TSourceItem>>(comparerExpression),
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Maximazing<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 Expression<Func<System.Collections.Generic.IComparer<TSourceItem>>> comparerExpression)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				sourceScalar: sourceScalar,
				mode: MinimazingOrMaximazingMode.Maximazing,
				comparerScalar: new Computing<System.Collections.Generic.IComparer<TSourceItem>>(comparerExpression),
				defaultValue: default(TSourceItem));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Maximazing<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IComparer<TSourceItem>> comparerScalar,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				sourceScalar: sourceScalar,
				mode: MinimazingOrMaximazingMode.Maximazing,
				comparerScalar: comparerScalar,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Maximazing<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IComparer<TSourceItem>> comparerScalar)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				sourceScalar: sourceScalar,
				mode: MinimazingOrMaximazingMode.Maximazing,
				comparerScalar: comparerScalar,
				defaultValue: default(TSourceItem));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Maximazing<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 Expression<Func<System.Collections.Generic.IComparer<TSourceItem>>> comparerExpression,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				sourceScalar: sourceScalar,
				mode: MinimazingOrMaximazingMode.Maximazing,
				comparerScalar: new Computing<System.Collections.Generic.IComparer<TSourceItem>>(comparerExpression),
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Maximazing<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 Expression<Func<System.Collections.Generic.IComparer<TSourceItem>>> comparerExpression)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				sourceScalar: sourceScalar,
				mode: MinimazingOrMaximazingMode.Maximazing,
				comparerScalar: new Computing<System.Collections.Generic.IComparer<TSourceItem>>(comparerExpression),
				defaultValue: default(TSourceItem));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Maximazing<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IComparer<TSourceItem>> comparerScalar,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				mode: MinimazingOrMaximazingMode.Maximazing,
				comparerScalar: comparerScalar,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Maximazing<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IComparer<TSourceItem>> comparerScalar)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				mode: MinimazingOrMaximazingMode.Maximazing,
				comparerScalar: comparerScalar,
				defaultValue: default(TSourceItem));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Maximazing<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 Expression<Func<System.Collections.Generic.IComparer<TSourceItem>>> comparerExpression,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				mode: MinimazingOrMaximazingMode.Maximazing,
				comparerScalar: new Computing<System.Collections.Generic.IComparer<TSourceItem>>(comparerExpression),
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Maximazing<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 Expression<Func<System.Collections.Generic.IComparer<TSourceItem>>> comparerExpression)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				mode: MinimazingOrMaximazingMode.Maximazing,
				comparerScalar: new Computing<System.Collections.Generic.IComparer<TSourceItem>>(comparerExpression),
				defaultValue: default(TSourceItem));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Maximazing<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IComparer<TSourceItem>> comparerScalar,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				mode: MinimazingOrMaximazingMode.Maximazing,
				comparerScalar: comparerScalar,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Maximazing<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IComparer<TSourceItem>> comparerScalar)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				mode: MinimazingOrMaximazingMode.Maximazing,
				comparerScalar: comparerScalar,
				defaultValue: default(TSourceItem));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Maximazing<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 Expression<Func<System.Collections.Generic.IComparer<TSourceItem>>> comparerExpression,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				mode: MinimazingOrMaximazingMode.Maximazing,
				comparerScalar: new Computing<System.Collections.Generic.IComparer<TSourceItem>>(comparerExpression),
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Maximazing<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 Expression<Func<System.Collections.Generic.IComparer<TSourceItem>>> comparerExpression)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				mode: MinimazingOrMaximazingMode.Maximazing,
				comparerScalar: new Computing<System.Collections.Generic.IComparer<TSourceItem>>(comparerExpression),
				defaultValue: default(TSourceItem));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Maximazing<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 System.Collections.Generic.IComparer<TSourceItem> comparer,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				source: source,
				mode: MinimazingOrMaximazingMode.Maximazing,
				comparer: comparer,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Maximazing<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 System.Collections.Generic.IComparer<TSourceItem> comparer)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				source: source,
				mode: MinimazingOrMaximazingMode.Maximazing,
				comparer: comparer,
				defaultValue: default(TSourceItem));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Maximazing<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				source: source,
				mode: MinimazingOrMaximazingMode.Maximazing,
				comparer: null,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Maximazing<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				source: source,
				mode: MinimazingOrMaximazingMode.Maximazing,
				comparer: null,
				defaultValue: default(TSourceItem));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Maximazing<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 System.Collections.Generic.IComparer<TSourceItem> comparer,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				source: source,
				mode: MinimazingOrMaximazingMode.Maximazing,
				comparer: comparer,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Maximazing<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 System.Collections.Generic.IComparer<TSourceItem> comparer)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				source: source,
				mode: MinimazingOrMaximazingMode.Maximazing,
				comparer: comparer,
				defaultValue: default(TSourceItem));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Maximazing<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				source: source,
				mode: MinimazingOrMaximazingMode.Maximazing,
				comparer: null,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Maximazing<TSourceItem>(this
			 ObservableCollection<TSourceItem> source)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				source: source,
				mode: MinimazingOrMaximazingMode.Maximazing,
				comparer: null,
				defaultValue: default(TSourceItem));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Maximazing<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IComparer<TSourceItem>> comparerScalar,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				source: source,
				mode: MinimazingOrMaximazingMode.Maximazing,
				comparerScalar: comparerScalar,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Maximazing<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IComparer<TSourceItem>> comparerScalar)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				source: source,
				mode: MinimazingOrMaximazingMode.Maximazing,
				comparerScalar: comparerScalar,
				defaultValue: default(TSourceItem));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Maximazing<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 Expression<Func<System.Collections.Generic.IComparer<TSourceItem>>> comparerExpression,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				source: source,
				mode: MinimazingOrMaximazingMode.Maximazing,
				comparerScalar: new Computing<System.Collections.Generic.IComparer<TSourceItem>>(comparerExpression),
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Maximazing<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 Expression<Func<System.Collections.Generic.IComparer<TSourceItem>>> comparerExpression)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				source: source,
				mode: MinimazingOrMaximazingMode.Maximazing,
				comparerScalar: new Computing<System.Collections.Generic.IComparer<TSourceItem>>(comparerExpression),
				defaultValue: default(TSourceItem));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Maximazing<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IComparer<TSourceItem>> comparerScalar,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				source: source,
				mode: MinimazingOrMaximazingMode.Maximazing,
				comparerScalar: comparerScalar,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Maximazing<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IComparer<TSourceItem>> comparerScalar)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				source: source,
				mode: MinimazingOrMaximazingMode.Maximazing,
				comparerScalar: comparerScalar,
				defaultValue: default(TSourceItem));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Maximazing<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 Expression<Func<System.Collections.Generic.IComparer<TSourceItem>>> comparerExpression,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				source: source,
				mode: MinimazingOrMaximazingMode.Maximazing,
				comparerScalar: new Computing<System.Collections.Generic.IComparer<TSourceItem>>(comparerExpression),
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Maximazing<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 Expression<Func<System.Collections.Generic.IComparer<TSourceItem>>> comparerExpression)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				source: source,
				mode: MinimazingOrMaximazingMode.Maximazing,
				comparerScalar: new Computing<System.Collections.Generic.IComparer<TSourceItem>>(comparerExpression),
				defaultValue: default(TSourceItem));
		}

		#endregion
		#region Minimazing

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Minimazing<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 System.Collections.Generic.IComparer<TSourceItem> comparer,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				sourceScalar: sourceScalar,
				mode: MinimazingOrMaximazingMode.Minimazing,
				comparer: comparer,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Minimazing<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 System.Collections.Generic.IComparer<TSourceItem> comparer)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				sourceScalar: sourceScalar,
				mode: MinimazingOrMaximazingMode.Minimazing,
				comparer: comparer,
				defaultValue: default(TSourceItem));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Minimazing<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				sourceScalar: sourceScalar,
				mode: MinimazingOrMaximazingMode.Minimazing,
				comparer: null,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Minimazing<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				sourceScalar: sourceScalar,
				mode: MinimazingOrMaximazingMode.Minimazing,
				comparer: null,
				defaultValue: default(TSourceItem));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Minimazing<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 System.Collections.Generic.IComparer<TSourceItem> comparer,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				sourceScalar: sourceScalar,
				mode: MinimazingOrMaximazingMode.Minimazing,
				comparer: comparer,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Minimazing<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 System.Collections.Generic.IComparer<TSourceItem> comparer)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				sourceScalar: sourceScalar,
				mode: MinimazingOrMaximazingMode.Minimazing,
				comparer: comparer,
				defaultValue: default(TSourceItem));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Minimazing<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				sourceScalar: sourceScalar,
				mode: MinimazingOrMaximazingMode.Minimazing,
				comparer: null,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Minimazing<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				sourceScalar: sourceScalar,
				mode: MinimazingOrMaximazingMode.Minimazing,
				comparer: null,
				defaultValue: default(TSourceItem));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Minimazing<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 System.Collections.Generic.IComparer<TSourceItem> comparer,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				mode: MinimazingOrMaximazingMode.Minimazing,
				comparer: comparer,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Minimazing<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 System.Collections.Generic.IComparer<TSourceItem> comparer)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				mode: MinimazingOrMaximazingMode.Minimazing,
				comparer: comparer,
				defaultValue: default(TSourceItem));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Minimazing<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				mode: MinimazingOrMaximazingMode.Minimazing,
				comparer: null,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Minimazing<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				mode: MinimazingOrMaximazingMode.Minimazing,
				comparer: null,
				defaultValue: default(TSourceItem));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Minimazing<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 System.Collections.Generic.IComparer<TSourceItem> comparer,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				mode: MinimazingOrMaximazingMode.Minimazing,
				comparer: comparer,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Minimazing<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 System.Collections.Generic.IComparer<TSourceItem> comparer)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				mode: MinimazingOrMaximazingMode.Minimazing,
				comparer: comparer,
				defaultValue: default(TSourceItem));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Minimazing<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				mode: MinimazingOrMaximazingMode.Minimazing,
				comparer: null,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Minimazing<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				mode: MinimazingOrMaximazingMode.Minimazing,
				comparer: null,
				defaultValue: default(TSourceItem));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Minimazing<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IComparer<TSourceItem>> comparerScalar,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				sourceScalar: sourceScalar,
				mode: MinimazingOrMaximazingMode.Minimazing,
				comparerScalar: comparerScalar,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Minimazing<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IComparer<TSourceItem>> comparerScalar)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				sourceScalar: sourceScalar,
				mode: MinimazingOrMaximazingMode.Minimazing,
				comparerScalar: comparerScalar,
				defaultValue: default(TSourceItem));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Minimazing<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 Expression<Func<System.Collections.Generic.IComparer<TSourceItem>>> comparerExpression,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				sourceScalar: sourceScalar,
				mode: MinimazingOrMaximazingMode.Minimazing,
				comparerScalar: new Computing<System.Collections.Generic.IComparer<TSourceItem>>(comparerExpression),
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Minimazing<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 Expression<Func<System.Collections.Generic.IComparer<TSourceItem>>> comparerExpression)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				sourceScalar: sourceScalar,
				mode: MinimazingOrMaximazingMode.Minimazing,
				comparerScalar: new Computing<System.Collections.Generic.IComparer<TSourceItem>>(comparerExpression),
				defaultValue: default(TSourceItem));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Minimazing<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IComparer<TSourceItem>> comparerScalar,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				sourceScalar: sourceScalar,
				mode: MinimazingOrMaximazingMode.Minimazing,
				comparerScalar: comparerScalar,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Minimazing<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IComparer<TSourceItem>> comparerScalar)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				sourceScalar: sourceScalar,
				mode: MinimazingOrMaximazingMode.Minimazing,
				comparerScalar: comparerScalar,
				defaultValue: default(TSourceItem));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Minimazing<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 Expression<Func<System.Collections.Generic.IComparer<TSourceItem>>> comparerExpression,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				sourceScalar: sourceScalar,
				mode: MinimazingOrMaximazingMode.Minimazing,
				comparerScalar: new Computing<System.Collections.Generic.IComparer<TSourceItem>>(comparerExpression),
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Minimazing<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 Expression<Func<System.Collections.Generic.IComparer<TSourceItem>>> comparerExpression)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				sourceScalar: sourceScalar,
				mode: MinimazingOrMaximazingMode.Minimazing,
				comparerScalar: new Computing<System.Collections.Generic.IComparer<TSourceItem>>(comparerExpression),
				defaultValue: default(TSourceItem));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Minimazing<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IComparer<TSourceItem>> comparerScalar,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				mode: MinimazingOrMaximazingMode.Minimazing,
				comparerScalar: comparerScalar,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Minimazing<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IComparer<TSourceItem>> comparerScalar)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				mode: MinimazingOrMaximazingMode.Minimazing,
				comparerScalar: comparerScalar,
				defaultValue: default(TSourceItem));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Minimazing<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 Expression<Func<System.Collections.Generic.IComparer<TSourceItem>>> comparerExpression,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				mode: MinimazingOrMaximazingMode.Minimazing,
				comparerScalar: new Computing<System.Collections.Generic.IComparer<TSourceItem>>(comparerExpression),
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Minimazing<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 Expression<Func<System.Collections.Generic.IComparer<TSourceItem>>> comparerExpression)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				mode: MinimazingOrMaximazingMode.Minimazing,
				comparerScalar: new Computing<System.Collections.Generic.IComparer<TSourceItem>>(comparerExpression),
				defaultValue: default(TSourceItem));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Minimazing<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IComparer<TSourceItem>> comparerScalar,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				mode: MinimazingOrMaximazingMode.Minimazing,
				comparerScalar: comparerScalar,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Minimazing<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IComparer<TSourceItem>> comparerScalar)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				mode: MinimazingOrMaximazingMode.Minimazing,
				comparerScalar: comparerScalar,
				defaultValue: default(TSourceItem));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Minimazing<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 Expression<Func<System.Collections.Generic.IComparer<TSourceItem>>> comparerExpression,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				mode: MinimazingOrMaximazingMode.Minimazing,
				comparerScalar: new Computing<System.Collections.Generic.IComparer<TSourceItem>>(comparerExpression),
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Minimazing<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 Expression<Func<System.Collections.Generic.IComparer<TSourceItem>>> comparerExpression)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				mode: MinimazingOrMaximazingMode.Minimazing,
				comparerScalar: new Computing<System.Collections.Generic.IComparer<TSourceItem>>(comparerExpression),
				defaultValue: default(TSourceItem));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Minimazing<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 System.Collections.Generic.IComparer<TSourceItem> comparer,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				source: source,
				mode: MinimazingOrMaximazingMode.Minimazing,
				comparer: comparer,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Minimazing<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 System.Collections.Generic.IComparer<TSourceItem> comparer)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				source: source,
				mode: MinimazingOrMaximazingMode.Minimazing,
				comparer: comparer,
				defaultValue: default(TSourceItem));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Minimazing<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				source: source,
				mode: MinimazingOrMaximazingMode.Minimazing,
				comparer: null,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Minimazing<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				source: source,
				mode: MinimazingOrMaximazingMode.Minimazing,
				comparer: null,
				defaultValue: default(TSourceItem));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Minimazing<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 System.Collections.Generic.IComparer<TSourceItem> comparer,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				source: source,
				mode: MinimazingOrMaximazingMode.Minimazing,
				comparer: comparer,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Minimazing<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 System.Collections.Generic.IComparer<TSourceItem> comparer)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				source: source,
				mode: MinimazingOrMaximazingMode.Minimazing,
				comparer: comparer,
				defaultValue: default(TSourceItem));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Minimazing<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				source: source,
				mode: MinimazingOrMaximazingMode.Minimazing,
				comparer: null,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Minimazing<TSourceItem>(this
			 ObservableCollection<TSourceItem> source)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				source: source,
				mode: MinimazingOrMaximazingMode.Minimazing,
				comparer: null,
				defaultValue: default(TSourceItem));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Minimazing<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IComparer<TSourceItem>> comparerScalar,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				source: source,
				mode: MinimazingOrMaximazingMode.Minimazing,
				comparerScalar: comparerScalar,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Minimazing<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IComparer<TSourceItem>> comparerScalar)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				source: source,
				mode: MinimazingOrMaximazingMode.Minimazing,
				comparerScalar: comparerScalar,
				defaultValue: default(TSourceItem));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Minimazing<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 Expression<Func<System.Collections.Generic.IComparer<TSourceItem>>> comparerExpression,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				source: source,
				mode: MinimazingOrMaximazingMode.Minimazing,
				comparerScalar: new Computing<System.Collections.Generic.IComparer<TSourceItem>>(comparerExpression),
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Minimazing<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 Expression<Func<System.Collections.Generic.IComparer<TSourceItem>>> comparerExpression)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				source: source,
				mode: MinimazingOrMaximazingMode.Minimazing,
				comparerScalar: new Computing<System.Collections.Generic.IComparer<TSourceItem>>(comparerExpression),
				defaultValue: default(TSourceItem));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Minimazing<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IComparer<TSourceItem>> comparerScalar,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				source: source,
				mode: MinimazingOrMaximazingMode.Minimazing,
				comparerScalar: comparerScalar,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Minimazing<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IComparer<TSourceItem>> comparerScalar)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				source: source,
				mode: MinimazingOrMaximazingMode.Minimazing,
				comparerScalar: comparerScalar,
				defaultValue: default(TSourceItem));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Minimazing<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 Expression<Func<System.Collections.Generic.IComparer<TSourceItem>>> comparerExpression,
			 TSourceItem defaultValue)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				source: source,
				mode: MinimazingOrMaximazingMode.Minimazing,
				comparerScalar: new Computing<System.Collections.Generic.IComparer<TSourceItem>>(comparerExpression),
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.MinimazingOrMaximazing<TSourceItem> Minimazing<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 Expression<Func<System.Collections.Generic.IComparer<TSourceItem>>> comparerExpression)
			
		{
			return new ObservableComputations.MinimazingOrMaximazing<TSourceItem>(
				source: source,
				mode: MinimazingOrMaximazingMode.Minimazing,
				comparerScalar: new Computing<System.Collections.Generic.IComparer<TSourceItem>>(comparerExpression),
				defaultValue: default(TSourceItem));
		}

		#endregion
		#region OfTypeComputing

		[ObservableComputationsCall]
		public static ObservableComputations.OfTypeComputing<TResultItem> OfTypeComputing<TResultItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar)
			
		{
			return new ObservableComputations.OfTypeComputing<TResultItem>(
				sourceScalar: sourceScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.OfTypeComputing<TResultItem> OfTypeComputing<TResultItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression)
			
		{
			return new ObservableComputations.OfTypeComputing<TResultItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.OfTypeComputing<TResultItem> OfTypeComputing<TResultItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source)
			
		{
			return new ObservableComputations.OfTypeComputing<TResultItem>(
				source: source);
		}

		#endregion
		#region Ordering

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 ObservableComputations.IReadScalar<System.ComponentModel.ListSortDirection> sortDirectionScalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IComparer<TOrderingValue>> comparerScalar)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				source: source,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: sortDirectionScalar,
				comparerScalar: comparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 ObservableComputations.IReadScalar<System.ComponentModel.ListSortDirection> sortDirectionScalar)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				source: source,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: sortDirectionScalar,
				comparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 ObservableComputations.IReadScalar<System.ComponentModel.ListSortDirection> sortDirectionScalar,
			 Expression<Func<System.Collections.Generic.IComparer<TOrderingValue>>> comparerExpression)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				source: source,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: sortDirectionScalar,
				comparerScalar: new Computing<System.Collections.Generic.IComparer<TOrderingValue>>(comparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IComparer<TOrderingValue>> comparerScalar)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				source: source,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: null,
				comparerScalar: comparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				source: source,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: null,
				comparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 Expression<Func<System.Collections.Generic.IComparer<TOrderingValue>>> comparerExpression)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				source: source,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: null,
				comparerScalar: new Computing<System.Collections.Generic.IComparer<TOrderingValue>>(comparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 Expression<Func<System.ComponentModel.ListSortDirection>> sortDirectionExpression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IComparer<TOrderingValue>> comparerScalar)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				source: source,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: new Computing<System.ComponentModel.ListSortDirection>(sortDirectionExpression),
				comparerScalar: comparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 Expression<Func<System.ComponentModel.ListSortDirection>> sortDirectionExpression)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				source: source,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: new Computing<System.ComponentModel.ListSortDirection>(sortDirectionExpression),
				comparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 Expression<Func<System.ComponentModel.ListSortDirection>> sortDirectionExpression,
			 Expression<Func<System.Collections.Generic.IComparer<TOrderingValue>>> comparerExpression)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				source: source,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: new Computing<System.ComponentModel.ListSortDirection>(sortDirectionExpression),
				comparerScalar: new Computing<System.Collections.Generic.IComparer<TOrderingValue>>(comparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 ObservableCollection<TSourceItem> source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 ObservableComputations.IReadScalar<System.ComponentModel.ListSortDirection> sortDirectionScalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IComparer<TOrderingValue>> comparerScalar)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				source: source,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: sortDirectionScalar,
				comparerScalar: comparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 ObservableCollection<TSourceItem> source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 ObservableComputations.IReadScalar<System.ComponentModel.ListSortDirection> sortDirectionScalar)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				source: source,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: sortDirectionScalar,
				comparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 ObservableCollection<TSourceItem> source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 ObservableComputations.IReadScalar<System.ComponentModel.ListSortDirection> sortDirectionScalar,
			 Expression<Func<System.Collections.Generic.IComparer<TOrderingValue>>> comparerExpression)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				source: source,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: sortDirectionScalar,
				comparerScalar: new Computing<System.Collections.Generic.IComparer<TOrderingValue>>(comparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 ObservableCollection<TSourceItem> source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IComparer<TOrderingValue>> comparerScalar)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				source: source,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: null,
				comparerScalar: comparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 ObservableCollection<TSourceItem> source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				source: source,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: null,
				comparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 ObservableCollection<TSourceItem> source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 Expression<Func<System.Collections.Generic.IComparer<TOrderingValue>>> comparerExpression)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				source: source,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: null,
				comparerScalar: new Computing<System.Collections.Generic.IComparer<TOrderingValue>>(comparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 ObservableCollection<TSourceItem> source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 Expression<Func<System.ComponentModel.ListSortDirection>> sortDirectionExpression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IComparer<TOrderingValue>> comparerScalar)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				source: source,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: new Computing<System.ComponentModel.ListSortDirection>(sortDirectionExpression),
				comparerScalar: comparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 ObservableCollection<TSourceItem> source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 Expression<Func<System.ComponentModel.ListSortDirection>> sortDirectionExpression)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				source: source,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: new Computing<System.ComponentModel.ListSortDirection>(sortDirectionExpression),
				comparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 ObservableCollection<TSourceItem> source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 Expression<Func<System.ComponentModel.ListSortDirection>> sortDirectionExpression,
			 Expression<Func<System.Collections.Generic.IComparer<TOrderingValue>>> comparerExpression)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				source: source,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: new Computing<System.ComponentModel.ListSortDirection>(sortDirectionExpression),
				comparerScalar: new Computing<System.Collections.Generic.IComparer<TOrderingValue>>(comparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 System.ComponentModel.ListSortDirection sortDirection,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IComparer<TOrderingValue>> comparerScalar)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				source: source,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirection: sortDirection,
				comparerScalar: comparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 System.ComponentModel.ListSortDirection sortDirection)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				source: source,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirection: sortDirection,
				comparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 System.ComponentModel.ListSortDirection sortDirection,
			 Expression<Func<System.Collections.Generic.IComparer<TOrderingValue>>> comparerExpression)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				source: source,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirection: sortDirection,
				comparerScalar: new Computing<System.Collections.Generic.IComparer<TOrderingValue>>(comparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 ObservableCollection<TSourceItem> source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 System.ComponentModel.ListSortDirection sortDirection,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IComparer<TOrderingValue>> comparerScalar)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				source: source,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirection: sortDirection,
				comparerScalar: comparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 ObservableCollection<TSourceItem> source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 System.ComponentModel.ListSortDirection sortDirection)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				source: source,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirection: sortDirection,
				comparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 ObservableCollection<TSourceItem> source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 System.ComponentModel.ListSortDirection sortDirection,
			 Expression<Func<System.Collections.Generic.IComparer<TOrderingValue>>> comparerExpression)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				source: source,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirection: sortDirection,
				comparerScalar: new Computing<System.Collections.Generic.IComparer<TOrderingValue>>(comparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 ObservableComputations.IReadScalar<System.ComponentModel.ListSortDirection> sortDirectionScalar,
			 System.Collections.Generic.IComparer<TOrderingValue> comparer)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				source: source,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: sortDirectionScalar,
				comparer: comparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 System.Collections.Generic.IComparer<TOrderingValue> comparer)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				source: source,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: null,
				comparer: comparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 Expression<Func<System.ComponentModel.ListSortDirection>> sortDirectionExpression,
			 System.Collections.Generic.IComparer<TOrderingValue> comparer)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				source: source,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: new Computing<System.ComponentModel.ListSortDirection>(sortDirectionExpression),
				comparer: comparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 ObservableCollection<TSourceItem> source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 ObservableComputations.IReadScalar<System.ComponentModel.ListSortDirection> sortDirectionScalar,
			 System.Collections.Generic.IComparer<TOrderingValue> comparer)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				source: source,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: sortDirectionScalar,
				comparer: comparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 ObservableCollection<TSourceItem> source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 System.Collections.Generic.IComparer<TOrderingValue> comparer)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				source: source,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: null,
				comparer: comparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 ObservableCollection<TSourceItem> source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 Expression<Func<System.ComponentModel.ListSortDirection>> sortDirectionExpression,
			 System.Collections.Generic.IComparer<TOrderingValue> comparer)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				source: source,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: new Computing<System.ComponentModel.ListSortDirection>(sortDirectionExpression),
				comparer: comparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 System.ComponentModel.ListSortDirection sortDirection,
			 System.Collections.Generic.IComparer<TOrderingValue> comparer)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				source: source,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirection: sortDirection,
				comparer: comparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 ObservableCollection<TSourceItem> source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 System.ComponentModel.ListSortDirection sortDirection,
			 System.Collections.Generic.IComparer<TOrderingValue> comparer)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				source: source,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirection: sortDirection,
				comparer: comparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 ObservableComputations.IReadScalar<System.ComponentModel.ListSortDirection> sortDirectionScalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IComparer<TOrderingValue>> comparerScalar)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				sourceScalar: sourceScalar,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: sortDirectionScalar,
				comparerScalar: comparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 ObservableComputations.IReadScalar<System.ComponentModel.ListSortDirection> sortDirectionScalar)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				sourceScalar: sourceScalar,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: sortDirectionScalar,
				comparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 ObservableComputations.IReadScalar<System.ComponentModel.ListSortDirection> sortDirectionScalar,
			 Expression<Func<System.Collections.Generic.IComparer<TOrderingValue>>> comparerExpression)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				sourceScalar: sourceScalar,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: sortDirectionScalar,
				comparerScalar: new Computing<System.Collections.Generic.IComparer<TOrderingValue>>(comparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IComparer<TOrderingValue>> comparerScalar)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				sourceScalar: sourceScalar,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: null,
				comparerScalar: comparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				sourceScalar: sourceScalar,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: null,
				comparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 Expression<Func<System.Collections.Generic.IComparer<TOrderingValue>>> comparerExpression)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				sourceScalar: sourceScalar,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: null,
				comparerScalar: new Computing<System.Collections.Generic.IComparer<TOrderingValue>>(comparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 Expression<Func<System.ComponentModel.ListSortDirection>> sortDirectionExpression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IComparer<TOrderingValue>> comparerScalar)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				sourceScalar: sourceScalar,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: new Computing<System.ComponentModel.ListSortDirection>(sortDirectionExpression),
				comparerScalar: comparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 Expression<Func<System.ComponentModel.ListSortDirection>> sortDirectionExpression)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				sourceScalar: sourceScalar,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: new Computing<System.ComponentModel.ListSortDirection>(sortDirectionExpression),
				comparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 Expression<Func<System.ComponentModel.ListSortDirection>> sortDirectionExpression,
			 Expression<Func<System.Collections.Generic.IComparer<TOrderingValue>>> comparerExpression)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				sourceScalar: sourceScalar,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: new Computing<System.ComponentModel.ListSortDirection>(sortDirectionExpression),
				comparerScalar: new Computing<System.Collections.Generic.IComparer<TOrderingValue>>(comparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 ObservableComputations.IReadScalar<System.ComponentModel.ListSortDirection> sortDirectionScalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IComparer<TOrderingValue>> comparerScalar)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				sourceScalar: sourceScalar,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: sortDirectionScalar,
				comparerScalar: comparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 ObservableComputations.IReadScalar<System.ComponentModel.ListSortDirection> sortDirectionScalar)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				sourceScalar: sourceScalar,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: sortDirectionScalar,
				comparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 ObservableComputations.IReadScalar<System.ComponentModel.ListSortDirection> sortDirectionScalar,
			 Expression<Func<System.Collections.Generic.IComparer<TOrderingValue>>> comparerExpression)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				sourceScalar: sourceScalar,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: sortDirectionScalar,
				comparerScalar: new Computing<System.Collections.Generic.IComparer<TOrderingValue>>(comparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IComparer<TOrderingValue>> comparerScalar)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				sourceScalar: sourceScalar,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: null,
				comparerScalar: comparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				sourceScalar: sourceScalar,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: null,
				comparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 Expression<Func<System.Collections.Generic.IComparer<TOrderingValue>>> comparerExpression)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				sourceScalar: sourceScalar,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: null,
				comparerScalar: new Computing<System.Collections.Generic.IComparer<TOrderingValue>>(comparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 Expression<Func<System.ComponentModel.ListSortDirection>> sortDirectionExpression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IComparer<TOrderingValue>> comparerScalar)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				sourceScalar: sourceScalar,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: new Computing<System.ComponentModel.ListSortDirection>(sortDirectionExpression),
				comparerScalar: comparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 Expression<Func<System.ComponentModel.ListSortDirection>> sortDirectionExpression)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				sourceScalar: sourceScalar,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: new Computing<System.ComponentModel.ListSortDirection>(sortDirectionExpression),
				comparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 Expression<Func<System.ComponentModel.ListSortDirection>> sortDirectionExpression,
			 Expression<Func<System.Collections.Generic.IComparer<TOrderingValue>>> comparerExpression)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				sourceScalar: sourceScalar,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: new Computing<System.ComponentModel.ListSortDirection>(sortDirectionExpression),
				comparerScalar: new Computing<System.Collections.Generic.IComparer<TOrderingValue>>(comparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 ObservableComputations.IReadScalar<System.ComponentModel.ListSortDirection> sortDirectionScalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IComparer<TOrderingValue>> comparerScalar)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: sortDirectionScalar,
				comparerScalar: comparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 ObservableComputations.IReadScalar<System.ComponentModel.ListSortDirection> sortDirectionScalar)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: sortDirectionScalar,
				comparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 ObservableComputations.IReadScalar<System.ComponentModel.ListSortDirection> sortDirectionScalar,
			 Expression<Func<System.Collections.Generic.IComparer<TOrderingValue>>> comparerExpression)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: sortDirectionScalar,
				comparerScalar: new Computing<System.Collections.Generic.IComparer<TOrderingValue>>(comparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IComparer<TOrderingValue>> comparerScalar)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: null,
				comparerScalar: comparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: null,
				comparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 Expression<Func<System.Collections.Generic.IComparer<TOrderingValue>>> comparerExpression)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: null,
				comparerScalar: new Computing<System.Collections.Generic.IComparer<TOrderingValue>>(comparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 Expression<Func<System.ComponentModel.ListSortDirection>> sortDirectionExpression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IComparer<TOrderingValue>> comparerScalar)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: new Computing<System.ComponentModel.ListSortDirection>(sortDirectionExpression),
				comparerScalar: comparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 Expression<Func<System.ComponentModel.ListSortDirection>> sortDirectionExpression)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: new Computing<System.ComponentModel.ListSortDirection>(sortDirectionExpression),
				comparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 Expression<Func<System.ComponentModel.ListSortDirection>> sortDirectionExpression,
			 Expression<Func<System.Collections.Generic.IComparer<TOrderingValue>>> comparerExpression)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: new Computing<System.ComponentModel.ListSortDirection>(sortDirectionExpression),
				comparerScalar: new Computing<System.Collections.Generic.IComparer<TOrderingValue>>(comparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 ObservableComputations.IReadScalar<System.ComponentModel.ListSortDirection> sortDirectionScalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IComparer<TOrderingValue>> comparerScalar)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: sortDirectionScalar,
				comparerScalar: comparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 ObservableComputations.IReadScalar<System.ComponentModel.ListSortDirection> sortDirectionScalar)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: sortDirectionScalar,
				comparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 ObservableComputations.IReadScalar<System.ComponentModel.ListSortDirection> sortDirectionScalar,
			 Expression<Func<System.Collections.Generic.IComparer<TOrderingValue>>> comparerExpression)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: sortDirectionScalar,
				comparerScalar: new Computing<System.Collections.Generic.IComparer<TOrderingValue>>(comparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IComparer<TOrderingValue>> comparerScalar)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: null,
				comparerScalar: comparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: null,
				comparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 Expression<Func<System.Collections.Generic.IComparer<TOrderingValue>>> comparerExpression)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: null,
				comparerScalar: new Computing<System.Collections.Generic.IComparer<TOrderingValue>>(comparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 Expression<Func<System.ComponentModel.ListSortDirection>> sortDirectionExpression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IComparer<TOrderingValue>> comparerScalar)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: new Computing<System.ComponentModel.ListSortDirection>(sortDirectionExpression),
				comparerScalar: comparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 Expression<Func<System.ComponentModel.ListSortDirection>> sortDirectionExpression)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: new Computing<System.ComponentModel.ListSortDirection>(sortDirectionExpression),
				comparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 Expression<Func<System.ComponentModel.ListSortDirection>> sortDirectionExpression,
			 Expression<Func<System.Collections.Generic.IComparer<TOrderingValue>>> comparerExpression)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: new Computing<System.ComponentModel.ListSortDirection>(sortDirectionExpression),
				comparerScalar: new Computing<System.Collections.Generic.IComparer<TOrderingValue>>(comparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 System.ComponentModel.ListSortDirection sortDirection,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IComparer<TOrderingValue>> comparerScalar)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				sourceScalar: sourceScalar,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirection: sortDirection,
				comparerScalar: comparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 System.ComponentModel.ListSortDirection sortDirection)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				sourceScalar: sourceScalar,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirection: sortDirection,
				comparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 System.ComponentModel.ListSortDirection sortDirection,
			 Expression<Func<System.Collections.Generic.IComparer<TOrderingValue>>> comparerExpression)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				sourceScalar: sourceScalar,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirection: sortDirection,
				comparerScalar: new Computing<System.Collections.Generic.IComparer<TOrderingValue>>(comparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 System.ComponentModel.ListSortDirection sortDirection,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IComparer<TOrderingValue>> comparerScalar)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				sourceScalar: sourceScalar,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirection: sortDirection,
				comparerScalar: comparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 System.ComponentModel.ListSortDirection sortDirection)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				sourceScalar: sourceScalar,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirection: sortDirection,
				comparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 System.ComponentModel.ListSortDirection sortDirection,
			 Expression<Func<System.Collections.Generic.IComparer<TOrderingValue>>> comparerExpression)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				sourceScalar: sourceScalar,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirection: sortDirection,
				comparerScalar: new Computing<System.Collections.Generic.IComparer<TOrderingValue>>(comparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 System.ComponentModel.ListSortDirection sortDirection,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IComparer<TOrderingValue>> comparerScalar)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirection: sortDirection,
				comparerScalar: comparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 System.ComponentModel.ListSortDirection sortDirection)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirection: sortDirection,
				comparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 System.ComponentModel.ListSortDirection sortDirection,
			 Expression<Func<System.Collections.Generic.IComparer<TOrderingValue>>> comparerExpression)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirection: sortDirection,
				comparerScalar: new Computing<System.Collections.Generic.IComparer<TOrderingValue>>(comparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 System.ComponentModel.ListSortDirection sortDirection,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IComparer<TOrderingValue>> comparerScalar)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirection: sortDirection,
				comparerScalar: comparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 System.ComponentModel.ListSortDirection sortDirection)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirection: sortDirection,
				comparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 System.ComponentModel.ListSortDirection sortDirection,
			 Expression<Func<System.Collections.Generic.IComparer<TOrderingValue>>> comparerExpression)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirection: sortDirection,
				comparerScalar: new Computing<System.Collections.Generic.IComparer<TOrderingValue>>(comparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 ObservableComputations.IReadScalar<System.ComponentModel.ListSortDirection> sortDirectionScalar,
			 System.Collections.Generic.IComparer<TOrderingValue> comparer)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				sourceScalar: sourceScalar,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: sortDirectionScalar,
				comparer: comparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 System.Collections.Generic.IComparer<TOrderingValue> comparer)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				sourceScalar: sourceScalar,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: null,
				comparer: comparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 Expression<Func<System.ComponentModel.ListSortDirection>> sortDirectionExpression,
			 System.Collections.Generic.IComparer<TOrderingValue> comparer)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				sourceScalar: sourceScalar,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: new Computing<System.ComponentModel.ListSortDirection>(sortDirectionExpression),
				comparer: comparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 ObservableComputations.IReadScalar<System.ComponentModel.ListSortDirection> sortDirectionScalar,
			 System.Collections.Generic.IComparer<TOrderingValue> comparer)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				sourceScalar: sourceScalar,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: sortDirectionScalar,
				comparer: comparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 System.Collections.Generic.IComparer<TOrderingValue> comparer)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				sourceScalar: sourceScalar,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: null,
				comparer: comparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 Expression<Func<System.ComponentModel.ListSortDirection>> sortDirectionExpression,
			 System.Collections.Generic.IComparer<TOrderingValue> comparer)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				sourceScalar: sourceScalar,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: new Computing<System.ComponentModel.ListSortDirection>(sortDirectionExpression),
				comparer: comparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 ObservableComputations.IReadScalar<System.ComponentModel.ListSortDirection> sortDirectionScalar,
			 System.Collections.Generic.IComparer<TOrderingValue> comparer)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: sortDirectionScalar,
				comparer: comparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 System.Collections.Generic.IComparer<TOrderingValue> comparer)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: null,
				comparer: comparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 Expression<Func<System.ComponentModel.ListSortDirection>> sortDirectionExpression,
			 System.Collections.Generic.IComparer<TOrderingValue> comparer)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: new Computing<System.ComponentModel.ListSortDirection>(sortDirectionExpression),
				comparer: comparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 ObservableComputations.IReadScalar<System.ComponentModel.ListSortDirection> sortDirectionScalar,
			 System.Collections.Generic.IComparer<TOrderingValue> comparer)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: sortDirectionScalar,
				comparer: comparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 System.Collections.Generic.IComparer<TOrderingValue> comparer)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: null,
				comparer: comparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 Expression<Func<System.ComponentModel.ListSortDirection>> sortDirectionExpression,
			 System.Collections.Generic.IComparer<TOrderingValue> comparer)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: new Computing<System.ComponentModel.ListSortDirection>(sortDirectionExpression),
				comparer: comparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 System.ComponentModel.ListSortDirection sortDirection,
			 System.Collections.Generic.IComparer<TOrderingValue> comparer)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				sourceScalar: sourceScalar,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirection: sortDirection,
				comparer: comparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 System.ComponentModel.ListSortDirection sortDirection,
			 System.Collections.Generic.IComparer<TOrderingValue> comparer)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				sourceScalar: sourceScalar,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirection: sortDirection,
				comparer: comparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 System.ComponentModel.ListSortDirection sortDirection,
			 System.Collections.Generic.IComparer<TOrderingValue> comparer)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirection: sortDirection,
				comparer: comparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Ordering<TSourceItem, TOrderingValue> Ordering<TSourceItem, TOrderingValue>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 System.ComponentModel.ListSortDirection sortDirection,
			 System.Collections.Generic.IComparer<TOrderingValue> comparer)
			
		{
			return new ObservableComputations.Ordering<TSourceItem, TOrderingValue>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirection: sortDirection,
				comparer: comparer);
		}

		#endregion
		#region Paging

		[ObservableComputationsCall]
		public static ObservableComputations.Paging<TSourceItem> Paging<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 int pageSize,
			 int initialPage)
			
		{
			return new ObservableComputations.Paging<TSourceItem>(
				source: source,
				pageSize: pageSize,
				initialPage: initialPage);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Paging<TSourceItem> Paging<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 int pageSize)
			
		{
			return new ObservableComputations.Paging<TSourceItem>(
				source: source,
				pageSize: pageSize,
				initialPage: 1);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Paging<TSourceItem> Paging<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 int pageSize,
			 int initialPage)
			
		{
			return new ObservableComputations.Paging<TSourceItem>(
				source: source,
				pageSize: pageSize,
				initialPage: initialPage);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Paging<TSourceItem> Paging<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 int pageSize)
			
		{
			return new ObservableComputations.Paging<TSourceItem>(
				source: source,
				pageSize: pageSize,
				initialPage: 1);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Paging<TSourceItem> Paging<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 int pageSize,
			 int initialPage)
			
		{
			return new ObservableComputations.Paging<TSourceItem>(
				sourceScalar: sourceScalar,
				pageSize: pageSize,
				initialPage: initialPage);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Paging<TSourceItem> Paging<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 int pageSize)
			
		{
			return new ObservableComputations.Paging<TSourceItem>(
				sourceScalar: sourceScalar,
				pageSize: pageSize,
				initialPage: 1);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Paging<TSourceItem> Paging<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 int pageSize,
			 int initialPage)
			
		{
			return new ObservableComputations.Paging<TSourceItem>(
				sourceScalar: sourceScalar,
				pageSize: pageSize,
				initialPage: initialPage);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Paging<TSourceItem> Paging<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 int pageSize)
			
		{
			return new ObservableComputations.Paging<TSourceItem>(
				sourceScalar: sourceScalar,
				pageSize: pageSize,
				initialPage: 1);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Paging<TSourceItem> Paging<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 int pageSize,
			 int initialPage)
			
		{
			return new ObservableComputations.Paging<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				pageSize: pageSize,
				initialPage: initialPage);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Paging<TSourceItem> Paging<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 int pageSize)
			
		{
			return new ObservableComputations.Paging<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				pageSize: pageSize,
				initialPage: 1);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Paging<TSourceItem> Paging<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 int pageSize,
			 int initialPage)
			
		{
			return new ObservableComputations.Paging<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				pageSize: pageSize,
				initialPage: initialPage);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Paging<TSourceItem> Paging<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 int pageSize)
			
		{
			return new ObservableComputations.Paging<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				pageSize: pageSize,
				initialPage: 1);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Paging<TSourceItem> Paging<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 ObservableComputations.IReadScalar<int> pageSizeScalar,
			 int initialPage)
			
		{
			return new ObservableComputations.Paging<TSourceItem>(
				source: source,
				pageSizeScalar: pageSizeScalar,
				initialPage: initialPage);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Paging<TSourceItem> Paging<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 ObservableComputations.IReadScalar<int> pageSizeScalar)
			
		{
			return new ObservableComputations.Paging<TSourceItem>(
				source: source,
				pageSizeScalar: pageSizeScalar,
				initialPage: 1);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Paging<TSourceItem> Paging<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 Expression<Func<int>> pageSizeExpression,
			 int initialPage)
			
		{
			return new ObservableComputations.Paging<TSourceItem>(
				source: source,
				pageSizeScalar: new Computing<int>(pageSizeExpression),
				initialPage: initialPage);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Paging<TSourceItem> Paging<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 Expression<Func<int>> pageSizeExpression)
			
		{
			return new ObservableComputations.Paging<TSourceItem>(
				source: source,
				pageSizeScalar: new Computing<int>(pageSizeExpression),
				initialPage: 1);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Paging<TSourceItem> Paging<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 ObservableComputations.IReadScalar<int> pageSizeScalar,
			 int initialPage)
			
		{
			return new ObservableComputations.Paging<TSourceItem>(
				source: source,
				pageSizeScalar: pageSizeScalar,
				initialPage: initialPage);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Paging<TSourceItem> Paging<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 ObservableComputations.IReadScalar<int> pageSizeScalar)
			
		{
			return new ObservableComputations.Paging<TSourceItem>(
				source: source,
				pageSizeScalar: pageSizeScalar,
				initialPage: 1);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Paging<TSourceItem> Paging<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 Expression<Func<int>> pageSizeExpression,
			 int initialPage)
			
		{
			return new ObservableComputations.Paging<TSourceItem>(
				source: source,
				pageSizeScalar: new Computing<int>(pageSizeExpression),
				initialPage: initialPage);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Paging<TSourceItem> Paging<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 Expression<Func<int>> pageSizeExpression)
			
		{
			return new ObservableComputations.Paging<TSourceItem>(
				source: source,
				pageSizeScalar: new Computing<int>(pageSizeExpression),
				initialPage: 1);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Paging<TSourceItem> Paging<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 ObservableComputations.IReadScalar<int> pageSizeScalar,
			 int initialPage)
			
		{
			return new ObservableComputations.Paging<TSourceItem>(
				sourceScalar: sourceScalar,
				pageSizeScalar: pageSizeScalar,
				initialPage: initialPage);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Paging<TSourceItem> Paging<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 ObservableComputations.IReadScalar<int> pageSizeScalar)
			
		{
			return new ObservableComputations.Paging<TSourceItem>(
				sourceScalar: sourceScalar,
				pageSizeScalar: pageSizeScalar,
				initialPage: 1);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Paging<TSourceItem> Paging<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 Expression<Func<int>> pageSizeExpression,
			 int initialPage)
			
		{
			return new ObservableComputations.Paging<TSourceItem>(
				sourceScalar: sourceScalar,
				pageSizeScalar: new Computing<int>(pageSizeExpression),
				initialPage: initialPage);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Paging<TSourceItem> Paging<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 Expression<Func<int>> pageSizeExpression)
			
		{
			return new ObservableComputations.Paging<TSourceItem>(
				sourceScalar: sourceScalar,
				pageSizeScalar: new Computing<int>(pageSizeExpression),
				initialPage: 1);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Paging<TSourceItem> Paging<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 ObservableComputations.IReadScalar<int> pageSizeScalar,
			 int initialPage)
			
		{
			return new ObservableComputations.Paging<TSourceItem>(
				sourceScalar: sourceScalar,
				pageSizeScalar: pageSizeScalar,
				initialPage: initialPage);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Paging<TSourceItem> Paging<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 ObservableComputations.IReadScalar<int> pageSizeScalar)
			
		{
			return new ObservableComputations.Paging<TSourceItem>(
				sourceScalar: sourceScalar,
				pageSizeScalar: pageSizeScalar,
				initialPage: 1);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Paging<TSourceItem> Paging<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 Expression<Func<int>> pageSizeExpression,
			 int initialPage)
			
		{
			return new ObservableComputations.Paging<TSourceItem>(
				sourceScalar: sourceScalar,
				pageSizeScalar: new Computing<int>(pageSizeExpression),
				initialPage: initialPage);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Paging<TSourceItem> Paging<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 Expression<Func<int>> pageSizeExpression)
			
		{
			return new ObservableComputations.Paging<TSourceItem>(
				sourceScalar: sourceScalar,
				pageSizeScalar: new Computing<int>(pageSizeExpression),
				initialPage: 1);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Paging<TSourceItem> Paging<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 ObservableComputations.IReadScalar<int> pageSizeScalar,
			 int initialPage)
			
		{
			return new ObservableComputations.Paging<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				pageSizeScalar: pageSizeScalar,
				initialPage: initialPage);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Paging<TSourceItem> Paging<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 ObservableComputations.IReadScalar<int> pageSizeScalar)
			
		{
			return new ObservableComputations.Paging<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				pageSizeScalar: pageSizeScalar,
				initialPage: 1);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Paging<TSourceItem> Paging<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 Expression<Func<int>> pageSizeExpression,
			 int initialPage)
			
		{
			return new ObservableComputations.Paging<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				pageSizeScalar: new Computing<int>(pageSizeExpression),
				initialPage: initialPage);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Paging<TSourceItem> Paging<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 Expression<Func<int>> pageSizeExpression)
			
		{
			return new ObservableComputations.Paging<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				pageSizeScalar: new Computing<int>(pageSizeExpression),
				initialPage: 1);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Paging<TSourceItem> Paging<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 ObservableComputations.IReadScalar<int> pageSizeScalar,
			 int initialPage)
			
		{
			return new ObservableComputations.Paging<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				pageSizeScalar: pageSizeScalar,
				initialPage: initialPage);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Paging<TSourceItem> Paging<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 ObservableComputations.IReadScalar<int> pageSizeScalar)
			
		{
			return new ObservableComputations.Paging<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				pageSizeScalar: pageSizeScalar,
				initialPage: 1);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Paging<TSourceItem> Paging<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 Expression<Func<int>> pageSizeExpression,
			 int initialPage)
			
		{
			return new ObservableComputations.Paging<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				pageSizeScalar: new Computing<int>(pageSizeExpression),
				initialPage: initialPage);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Paging<TSourceItem> Paging<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 Expression<Func<int>> pageSizeExpression)
			
		{
			return new ObservableComputations.Paging<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				pageSizeScalar: new Computing<int>(pageSizeExpression),
				initialPage: 1);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Paging<TSourceItem> Paging<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 ObservableComputations.IReadScalar<int> pageSizeScalar,
			 ObservableComputations.IReadScalar<int> currentPageScalar)
			
		{
			return new ObservableComputations.Paging<TSourceItem>(
				source: source,
				pageSizeScalar: pageSizeScalar,
				currentPageScalar: currentPageScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Paging<TSourceItem> Paging<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 ObservableComputations.IReadScalar<int> pageSizeScalar,
			 Expression<Func<int>> currentPageExpression)
			
		{
			return new ObservableComputations.Paging<TSourceItem>(
				source: source,
				pageSizeScalar: pageSizeScalar,
				currentPageScalar: new Computing<int>(currentPageExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Paging<TSourceItem> Paging<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 Expression<Func<int>> pageSizeExpression,
			 ObservableComputations.IReadScalar<int> currentPageScalar)
			
		{
			return new ObservableComputations.Paging<TSourceItem>(
				source: source,
				pageSizeScalar: new Computing<int>(pageSizeExpression),
				currentPageScalar: currentPageScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Paging<TSourceItem> Paging<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 Expression<Func<int>> pageSizeExpression,
			 Expression<Func<int>> currentPageExpression)
			
		{
			return new ObservableComputations.Paging<TSourceItem>(
				source: source,
				pageSizeScalar: new Computing<int>(pageSizeExpression),
				currentPageScalar: new Computing<int>(currentPageExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Paging<TSourceItem> Paging<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 ObservableComputations.IReadScalar<int> pageSizeScalar,
			 ObservableComputations.IReadScalar<int> currentPageScalar)
			
		{
			return new ObservableComputations.Paging<TSourceItem>(
				source: source,
				pageSizeScalar: pageSizeScalar,
				currentPageScalar: currentPageScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Paging<TSourceItem> Paging<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 ObservableComputations.IReadScalar<int> pageSizeScalar,
			 Expression<Func<int>> currentPageExpression)
			
		{
			return new ObservableComputations.Paging<TSourceItem>(
				source: source,
				pageSizeScalar: pageSizeScalar,
				currentPageScalar: new Computing<int>(currentPageExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Paging<TSourceItem> Paging<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 Expression<Func<int>> pageSizeExpression,
			 ObservableComputations.IReadScalar<int> currentPageScalar)
			
		{
			return new ObservableComputations.Paging<TSourceItem>(
				source: source,
				pageSizeScalar: new Computing<int>(pageSizeExpression),
				currentPageScalar: currentPageScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Paging<TSourceItem> Paging<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 Expression<Func<int>> pageSizeExpression,
			 Expression<Func<int>> currentPageExpression)
			
		{
			return new ObservableComputations.Paging<TSourceItem>(
				source: source,
				pageSizeScalar: new Computing<int>(pageSizeExpression),
				currentPageScalar: new Computing<int>(currentPageExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Paging<TSourceItem> Paging<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 ObservableComputations.IReadScalar<int> pageSizeScalar,
			 ObservableComputations.IReadScalar<int> currentPageScalar)
			
		{
			return new ObservableComputations.Paging<TSourceItem>(
				sourceScalar: sourceScalar,
				pageSizeScalar: pageSizeScalar,
				currentPageScalar: currentPageScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Paging<TSourceItem> Paging<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 ObservableComputations.IReadScalar<int> pageSizeScalar,
			 Expression<Func<int>> currentPageExpression)
			
		{
			return new ObservableComputations.Paging<TSourceItem>(
				sourceScalar: sourceScalar,
				pageSizeScalar: pageSizeScalar,
				currentPageScalar: new Computing<int>(currentPageExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Paging<TSourceItem> Paging<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 Expression<Func<int>> pageSizeExpression,
			 ObservableComputations.IReadScalar<int> currentPageScalar)
			
		{
			return new ObservableComputations.Paging<TSourceItem>(
				sourceScalar: sourceScalar,
				pageSizeScalar: new Computing<int>(pageSizeExpression),
				currentPageScalar: currentPageScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Paging<TSourceItem> Paging<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 Expression<Func<int>> pageSizeExpression,
			 Expression<Func<int>> currentPageExpression)
			
		{
			return new ObservableComputations.Paging<TSourceItem>(
				sourceScalar: sourceScalar,
				pageSizeScalar: new Computing<int>(pageSizeExpression),
				currentPageScalar: new Computing<int>(currentPageExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Paging<TSourceItem> Paging<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 ObservableComputations.IReadScalar<int> pageSizeScalar,
			 ObservableComputations.IReadScalar<int> currentPageScalar)
			
		{
			return new ObservableComputations.Paging<TSourceItem>(
				sourceScalar: sourceScalar,
				pageSizeScalar: pageSizeScalar,
				currentPageScalar: currentPageScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Paging<TSourceItem> Paging<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 ObservableComputations.IReadScalar<int> pageSizeScalar,
			 Expression<Func<int>> currentPageExpression)
			
		{
			return new ObservableComputations.Paging<TSourceItem>(
				sourceScalar: sourceScalar,
				pageSizeScalar: pageSizeScalar,
				currentPageScalar: new Computing<int>(currentPageExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Paging<TSourceItem> Paging<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 Expression<Func<int>> pageSizeExpression,
			 ObservableComputations.IReadScalar<int> currentPageScalar)
			
		{
			return new ObservableComputations.Paging<TSourceItem>(
				sourceScalar: sourceScalar,
				pageSizeScalar: new Computing<int>(pageSizeExpression),
				currentPageScalar: currentPageScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Paging<TSourceItem> Paging<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 Expression<Func<int>> pageSizeExpression,
			 Expression<Func<int>> currentPageExpression)
			
		{
			return new ObservableComputations.Paging<TSourceItem>(
				sourceScalar: sourceScalar,
				pageSizeScalar: new Computing<int>(pageSizeExpression),
				currentPageScalar: new Computing<int>(currentPageExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Paging<TSourceItem> Paging<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 ObservableComputations.IReadScalar<int> pageSizeScalar,
			 ObservableComputations.IReadScalar<int> currentPageScalar)
			
		{
			return new ObservableComputations.Paging<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				pageSizeScalar: pageSizeScalar,
				currentPageScalar: currentPageScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Paging<TSourceItem> Paging<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 ObservableComputations.IReadScalar<int> pageSizeScalar,
			 Expression<Func<int>> currentPageExpression)
			
		{
			return new ObservableComputations.Paging<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				pageSizeScalar: pageSizeScalar,
				currentPageScalar: new Computing<int>(currentPageExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Paging<TSourceItem> Paging<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 Expression<Func<int>> pageSizeExpression,
			 ObservableComputations.IReadScalar<int> currentPageScalar)
			
		{
			return new ObservableComputations.Paging<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				pageSizeScalar: new Computing<int>(pageSizeExpression),
				currentPageScalar: currentPageScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Paging<TSourceItem> Paging<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 Expression<Func<int>> pageSizeExpression,
			 Expression<Func<int>> currentPageExpression)
			
		{
			return new ObservableComputations.Paging<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				pageSizeScalar: new Computing<int>(pageSizeExpression),
				currentPageScalar: new Computing<int>(currentPageExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Paging<TSourceItem> Paging<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 ObservableComputations.IReadScalar<int> pageSizeScalar,
			 ObservableComputations.IReadScalar<int> currentPageScalar)
			
		{
			return new ObservableComputations.Paging<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				pageSizeScalar: pageSizeScalar,
				currentPageScalar: currentPageScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Paging<TSourceItem> Paging<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 ObservableComputations.IReadScalar<int> pageSizeScalar,
			 Expression<Func<int>> currentPageExpression)
			
		{
			return new ObservableComputations.Paging<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				pageSizeScalar: pageSizeScalar,
				currentPageScalar: new Computing<int>(currentPageExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Paging<TSourceItem> Paging<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 Expression<Func<int>> pageSizeExpression,
			 ObservableComputations.IReadScalar<int> currentPageScalar)
			
		{
			return new ObservableComputations.Paging<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				pageSizeScalar: new Computing<int>(pageSizeExpression),
				currentPageScalar: currentPageScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Paging<TSourceItem> Paging<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 Expression<Func<int>> pageSizeExpression,
			 Expression<Func<int>> currentPageExpression)
			
		{
			return new ObservableComputations.Paging<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				pageSizeScalar: new Computing<int>(pageSizeExpression),
				currentPageScalar: new Computing<int>(currentPageExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Paging<TSourceItem> Paging<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 int pageSize,
			 ObservableComputations.IReadScalar<int> currentPageScalar)
			
		{
			return new ObservableComputations.Paging<TSourceItem>(
				source: source,
				pageSize: pageSize,
				currentPageScalar: currentPageScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Paging<TSourceItem> Paging<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 int pageSize,
			 Expression<Func<int>> currentPageExpression)
			
		{
			return new ObservableComputations.Paging<TSourceItem>(
				source: source,
				pageSize: pageSize,
				currentPageScalar: new Computing<int>(currentPageExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Paging<TSourceItem> Paging<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 int pageSize,
			 ObservableComputations.IReadScalar<int> currentPageScalar)
			
		{
			return new ObservableComputations.Paging<TSourceItem>(
				source: source,
				pageSize: pageSize,
				currentPageScalar: currentPageScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Paging<TSourceItem> Paging<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 int pageSize,
			 Expression<Func<int>> currentPageExpression)
			
		{
			return new ObservableComputations.Paging<TSourceItem>(
				source: source,
				pageSize: pageSize,
				currentPageScalar: new Computing<int>(currentPageExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Paging<TSourceItem> Paging<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 int pageSize,
			 ObservableComputations.IReadScalar<int> currentPageScalar)
			
		{
			return new ObservableComputations.Paging<TSourceItem>(
				sourceScalar: sourceScalar,
				pageSize: pageSize,
				currentPageScalar: currentPageScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Paging<TSourceItem> Paging<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 int pageSize,
			 Expression<Func<int>> currentPageExpression)
			
		{
			return new ObservableComputations.Paging<TSourceItem>(
				sourceScalar: sourceScalar,
				pageSize: pageSize,
				currentPageScalar: new Computing<int>(currentPageExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Paging<TSourceItem> Paging<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 int pageSize,
			 ObservableComputations.IReadScalar<int> currentPageScalar)
			
		{
			return new ObservableComputations.Paging<TSourceItem>(
				sourceScalar: sourceScalar,
				pageSize: pageSize,
				currentPageScalar: currentPageScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Paging<TSourceItem> Paging<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 int pageSize,
			 Expression<Func<int>> currentPageExpression)
			
		{
			return new ObservableComputations.Paging<TSourceItem>(
				sourceScalar: sourceScalar,
				pageSize: pageSize,
				currentPageScalar: new Computing<int>(currentPageExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Paging<TSourceItem> Paging<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 int pageSize,
			 ObservableComputations.IReadScalar<int> currentPageScalar)
			
		{
			return new ObservableComputations.Paging<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				pageSize: pageSize,
				currentPageScalar: currentPageScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Paging<TSourceItem> Paging<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 int pageSize,
			 Expression<Func<int>> currentPageExpression)
			
		{
			return new ObservableComputations.Paging<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				pageSize: pageSize,
				currentPageScalar: new Computing<int>(currentPageExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Paging<TSourceItem> Paging<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 int pageSize,
			 ObservableComputations.IReadScalar<int> currentPageScalar)
			
		{
			return new ObservableComputations.Paging<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				pageSize: pageSize,
				currentPageScalar: currentPageScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Paging<TSourceItem> Paging<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 int pageSize,
			 Expression<Func<int>> currentPageExpression)
			
		{
			return new ObservableComputations.Paging<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				pageSize: pageSize,
				currentPageScalar: new Computing<int>(currentPageExpression));
		}

		#endregion
		#region PredicateGroupJoining

		[ObservableComputationsCall]
		public static ObservableComputations.PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem> PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TInnerSourceItem, bool>> joinPredicateExpression)
			
		{
			return new ObservableComputations.PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem>(
				outerSourceScalar: outerSourceScalar,
				innerSourceScalar: innerSourceScalar,
				joinPredicateExpression: joinPredicateExpression);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem> PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar,
			 ObservableComputations.IReadScalar<ObservableCollection<TInnerSourceItem>> innerSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TInnerSourceItem, bool>> joinPredicateExpression)
			
		{
			return new ObservableComputations.PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem>(
				outerSourceScalar: outerSourceScalar,
				innerSourceScalar: innerSourceScalar,
				joinPredicateExpression: joinPredicateExpression);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem> PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> innerSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TInnerSourceItem, bool>> joinPredicateExpression)
			
		{
			return new ObservableComputations.PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem>(
				outerSourceScalar: outerSourceScalar,
				innerSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(innerSourceExpression),
				joinPredicateExpression: joinPredicateExpression);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem> PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar,
			 Expression<Func<ObservableCollection<TInnerSourceItem>>> innerSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TInnerSourceItem, bool>> joinPredicateExpression)
			
		{
			return new ObservableComputations.PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem>(
				outerSourceScalar: outerSourceScalar,
				innerSourceScalar: new Computing<ObservableCollection<TInnerSourceItem>>(innerSourceExpression),
				joinPredicateExpression: joinPredicateExpression);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem> PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TOuterSourceItem>> outerSourceScalar,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TInnerSourceItem, bool>> joinPredicateExpression)
			
		{
			return new ObservableComputations.PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem>(
				outerSourceScalar: outerSourceScalar,
				innerSourceScalar: innerSourceScalar,
				joinPredicateExpression: joinPredicateExpression);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem> PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TOuterSourceItem>> outerSourceScalar,
			 ObservableComputations.IReadScalar<ObservableCollection<TInnerSourceItem>> innerSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TInnerSourceItem, bool>> joinPredicateExpression)
			
		{
			return new ObservableComputations.PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem>(
				outerSourceScalar: outerSourceScalar,
				innerSourceScalar: innerSourceScalar,
				joinPredicateExpression: joinPredicateExpression);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem> PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TOuterSourceItem>> outerSourceScalar,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> innerSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TInnerSourceItem, bool>> joinPredicateExpression)
			
		{
			return new ObservableComputations.PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem>(
				outerSourceScalar: outerSourceScalar,
				innerSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(innerSourceExpression),
				joinPredicateExpression: joinPredicateExpression);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem> PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TOuterSourceItem>> outerSourceScalar,
			 Expression<Func<ObservableCollection<TInnerSourceItem>>> innerSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TInnerSourceItem, bool>> joinPredicateExpression)
			
		{
			return new ObservableComputations.PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem>(
				outerSourceScalar: outerSourceScalar,
				innerSourceScalar: new Computing<ObservableCollection<TInnerSourceItem>>(innerSourceExpression),
				joinPredicateExpression: joinPredicateExpression);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem> PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> outerSourceExpression,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TInnerSourceItem, bool>> joinPredicateExpression)
			
		{
			return new ObservableComputations.PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem>(
				outerSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(outerSourceExpression),
				innerSourceScalar: innerSourceScalar,
				joinPredicateExpression: joinPredicateExpression);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem> PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> outerSourceExpression,
			 ObservableComputations.IReadScalar<ObservableCollection<TInnerSourceItem>> innerSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TInnerSourceItem, bool>> joinPredicateExpression)
			
		{
			return new ObservableComputations.PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem>(
				outerSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(outerSourceExpression),
				innerSourceScalar: innerSourceScalar,
				joinPredicateExpression: joinPredicateExpression);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem> PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> outerSourceExpression,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> innerSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TInnerSourceItem, bool>> joinPredicateExpression)
			
		{
			return new ObservableComputations.PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem>(
				outerSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(outerSourceExpression),
				innerSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(innerSourceExpression),
				joinPredicateExpression: joinPredicateExpression);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem> PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> outerSourceExpression,
			 Expression<Func<ObservableCollection<TInnerSourceItem>>> innerSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TInnerSourceItem, bool>> joinPredicateExpression)
			
		{
			return new ObservableComputations.PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem>(
				outerSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(outerSourceExpression),
				innerSourceScalar: new Computing<ObservableCollection<TInnerSourceItem>>(innerSourceExpression),
				joinPredicateExpression: joinPredicateExpression);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem> PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem>(this
			 Expression<Func<ObservableCollection<TOuterSourceItem>>> outerSourceExpression,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TInnerSourceItem, bool>> joinPredicateExpression)
			
		{
			return new ObservableComputations.PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem>(
				outerSourceScalar: new Computing<ObservableCollection<TOuterSourceItem>>(outerSourceExpression),
				innerSourceScalar: innerSourceScalar,
				joinPredicateExpression: joinPredicateExpression);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem> PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem>(this
			 Expression<Func<ObservableCollection<TOuterSourceItem>>> outerSourceExpression,
			 ObservableComputations.IReadScalar<ObservableCollection<TInnerSourceItem>> innerSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TInnerSourceItem, bool>> joinPredicateExpression)
			
		{
			return new ObservableComputations.PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem>(
				outerSourceScalar: new Computing<ObservableCollection<TOuterSourceItem>>(outerSourceExpression),
				innerSourceScalar: innerSourceScalar,
				joinPredicateExpression: joinPredicateExpression);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem> PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem>(this
			 Expression<Func<ObservableCollection<TOuterSourceItem>>> outerSourceExpression,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> innerSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TInnerSourceItem, bool>> joinPredicateExpression)
			
		{
			return new ObservableComputations.PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem>(
				outerSourceScalar: new Computing<ObservableCollection<TOuterSourceItem>>(outerSourceExpression),
				innerSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(innerSourceExpression),
				joinPredicateExpression: joinPredicateExpression);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem> PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem>(this
			 Expression<Func<ObservableCollection<TOuterSourceItem>>> outerSourceExpression,
			 Expression<Func<ObservableCollection<TInnerSourceItem>>> innerSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TInnerSourceItem, bool>> joinPredicateExpression)
			
		{
			return new ObservableComputations.PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem>(
				outerSourceScalar: new Computing<ObservableCollection<TOuterSourceItem>>(outerSourceExpression),
				innerSourceScalar: new Computing<ObservableCollection<TInnerSourceItem>>(innerSourceExpression),
				joinPredicateExpression: joinPredicateExpression);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem> PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar,
			 System.Collections.Specialized.INotifyCollectionChanged innerSource,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TInnerSourceItem, bool>> joinPredicateExpression)
			
		{
			return new ObservableComputations.PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem>(
				outerSourceScalar: outerSourceScalar,
				innerSource: innerSource,
				joinPredicateExpression: joinPredicateExpression);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem> PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar,
			 ObservableCollection<TInnerSourceItem> innerSource,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TInnerSourceItem, bool>> joinPredicateExpression)
			
		{
			return new ObservableComputations.PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem>(
				outerSourceScalar: outerSourceScalar,
				innerSource: innerSource,
				joinPredicateExpression: joinPredicateExpression);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem> PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TOuterSourceItem>> outerSourceScalar,
			 System.Collections.Specialized.INotifyCollectionChanged innerSource,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TInnerSourceItem, bool>> joinPredicateExpression)
			
		{
			return new ObservableComputations.PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem>(
				outerSourceScalar: outerSourceScalar,
				innerSource: innerSource,
				joinPredicateExpression: joinPredicateExpression);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem> PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TOuterSourceItem>> outerSourceScalar,
			 ObservableCollection<TInnerSourceItem> innerSource,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TInnerSourceItem, bool>> joinPredicateExpression)
			
		{
			return new ObservableComputations.PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem>(
				outerSourceScalar: outerSourceScalar,
				innerSource: innerSource,
				joinPredicateExpression: joinPredicateExpression);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem> PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> outerSourceExpression,
			 System.Collections.Specialized.INotifyCollectionChanged innerSource,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TInnerSourceItem, bool>> joinPredicateExpression)
			
		{
			return new ObservableComputations.PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem>(
				outerSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(outerSourceExpression),
				innerSource: innerSource,
				joinPredicateExpression: joinPredicateExpression);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem> PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> outerSourceExpression,
			 ObservableCollection<TInnerSourceItem> innerSource,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TInnerSourceItem, bool>> joinPredicateExpression)
			
		{
			return new ObservableComputations.PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem>(
				outerSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(outerSourceExpression),
				innerSource: innerSource,
				joinPredicateExpression: joinPredicateExpression);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem> PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem>(this
			 Expression<Func<ObservableCollection<TOuterSourceItem>>> outerSourceExpression,
			 System.Collections.Specialized.INotifyCollectionChanged innerSource,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TInnerSourceItem, bool>> joinPredicateExpression)
			
		{
			return new ObservableComputations.PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem>(
				outerSourceScalar: new Computing<ObservableCollection<TOuterSourceItem>>(outerSourceExpression),
				innerSource: innerSource,
				joinPredicateExpression: joinPredicateExpression);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem> PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem>(this
			 Expression<Func<ObservableCollection<TOuterSourceItem>>> outerSourceExpression,
			 ObservableCollection<TInnerSourceItem> innerSource,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TInnerSourceItem, bool>> joinPredicateExpression)
			
		{
			return new ObservableComputations.PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem>(
				outerSourceScalar: new Computing<ObservableCollection<TOuterSourceItem>>(outerSourceExpression),
				innerSource: innerSource,
				joinPredicateExpression: joinPredicateExpression);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem> PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged outerSource,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TInnerSourceItem, bool>> joinPredicateExpression)
			
		{
			return new ObservableComputations.PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem>(
				outerSource: outerSource,
				innerSourceScalar: innerSourceScalar,
				joinPredicateExpression: joinPredicateExpression);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem> PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged outerSource,
			 ObservableComputations.IReadScalar<ObservableCollection<TInnerSourceItem>> innerSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TInnerSourceItem, bool>> joinPredicateExpression)
			
		{
			return new ObservableComputations.PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem>(
				outerSource: outerSource,
				innerSourceScalar: innerSourceScalar,
				joinPredicateExpression: joinPredicateExpression);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem> PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged outerSource,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> innerSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TInnerSourceItem, bool>> joinPredicateExpression)
			
		{
			return new ObservableComputations.PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem>(
				outerSource: outerSource,
				innerSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(innerSourceExpression),
				joinPredicateExpression: joinPredicateExpression);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem> PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged outerSource,
			 Expression<Func<ObservableCollection<TInnerSourceItem>>> innerSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TInnerSourceItem, bool>> joinPredicateExpression)
			
		{
			return new ObservableComputations.PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem>(
				outerSource: outerSource,
				innerSourceScalar: new Computing<ObservableCollection<TInnerSourceItem>>(innerSourceExpression),
				joinPredicateExpression: joinPredicateExpression);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem> PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem>(this
			 ObservableCollection<TOuterSourceItem> outerSource,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TInnerSourceItem, bool>> joinPredicateExpression)
			
		{
			return new ObservableComputations.PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem>(
				outerSource: outerSource,
				innerSourceScalar: innerSourceScalar,
				joinPredicateExpression: joinPredicateExpression);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem> PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem>(this
			 ObservableCollection<TOuterSourceItem> outerSource,
			 ObservableComputations.IReadScalar<ObservableCollection<TInnerSourceItem>> innerSourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TInnerSourceItem, bool>> joinPredicateExpression)
			
		{
			return new ObservableComputations.PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem>(
				outerSource: outerSource,
				innerSourceScalar: innerSourceScalar,
				joinPredicateExpression: joinPredicateExpression);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem> PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem>(this
			 ObservableCollection<TOuterSourceItem> outerSource,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> innerSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TInnerSourceItem, bool>> joinPredicateExpression)
			
		{
			return new ObservableComputations.PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem>(
				outerSource: outerSource,
				innerSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(innerSourceExpression),
				joinPredicateExpression: joinPredicateExpression);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem> PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem>(this
			 ObservableCollection<TOuterSourceItem> outerSource,
			 Expression<Func<ObservableCollection<TInnerSourceItem>>> innerSourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TInnerSourceItem, bool>> joinPredicateExpression)
			
		{
			return new ObservableComputations.PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem>(
				outerSource: outerSource,
				innerSourceScalar: new Computing<ObservableCollection<TInnerSourceItem>>(innerSourceExpression),
				joinPredicateExpression: joinPredicateExpression);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem> PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged outerSource,
			 System.Collections.Specialized.INotifyCollectionChanged innerSource,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TInnerSourceItem, bool>> joinPredicateExpression)
			
		{
			return new ObservableComputations.PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem>(
				outerSource: outerSource,
				innerSource: innerSource,
				joinPredicateExpression: joinPredicateExpression);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem> PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged outerSource,
			 ObservableCollection<TInnerSourceItem> innerSource,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TInnerSourceItem, bool>> joinPredicateExpression)
			
		{
			return new ObservableComputations.PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem>(
				outerSource: outerSource,
				innerSource: innerSource,
				joinPredicateExpression: joinPredicateExpression);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem> PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem>(this
			 ObservableCollection<TOuterSourceItem> outerSource,
			 System.Collections.Specialized.INotifyCollectionChanged innerSource,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TInnerSourceItem, bool>> joinPredicateExpression)
			
		{
			return new ObservableComputations.PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem>(
				outerSource: outerSource,
				innerSource: innerSource,
				joinPredicateExpression: joinPredicateExpression);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem> PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem>(this
			 ObservableCollection<TOuterSourceItem> outerSource,
			 ObservableCollection<TInnerSourceItem> innerSource,
			 System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TInnerSourceItem, bool>> joinPredicateExpression)
			
		{
			return new ObservableComputations.PredicateGroupJoining<TOuterSourceItem, TInnerSourceItem>(
				outerSource: outerSource,
				innerSource: innerSource,
				joinPredicateExpression: joinPredicateExpression);
		}

		#endregion
		#region Prepending

		[ObservableComputationsCall]
		public static ObservableComputations.Prepending<TSourceItem> Prepending<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 ObservableComputations.IReadScalar<TSourceItem> itemScalar)
			
		{
			return new ObservableComputations.Prepending<TSourceItem>(
				sourceScalar: sourceScalar,
				itemScalar: itemScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Prepending<TSourceItem> Prepending<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 Expression<Func<TSourceItem>> itemExpression)
			
		{
			return new ObservableComputations.Prepending<TSourceItem>(
				sourceScalar: sourceScalar,
				itemScalar: new Computing<TSourceItem>(itemExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Prepending<TSourceItem> Prepending<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 ObservableComputations.IReadScalar<TSourceItem> itemScalar)
			
		{
			return new ObservableComputations.Prepending<TSourceItem>(
				sourceScalar: sourceScalar,
				itemScalar: itemScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Prepending<TSourceItem> Prepending<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 Expression<Func<TSourceItem>> itemExpression)
			
		{
			return new ObservableComputations.Prepending<TSourceItem>(
				sourceScalar: sourceScalar,
				itemScalar: new Computing<TSourceItem>(itemExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Prepending<TSourceItem> Prepending<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 ObservableComputations.IReadScalar<TSourceItem> itemScalar)
			
		{
			return new ObservableComputations.Prepending<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				itemScalar: itemScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Prepending<TSourceItem> Prepending<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 Expression<Func<TSourceItem>> itemExpression)
			
		{
			return new ObservableComputations.Prepending<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				itemScalar: new Computing<TSourceItem>(itemExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Prepending<TSourceItem> Prepending<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 ObservableComputations.IReadScalar<TSourceItem> itemScalar)
			
		{
			return new ObservableComputations.Prepending<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				itemScalar: itemScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Prepending<TSourceItem> Prepending<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 Expression<Func<TSourceItem>> itemExpression)
			
		{
			return new ObservableComputations.Prepending<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				itemScalar: new Computing<TSourceItem>(itemExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Prepending<TSourceItem> Prepending<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 ObservableComputations.IReadScalar<TSourceItem> itemScalar)
			
		{
			return new ObservableComputations.Prepending<TSourceItem>(
				source: source,
				itemScalar: itemScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Prepending<TSourceItem> Prepending<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 Expression<Func<TSourceItem>> itemExpression)
			
		{
			return new ObservableComputations.Prepending<TSourceItem>(
				source: source,
				itemScalar: new Computing<TSourceItem>(itemExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Prepending<TSourceItem> Prepending<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 ObservableComputations.IReadScalar<TSourceItem> itemScalar)
			
		{
			return new ObservableComputations.Prepending<TSourceItem>(
				source: source,
				itemScalar: itemScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Prepending<TSourceItem> Prepending<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 Expression<Func<TSourceItem>> itemExpression)
			
		{
			return new ObservableComputations.Prepending<TSourceItem>(
				source: source,
				itemScalar: new Computing<TSourceItem>(itemExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Prepending<TSourceItem> Prepending<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 TSourceItem item)
			
		{
			return new ObservableComputations.Prepending<TSourceItem>(
				source: source,
				item: item);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Prepending<TSourceItem> Prepending<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 TSourceItem item)
			
		{
			return new ObservableComputations.Prepending<TSourceItem>(
				source: source,
				item: item);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Prepending<TSourceItem> Prepending<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 TSourceItem item)
			
		{
			return new ObservableComputations.Prepending<TSourceItem>(
				sourceScalar: sourceScalar,
				item: item);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Prepending<TSourceItem> Prepending<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 TSourceItem item)
			
		{
			return new ObservableComputations.Prepending<TSourceItem>(
				sourceScalar: sourceScalar,
				item: item);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Prepending<TSourceItem> Prepending<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 TSourceItem item)
			
		{
			return new ObservableComputations.Prepending<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				item: item);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Prepending<TSourceItem> Prepending<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 TSourceItem item)
			
		{
			return new ObservableComputations.Prepending<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				item: item);
		}

		#endregion
		#region PreviousTracking

		[ObservableComputationsCall]
		public static ObservableComputations.PreviousTracking<TResult> PreviousTracking<TResult>(this
			 ObservableComputations.IReadScalar<TResult> scalar)
			
		{
			return new ObservableComputations.PreviousTracking<TResult>(
				scalar: scalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PreviousTracking<TResult> PreviousTracking<TResult>(this
			 Expression<Func<TResult>> scalar)
			
		{
			return new ObservableComputations.PreviousTracking<TResult>(
				scalar: new Computing<TResult>(scalar));
		}

		#endregion
		#region PropertyAccessing

		[ObservableComputationsCall]
		public static ObservableComputations.PropertyAccessing<TResult> PropertyAccessing<TResult>(this
			 ObservableComputations.IReadScalar<System.ComponentModel.INotifyPropertyChanged> propertyHolderScalar,
			 string propertyName,
			 TResult defaultValue)
			
		{
			return new ObservableComputations.PropertyAccessing<TResult>(
				propertyHolderScalar: propertyHolderScalar,
				propertyName: propertyName,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PropertyAccessing<TResult> PropertyAccessing<TResult>(this
			 ObservableComputations.IReadScalar<System.ComponentModel.INotifyPropertyChanged> propertyHolderScalar,
			 string propertyName)
			
		{
			return new ObservableComputations.PropertyAccessing<TResult>(
				propertyHolderScalar: propertyHolderScalar,
				propertyName: propertyName,
				defaultValue: default(TResult));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PropertyAccessing<TResult> PropertyAccessing<TResult>(this
			 Expression<Func<System.ComponentModel.INotifyPropertyChanged>> propertyHolderExpression,
			 string propertyName,
			 TResult defaultValue)
			
		{
			return new ObservableComputations.PropertyAccessing<TResult>(
				propertyHolderScalar: new Computing<System.ComponentModel.INotifyPropertyChanged>(propertyHolderExpression),
				propertyName: propertyName,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PropertyAccessing<TResult> PropertyAccessing<TResult>(this
			 Expression<Func<System.ComponentModel.INotifyPropertyChanged>> propertyHolderExpression,
			 string propertyName)
			
		{
			return new ObservableComputations.PropertyAccessing<TResult>(
				propertyHolderScalar: new Computing<System.ComponentModel.INotifyPropertyChanged>(propertyHolderExpression),
				propertyName: propertyName,
				defaultValue: default(TResult));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PropertyAccessing<TResult> PropertyAccessing<TResult>(this
			 ObservableComputations.IReadScalar<System.ComponentModel.INotifyPropertyChanged> propertyHolderScalar,
			 string propertyName,
			 System.Reflection.BindingFlags bindingAttr,
			 TResult defaultValue)
			
		{
			return new ObservableComputations.PropertyAccessing<TResult>(
				propertyHolderScalar: propertyHolderScalar,
				propertyName: propertyName,
				bindingAttr: bindingAttr,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PropertyAccessing<TResult> PropertyAccessing<TResult>(this
			 ObservableComputations.IReadScalar<System.ComponentModel.INotifyPropertyChanged> propertyHolderScalar,
			 string propertyName,
			 System.Reflection.BindingFlags bindingAttr)
			
		{
			return new ObservableComputations.PropertyAccessing<TResult>(
				propertyHolderScalar: propertyHolderScalar,
				propertyName: propertyName,
				bindingAttr: bindingAttr,
				defaultValue: default(TResult));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PropertyAccessing<TResult> PropertyAccessing<TResult>(this
			 Expression<Func<System.ComponentModel.INotifyPropertyChanged>> propertyHolderExpression,
			 string propertyName,
			 System.Reflection.BindingFlags bindingAttr,
			 TResult defaultValue)
			
		{
			return new ObservableComputations.PropertyAccessing<TResult>(
				propertyHolderScalar: new Computing<System.ComponentModel.INotifyPropertyChanged>(propertyHolderExpression),
				propertyName: propertyName,
				bindingAttr: bindingAttr,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PropertyAccessing<TResult> PropertyAccessing<TResult>(this
			 Expression<Func<System.ComponentModel.INotifyPropertyChanged>> propertyHolderExpression,
			 string propertyName,
			 System.Reflection.BindingFlags bindingAttr)
			
		{
			return new ObservableComputations.PropertyAccessing<TResult>(
				propertyHolderScalar: new Computing<System.ComponentModel.INotifyPropertyChanged>(propertyHolderExpression),
				propertyName: propertyName,
				bindingAttr: bindingAttr,
				defaultValue: default(TResult));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PropertyAccessing<TResult> PropertyAccessing<TResult>(this
			 ObservableComputations.IReadScalar<System.ComponentModel.INotifyPropertyChanged> propertyHolderScalar,
			 string propertyName,
			 System.Type returnType,
			 TResult defaultValue)
			
		{
			return new ObservableComputations.PropertyAccessing<TResult>(
				propertyHolderScalar: propertyHolderScalar,
				propertyName: propertyName,
				returnType: returnType,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PropertyAccessing<TResult> PropertyAccessing<TResult>(this
			 ObservableComputations.IReadScalar<System.ComponentModel.INotifyPropertyChanged> propertyHolderScalar,
			 string propertyName,
			 System.Type returnType)
			
		{
			return new ObservableComputations.PropertyAccessing<TResult>(
				propertyHolderScalar: propertyHolderScalar,
				propertyName: propertyName,
				returnType: returnType,
				defaultValue: default(TResult));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PropertyAccessing<TResult> PropertyAccessing<TResult>(this
			 Expression<Func<System.ComponentModel.INotifyPropertyChanged>> propertyHolderExpression,
			 string propertyName,
			 System.Type returnType,
			 TResult defaultValue)
			
		{
			return new ObservableComputations.PropertyAccessing<TResult>(
				propertyHolderScalar: new Computing<System.ComponentModel.INotifyPropertyChanged>(propertyHolderExpression),
				propertyName: propertyName,
				returnType: returnType,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PropertyAccessing<TResult> PropertyAccessing<TResult>(this
			 Expression<Func<System.ComponentModel.INotifyPropertyChanged>> propertyHolderExpression,
			 string propertyName,
			 System.Type returnType)
			
		{
			return new ObservableComputations.PropertyAccessing<TResult>(
				propertyHolderScalar: new Computing<System.ComponentModel.INotifyPropertyChanged>(propertyHolderExpression),
				propertyName: propertyName,
				returnType: returnType,
				defaultValue: default(TResult));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PropertyAccessing<TResult> PropertyAccessing<TResult>(this
			 ObservableComputations.IReadScalar<System.ComponentModel.INotifyPropertyChanged> propertyHolderScalar,
			 string propertyName,
			 System.Type returnType,
			 System.Type[] types,
			 TResult defaultValue)
			
		{
			return new ObservableComputations.PropertyAccessing<TResult>(
				propertyHolderScalar: propertyHolderScalar,
				propertyName: propertyName,
				returnType: returnType,
				types: types,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PropertyAccessing<TResult> PropertyAccessing<TResult>(this
			 ObservableComputations.IReadScalar<System.ComponentModel.INotifyPropertyChanged> propertyHolderScalar,
			 string propertyName,
			 System.Type returnType,
			 System.Type[] types)
			
		{
			return new ObservableComputations.PropertyAccessing<TResult>(
				propertyHolderScalar: propertyHolderScalar,
				propertyName: propertyName,
				returnType: returnType,
				types: types,
				defaultValue: default(TResult));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PropertyAccessing<TResult> PropertyAccessing<TResult>(this
			 Expression<Func<System.ComponentModel.INotifyPropertyChanged>> propertyHolderExpression,
			 string propertyName,
			 System.Type returnType,
			 System.Type[] types,
			 TResult defaultValue)
			
		{
			return new ObservableComputations.PropertyAccessing<TResult>(
				propertyHolderScalar: new Computing<System.ComponentModel.INotifyPropertyChanged>(propertyHolderExpression),
				propertyName: propertyName,
				returnType: returnType,
				types: types,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PropertyAccessing<TResult> PropertyAccessing<TResult>(this
			 Expression<Func<System.ComponentModel.INotifyPropertyChanged>> propertyHolderExpression,
			 string propertyName,
			 System.Type returnType,
			 System.Type[] types)
			
		{
			return new ObservableComputations.PropertyAccessing<TResult>(
				propertyHolderScalar: new Computing<System.ComponentModel.INotifyPropertyChanged>(propertyHolderExpression),
				propertyName: propertyName,
				returnType: returnType,
				types: types,
				defaultValue: default(TResult));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PropertyAccessing<TResult> PropertyAccessing<TResult>(this
			 ObservableComputations.IReadScalar<System.ComponentModel.INotifyPropertyChanged> propertyHolderScalar,
			 string propertyName,
			 System.Type returnType,
			 System.Type[] types,
			 System.Reflection.ParameterModifier[] modifiers,
			 TResult defaultValue)
			
		{
			return new ObservableComputations.PropertyAccessing<TResult>(
				propertyHolderScalar: propertyHolderScalar,
				propertyName: propertyName,
				returnType: returnType,
				types: types,
				modifiers: modifiers,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PropertyAccessing<TResult> PropertyAccessing<TResult>(this
			 ObservableComputations.IReadScalar<System.ComponentModel.INotifyPropertyChanged> propertyHolderScalar,
			 string propertyName,
			 System.Type returnType,
			 System.Type[] types,
			 System.Reflection.ParameterModifier[] modifiers)
			
		{
			return new ObservableComputations.PropertyAccessing<TResult>(
				propertyHolderScalar: propertyHolderScalar,
				propertyName: propertyName,
				returnType: returnType,
				types: types,
				modifiers: modifiers,
				defaultValue: default(TResult));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PropertyAccessing<TResult> PropertyAccessing<TResult>(this
			 Expression<Func<System.ComponentModel.INotifyPropertyChanged>> propertyHolderExpression,
			 string propertyName,
			 System.Type returnType,
			 System.Type[] types,
			 System.Reflection.ParameterModifier[] modifiers,
			 TResult defaultValue)
			
		{
			return new ObservableComputations.PropertyAccessing<TResult>(
				propertyHolderScalar: new Computing<System.ComponentModel.INotifyPropertyChanged>(propertyHolderExpression),
				propertyName: propertyName,
				returnType: returnType,
				types: types,
				modifiers: modifiers,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PropertyAccessing<TResult> PropertyAccessing<TResult>(this
			 Expression<Func<System.ComponentModel.INotifyPropertyChanged>> propertyHolderExpression,
			 string propertyName,
			 System.Type returnType,
			 System.Type[] types,
			 System.Reflection.ParameterModifier[] modifiers)
			
		{
			return new ObservableComputations.PropertyAccessing<TResult>(
				propertyHolderScalar: new Computing<System.ComponentModel.INotifyPropertyChanged>(propertyHolderExpression),
				propertyName: propertyName,
				returnType: returnType,
				types: types,
				modifiers: modifiers,
				defaultValue: default(TResult));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PropertyAccessing<TResult> PropertyAccessing<TResult>(this
			 ObservableComputations.IReadScalar<System.ComponentModel.INotifyPropertyChanged> propertyHolderScalar,
			 System.Func<System.Reflection.PropertyInfo, bool> propertyInfoPredicate,
			 TResult defaultValue)
			
		{
			return new ObservableComputations.PropertyAccessing<TResult>(
				propertyHolderScalar: propertyHolderScalar,
				propertyInfoPredicate: propertyInfoPredicate,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PropertyAccessing<TResult> PropertyAccessing<TResult>(this
			 ObservableComputations.IReadScalar<System.ComponentModel.INotifyPropertyChanged> propertyHolderScalar,
			 System.Func<System.Reflection.PropertyInfo, bool> propertyInfoPredicate)
			
		{
			return new ObservableComputations.PropertyAccessing<TResult>(
				propertyHolderScalar: propertyHolderScalar,
				propertyInfoPredicate: propertyInfoPredicate,
				defaultValue: default(TResult));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PropertyAccessing<TResult> PropertyAccessing<TResult>(this
			 Expression<Func<System.ComponentModel.INotifyPropertyChanged>> propertyHolderExpression,
			 System.Func<System.Reflection.PropertyInfo, bool> propertyInfoPredicate,
			 TResult defaultValue)
			
		{
			return new ObservableComputations.PropertyAccessing<TResult>(
				propertyHolderScalar: new Computing<System.ComponentModel.INotifyPropertyChanged>(propertyHolderExpression),
				propertyInfoPredicate: propertyInfoPredicate,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PropertyAccessing<TResult> PropertyAccessing<TResult>(this
			 Expression<Func<System.ComponentModel.INotifyPropertyChanged>> propertyHolderExpression,
			 System.Func<System.Reflection.PropertyInfo, bool> propertyInfoPredicate)
			
		{
			return new ObservableComputations.PropertyAccessing<TResult>(
				propertyHolderScalar: new Computing<System.ComponentModel.INotifyPropertyChanged>(propertyHolderExpression),
				propertyInfoPredicate: propertyInfoPredicate,
				defaultValue: default(TResult));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PropertyAccessing<TResult> PropertyAccessing<TResult>(this
			 ObservableComputations.IReadScalar<System.ComponentModel.INotifyPropertyChanged> propertyHolderScalar,
			 System.Func<System.Reflection.PropertyInfo, bool> propertyInfoPredicate,
			 System.Reflection.BindingFlags bindingAttr,
			 TResult defaultValue)
			
		{
			return new ObservableComputations.PropertyAccessing<TResult>(
				propertyHolderScalar: propertyHolderScalar,
				propertyInfoPredicate: propertyInfoPredicate,
				bindingAttr: bindingAttr,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PropertyAccessing<TResult> PropertyAccessing<TResult>(this
			 ObservableComputations.IReadScalar<System.ComponentModel.INotifyPropertyChanged> propertyHolderScalar,
			 System.Func<System.Reflection.PropertyInfo, bool> propertyInfoPredicate,
			 System.Reflection.BindingFlags bindingAttr)
			
		{
			return new ObservableComputations.PropertyAccessing<TResult>(
				propertyHolderScalar: propertyHolderScalar,
				propertyInfoPredicate: propertyInfoPredicate,
				bindingAttr: bindingAttr,
				defaultValue: default(TResult));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PropertyAccessing<TResult> PropertyAccessing<TResult>(this
			 Expression<Func<System.ComponentModel.INotifyPropertyChanged>> propertyHolderExpression,
			 System.Func<System.Reflection.PropertyInfo, bool> propertyInfoPredicate,
			 System.Reflection.BindingFlags bindingAttr,
			 TResult defaultValue)
			
		{
			return new ObservableComputations.PropertyAccessing<TResult>(
				propertyHolderScalar: new Computing<System.ComponentModel.INotifyPropertyChanged>(propertyHolderExpression),
				propertyInfoPredicate: propertyInfoPredicate,
				bindingAttr: bindingAttr,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PropertyAccessing<TResult> PropertyAccessing<TResult>(this
			 Expression<Func<System.ComponentModel.INotifyPropertyChanged>> propertyHolderExpression,
			 System.Func<System.Reflection.PropertyInfo, bool> propertyInfoPredicate,
			 System.Reflection.BindingFlags bindingAttr)
			
		{
			return new ObservableComputations.PropertyAccessing<TResult>(
				propertyHolderScalar: new Computing<System.ComponentModel.INotifyPropertyChanged>(propertyHolderExpression),
				propertyInfoPredicate: propertyInfoPredicate,
				bindingAttr: bindingAttr,
				defaultValue: default(TResult));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PropertyAccessing<TResult> PropertyAccessing<TResult>(this
			 System.ComponentModel.INotifyPropertyChanged propertyHolder,
			 string propertyName,
			 TResult defaultValue)
			
		{
			return new ObservableComputations.PropertyAccessing<TResult>(
				propertyHolder: propertyHolder,
				propertyName: propertyName,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PropertyAccessing<TResult> PropertyAccessing<TResult>(this
			 System.ComponentModel.INotifyPropertyChanged propertyHolder,
			 string propertyName)
			
		{
			return new ObservableComputations.PropertyAccessing<TResult>(
				propertyHolder: propertyHolder,
				propertyName: propertyName,
				defaultValue: default(TResult));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PropertyAccessing<TResult> PropertyAccessing<TResult>(this
			 System.ComponentModel.INotifyPropertyChanged propertyHolder,
			 string propertyName,
			 System.Reflection.BindingFlags bindingAttr,
			 TResult defaultValue)
			
		{
			return new ObservableComputations.PropertyAccessing<TResult>(
				propertyHolder: propertyHolder,
				propertyName: propertyName,
				bindingAttr: bindingAttr,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PropertyAccessing<TResult> PropertyAccessing<TResult>(this
			 System.ComponentModel.INotifyPropertyChanged propertyHolder,
			 string propertyName,
			 System.Reflection.BindingFlags bindingAttr)
			
		{
			return new ObservableComputations.PropertyAccessing<TResult>(
				propertyHolder: propertyHolder,
				propertyName: propertyName,
				bindingAttr: bindingAttr,
				defaultValue: default(TResult));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PropertyAccessing<TResult> PropertyAccessing<TResult>(this
			 System.ComponentModel.INotifyPropertyChanged propertyHolder,
			 string propertyName,
			 System.Type returnType,
			 TResult defaultValue)
			
		{
			return new ObservableComputations.PropertyAccessing<TResult>(
				propertyHolder: propertyHolder,
				propertyName: propertyName,
				returnType: returnType,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PropertyAccessing<TResult> PropertyAccessing<TResult>(this
			 System.ComponentModel.INotifyPropertyChanged propertyHolder,
			 string propertyName,
			 System.Type returnType)
			
		{
			return new ObservableComputations.PropertyAccessing<TResult>(
				propertyHolder: propertyHolder,
				propertyName: propertyName,
				returnType: returnType,
				defaultValue: default(TResult));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PropertyAccessing<TResult> PropertyAccessing<TResult>(this
			 System.ComponentModel.INotifyPropertyChanged propertyHolder,
			 string propertyName,
			 System.Type returnType,
			 System.Type[] types,
			 TResult defaultValue)
			
		{
			return new ObservableComputations.PropertyAccessing<TResult>(
				propertyHolder: propertyHolder,
				propertyName: propertyName,
				returnType: returnType,
				types: types,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PropertyAccessing<TResult> PropertyAccessing<TResult>(this
			 System.ComponentModel.INotifyPropertyChanged propertyHolder,
			 string propertyName,
			 System.Type returnType,
			 System.Type[] types)
			
		{
			return new ObservableComputations.PropertyAccessing<TResult>(
				propertyHolder: propertyHolder,
				propertyName: propertyName,
				returnType: returnType,
				types: types,
				defaultValue: default(TResult));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PropertyAccessing<TResult> PropertyAccessing<TResult>(this
			 System.ComponentModel.INotifyPropertyChanged propertyHolder,
			 string propertyName,
			 System.Type returnType,
			 System.Type[] types,
			 System.Reflection.ParameterModifier[] modifiers,
			 TResult defaultValue)
			
		{
			return new ObservableComputations.PropertyAccessing<TResult>(
				propertyHolder: propertyHolder,
				propertyName: propertyName,
				returnType: returnType,
				types: types,
				modifiers: modifiers,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PropertyAccessing<TResult> PropertyAccessing<TResult>(this
			 System.ComponentModel.INotifyPropertyChanged propertyHolder,
			 string propertyName,
			 System.Type returnType,
			 System.Type[] types,
			 System.Reflection.ParameterModifier[] modifiers)
			
		{
			return new ObservableComputations.PropertyAccessing<TResult>(
				propertyHolder: propertyHolder,
				propertyName: propertyName,
				returnType: returnType,
				types: types,
				modifiers: modifiers,
				defaultValue: default(TResult));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PropertyAccessing<TResult> PropertyAccessing<TResult>(this
			 System.ComponentModel.INotifyPropertyChanged propertyHolder,
			 System.Func<System.Reflection.PropertyInfo, bool> propertyInfoPredicate,
			 TResult defaultValue)
			
		{
			return new ObservableComputations.PropertyAccessing<TResult>(
				propertyHolder: propertyHolder,
				propertyInfoPredicate: propertyInfoPredicate,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PropertyAccessing<TResult> PropertyAccessing<TResult>(this
			 System.ComponentModel.INotifyPropertyChanged propertyHolder,
			 System.Func<System.Reflection.PropertyInfo, bool> propertyInfoPredicate)
			
		{
			return new ObservableComputations.PropertyAccessing<TResult>(
				propertyHolder: propertyHolder,
				propertyInfoPredicate: propertyInfoPredicate,
				defaultValue: default(TResult));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PropertyAccessing<TResult> PropertyAccessing<TResult>(this
			 System.ComponentModel.INotifyPropertyChanged propertyHolder,
			 System.Func<System.Reflection.PropertyInfo, bool> propertyInfoPredicate,
			 System.Reflection.BindingFlags bindingAttr,
			 TResult defaultValue)
			
		{
			return new ObservableComputations.PropertyAccessing<TResult>(
				propertyHolder: propertyHolder,
				propertyInfoPredicate: propertyInfoPredicate,
				bindingAttr: bindingAttr,
				defaultValue: defaultValue);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.PropertyAccessing<TResult> PropertyAccessing<TResult>(this
			 System.ComponentModel.INotifyPropertyChanged propertyHolder,
			 System.Func<System.Reflection.PropertyInfo, bool> propertyInfoPredicate,
			 System.Reflection.BindingFlags bindingAttr)
			
		{
			return new ObservableComputations.PropertyAccessing<TResult>(
				propertyHolder: propertyHolder,
				propertyInfoPredicate: propertyInfoPredicate,
				bindingAttr: bindingAttr,
				defaultValue: default(TResult));
		}

		#endregion
		#region Reversing

		[ObservableComputationsCall]
		public static ObservableComputations.Reversing<TSourceItem> Reversing<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar)
			
		{
			return new ObservableComputations.Reversing<TSourceItem>(
				sourceScalar: sourceScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Reversing<TSourceItem> Reversing<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar)
			
		{
			return new ObservableComputations.Reversing<TSourceItem>(
				sourceScalar: sourceScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Reversing<TSourceItem> Reversing<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression)
			
		{
			return new ObservableComputations.Reversing<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Reversing<TSourceItem> Reversing<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression)
			
		{
			return new ObservableComputations.Reversing<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Reversing<TSourceItem> Reversing<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source)
			
		{
			return new ObservableComputations.Reversing<TSourceItem>(
				source: source);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Reversing<TSourceItem> Reversing<TSourceItem>(this
			 ObservableCollection<TSourceItem> source)
			
		{
			return new ObservableComputations.Reversing<TSourceItem>(
				source: source);
		}

		#endregion
		#region ScalarDispatching

		[ObservableComputationsCall]
		public static ObservableComputations.ScalarDispatching<TResult> ScalarDispatching<TResult>(this
			 ObservableComputations.IReadScalar<TResult> scalar,
			 ObservableComputations.IDispatcher destinationDispatcher,
			 ObservableComputations.IDispatcher sourceDispatcher)
			
		{
			return new ObservableComputations.ScalarDispatching<TResult>(
				scalar: scalar,
				destinationDispatcher: destinationDispatcher,
				sourceDispatcher: sourceDispatcher);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ScalarDispatching<TResult> ScalarDispatching<TResult>(this
			 ObservableComputations.IReadScalar<TResult> scalar,
			 ObservableComputations.IDispatcher destinationDispatcher)
			
		{
			return new ObservableComputations.ScalarDispatching<TResult>(
				scalar: scalar,
				destinationDispatcher: destinationDispatcher,
				sourceDispatcher: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ScalarDispatching<TResult> ScalarDispatching<TResult>(this
			 Expression<Func<TResult>> scalar,
			 ObservableComputations.IDispatcher destinationDispatcher,
			 ObservableComputations.IDispatcher sourceDispatcher)
			
		{
			return new ObservableComputations.ScalarDispatching<TResult>(
				scalar: new Computing<TResult>(scalar),
				destinationDispatcher: destinationDispatcher,
				sourceDispatcher: sourceDispatcher);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ScalarDispatching<TResult> ScalarDispatching<TResult>(this
			 Expression<Func<TResult>> scalar,
			 ObservableComputations.IDispatcher destinationDispatcher)
			
		{
			return new ObservableComputations.ScalarDispatching<TResult>(
				scalar: new Computing<TResult>(scalar),
				destinationDispatcher: destinationDispatcher,
				sourceDispatcher: null);
		}

		#endregion
		#region ScalarPausing

		[ObservableComputationsCall]
		public static ObservableComputations.ScalarPausing<TResult> ScalarPausing<TResult>(this
			 ObservableComputations.IReadScalar<TResult> scalar,
			 bool initialIsPaused,
			 int? lastChangesToApplyOnResumeCount)
			
		{
			return new ObservableComputations.ScalarPausing<TResult>(
				scalar: scalar,
				initialIsPaused: initialIsPaused,
				lastChangesToApplyOnResumeCount: lastChangesToApplyOnResumeCount);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ScalarPausing<TResult> ScalarPausing<TResult>(this
			 ObservableComputations.IReadScalar<TResult> scalar,
			 bool initialIsPaused)
			
		{
			return new ObservableComputations.ScalarPausing<TResult>(
				scalar: scalar,
				initialIsPaused: initialIsPaused,
				lastChangesToApplyOnResumeCount: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ScalarPausing<TResult> ScalarPausing<TResult>(this
			 ObservableComputations.IReadScalar<TResult> scalar,
			 int? lastChangesToApplyOnResumeCount)
			
		{
			return new ObservableComputations.ScalarPausing<TResult>(
				scalar: scalar,
				initialIsPaused: false,
				lastChangesToApplyOnResumeCount: lastChangesToApplyOnResumeCount);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ScalarPausing<TResult> ScalarPausing<TResult>(this
			 ObservableComputations.IReadScalar<TResult> scalar)
			
		{
			return new ObservableComputations.ScalarPausing<TResult>(
				scalar: scalar,
				initialIsPaused: false,
				lastChangesToApplyOnResumeCount: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ScalarPausing<TResult> ScalarPausing<TResult>(this
			 Expression<Func<TResult>> scalar,
			 bool initialIsPaused,
			 int? lastChangesToApplyOnResumeCount)
			
		{
			return new ObservableComputations.ScalarPausing<TResult>(
				scalar: new Computing<TResult>(scalar),
				initialIsPaused: initialIsPaused,
				lastChangesToApplyOnResumeCount: lastChangesToApplyOnResumeCount);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ScalarPausing<TResult> ScalarPausing<TResult>(this
			 Expression<Func<TResult>> scalar,
			 bool initialIsPaused)
			
		{
			return new ObservableComputations.ScalarPausing<TResult>(
				scalar: new Computing<TResult>(scalar),
				initialIsPaused: initialIsPaused,
				lastChangesToApplyOnResumeCount: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ScalarPausing<TResult> ScalarPausing<TResult>(this
			 Expression<Func<TResult>> scalar,
			 int? lastChangesToApplyOnResumeCount)
			
		{
			return new ObservableComputations.ScalarPausing<TResult>(
				scalar: new Computing<TResult>(scalar),
				initialIsPaused: false,
				lastChangesToApplyOnResumeCount: lastChangesToApplyOnResumeCount);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ScalarPausing<TResult> ScalarPausing<TResult>(this
			 Expression<Func<TResult>> scalar)
			
		{
			return new ObservableComputations.ScalarPausing<TResult>(
				scalar: new Computing<TResult>(scalar),
				initialIsPaused: false,
				lastChangesToApplyOnResumeCount: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ScalarPausing<TResult> ScalarPausing<TResult>(this
			 ObservableComputations.IReadScalar<TResult> scalar,
			 ObservableComputations.IReadScalar<bool> isPausedScalar,
			 int? lastChangesToApplyOnResumeCount)
			
		{
			return new ObservableComputations.ScalarPausing<TResult>(
				scalar: scalar,
				isPausedScalar: isPausedScalar,
				lastChangesToApplyOnResumeCount: lastChangesToApplyOnResumeCount);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ScalarPausing<TResult> ScalarPausing<TResult>(this
			 ObservableComputations.IReadScalar<TResult> scalar,
			 ObservableComputations.IReadScalar<bool> isPausedScalar)
			
		{
			return new ObservableComputations.ScalarPausing<TResult>(
				scalar: scalar,
				isPausedScalar: isPausedScalar,
				lastChangesToApplyOnResumeCount: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ScalarPausing<TResult> ScalarPausing<TResult>(this
			 ObservableComputations.IReadScalar<TResult> scalar,
			 Expression<Func<bool>> isPausedExpression,
			 int? lastChangesToApplyOnResumeCount)
			
		{
			return new ObservableComputations.ScalarPausing<TResult>(
				scalar: scalar,
				isPausedScalar: new Computing<bool>(isPausedExpression),
				lastChangesToApplyOnResumeCount: lastChangesToApplyOnResumeCount);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ScalarPausing<TResult> ScalarPausing<TResult>(this
			 ObservableComputations.IReadScalar<TResult> scalar,
			 Expression<Func<bool>> isPausedExpression)
			
		{
			return new ObservableComputations.ScalarPausing<TResult>(
				scalar: scalar,
				isPausedScalar: new Computing<bool>(isPausedExpression),
				lastChangesToApplyOnResumeCount: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ScalarPausing<TResult> ScalarPausing<TResult>(this
			 Expression<Func<TResult>> scalar,
			 ObservableComputations.IReadScalar<bool> isPausedScalar,
			 int? lastChangesToApplyOnResumeCount)
			
		{
			return new ObservableComputations.ScalarPausing<TResult>(
				scalar: new Computing<TResult>(scalar),
				isPausedScalar: isPausedScalar,
				lastChangesToApplyOnResumeCount: lastChangesToApplyOnResumeCount);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ScalarPausing<TResult> ScalarPausing<TResult>(this
			 Expression<Func<TResult>> scalar,
			 ObservableComputations.IReadScalar<bool> isPausedScalar)
			
		{
			return new ObservableComputations.ScalarPausing<TResult>(
				scalar: new Computing<TResult>(scalar),
				isPausedScalar: isPausedScalar,
				lastChangesToApplyOnResumeCount: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ScalarPausing<TResult> ScalarPausing<TResult>(this
			 Expression<Func<TResult>> scalar,
			 Expression<Func<bool>> isPausedExpression,
			 int? lastChangesToApplyOnResumeCount)
			
		{
			return new ObservableComputations.ScalarPausing<TResult>(
				scalar: new Computing<TResult>(scalar),
				isPausedScalar: new Computing<bool>(isPausedExpression),
				lastChangesToApplyOnResumeCount: lastChangesToApplyOnResumeCount);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ScalarPausing<TResult> ScalarPausing<TResult>(this
			 Expression<Func<TResult>> scalar,
			 Expression<Func<bool>> isPausedExpression)
			
		{
			return new ObservableComputations.ScalarPausing<TResult>(
				scalar: new Computing<TResult>(scalar),
				isPausedScalar: new Computing<bool>(isPausedExpression),
				lastChangesToApplyOnResumeCount: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ScalarPausing<TResult> ScalarPausing<TResult>(this
			 ObservableComputations.IReadScalar<TResult> scalar,
			 ObservableComputations.IReadScalar<bool> isPausedScalar,
			 ObservableComputations.IReadScalar<int?> lastChangesToApplyOnResumeCountScalar)
			
		{
			return new ObservableComputations.ScalarPausing<TResult>(
				scalar: scalar,
				isPausedScalar: isPausedScalar,
				lastChangesToApplyOnResumeCountScalar: lastChangesToApplyOnResumeCountScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ScalarPausing<TResult> ScalarPausing<TResult>(this
			 ObservableComputations.IReadScalar<TResult> scalar,
			 ObservableComputations.IReadScalar<bool> isPausedScalar,
			 Expression<Func<int?>> lastChangesToApplyOnResumeCountExpression)
			
		{
			return new ObservableComputations.ScalarPausing<TResult>(
				scalar: scalar,
				isPausedScalar: isPausedScalar,
				lastChangesToApplyOnResumeCountScalar: new Computing<int?>(lastChangesToApplyOnResumeCountExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ScalarPausing<TResult> ScalarPausing<TResult>(this
			 ObservableComputations.IReadScalar<TResult> scalar,
			 Expression<Func<bool>> isPausedExpression,
			 ObservableComputations.IReadScalar<int?> lastChangesToApplyOnResumeCountScalar)
			
		{
			return new ObservableComputations.ScalarPausing<TResult>(
				scalar: scalar,
				isPausedScalar: new Computing<bool>(isPausedExpression),
				lastChangesToApplyOnResumeCountScalar: lastChangesToApplyOnResumeCountScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ScalarPausing<TResult> ScalarPausing<TResult>(this
			 ObservableComputations.IReadScalar<TResult> scalar,
			 Expression<Func<bool>> isPausedExpression,
			 Expression<Func<int?>> lastChangesToApplyOnResumeCountExpression)
			
		{
			return new ObservableComputations.ScalarPausing<TResult>(
				scalar: scalar,
				isPausedScalar: new Computing<bool>(isPausedExpression),
				lastChangesToApplyOnResumeCountScalar: new Computing<int?>(lastChangesToApplyOnResumeCountExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ScalarPausing<TResult> ScalarPausing<TResult>(this
			 Expression<Func<TResult>> scalar,
			 ObservableComputations.IReadScalar<bool> isPausedScalar,
			 ObservableComputations.IReadScalar<int?> lastChangesToApplyOnResumeCountScalar)
			
		{
			return new ObservableComputations.ScalarPausing<TResult>(
				scalar: new Computing<TResult>(scalar),
				isPausedScalar: isPausedScalar,
				lastChangesToApplyOnResumeCountScalar: lastChangesToApplyOnResumeCountScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ScalarPausing<TResult> ScalarPausing<TResult>(this
			 Expression<Func<TResult>> scalar,
			 ObservableComputations.IReadScalar<bool> isPausedScalar,
			 Expression<Func<int?>> lastChangesToApplyOnResumeCountExpression)
			
		{
			return new ObservableComputations.ScalarPausing<TResult>(
				scalar: new Computing<TResult>(scalar),
				isPausedScalar: isPausedScalar,
				lastChangesToApplyOnResumeCountScalar: new Computing<int?>(lastChangesToApplyOnResumeCountExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ScalarPausing<TResult> ScalarPausing<TResult>(this
			 Expression<Func<TResult>> scalar,
			 Expression<Func<bool>> isPausedExpression,
			 ObservableComputations.IReadScalar<int?> lastChangesToApplyOnResumeCountScalar)
			
		{
			return new ObservableComputations.ScalarPausing<TResult>(
				scalar: new Computing<TResult>(scalar),
				isPausedScalar: new Computing<bool>(isPausedExpression),
				lastChangesToApplyOnResumeCountScalar: lastChangesToApplyOnResumeCountScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ScalarPausing<TResult> ScalarPausing<TResult>(this
			 Expression<Func<TResult>> scalar,
			 Expression<Func<bool>> isPausedExpression,
			 Expression<Func<int?>> lastChangesToApplyOnResumeCountExpression)
			
		{
			return new ObservableComputations.ScalarPausing<TResult>(
				scalar: new Computing<TResult>(scalar),
				isPausedScalar: new Computing<bool>(isPausedExpression),
				lastChangesToApplyOnResumeCountScalar: new Computing<int?>(lastChangesToApplyOnResumeCountExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ScalarPausing<TResult> ScalarPausing<TResult>(this
			 ObservableComputations.IReadScalar<TResult> scalar,
			 bool initialIsPaused,
			 ObservableComputations.IReadScalar<int?> lastChangesToApplyOnResumeCountScalar)
			
		{
			return new ObservableComputations.ScalarPausing<TResult>(
				scalar: scalar,
				initialIsPaused: initialIsPaused,
				lastChangesToApplyOnResumeCountScalar: lastChangesToApplyOnResumeCountScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ScalarPausing<TResult> ScalarPausing<TResult>(this
			 ObservableComputations.IReadScalar<TResult> scalar,
			 bool initialIsPaused,
			 Expression<Func<int?>> lastChangesToApplyOnResumeCountExpression)
			
		{
			return new ObservableComputations.ScalarPausing<TResult>(
				scalar: scalar,
				initialIsPaused: initialIsPaused,
				lastChangesToApplyOnResumeCountScalar: new Computing<int?>(lastChangesToApplyOnResumeCountExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ScalarPausing<TResult> ScalarPausing<TResult>(this
			 Expression<Func<TResult>> scalar,
			 bool initialIsPaused,
			 ObservableComputations.IReadScalar<int?> lastChangesToApplyOnResumeCountScalar)
			
		{
			return new ObservableComputations.ScalarPausing<TResult>(
				scalar: new Computing<TResult>(scalar),
				initialIsPaused: initialIsPaused,
				lastChangesToApplyOnResumeCountScalar: lastChangesToApplyOnResumeCountScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ScalarPausing<TResult> ScalarPausing<TResult>(this
			 Expression<Func<TResult>> scalar,
			 bool initialIsPaused,
			 Expression<Func<int?>> lastChangesToApplyOnResumeCountExpression)
			
		{
			return new ObservableComputations.ScalarPausing<TResult>(
				scalar: new Computing<TResult>(scalar),
				initialIsPaused: initialIsPaused,
				lastChangesToApplyOnResumeCountScalar: new Computing<int?>(lastChangesToApplyOnResumeCountExpression));
		}

		#endregion
		#region Selecting

		[ObservableComputationsCall]
		public static ObservableComputations.Selecting<TSourceItem, TResultItem> Selecting<TSourceItem, TResultItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TResultItem>> selectorExpression)
			
		{
			return new ObservableComputations.Selecting<TSourceItem, TResultItem>(
				sourceScalar: sourceScalar,
				selectorExpression: selectorExpression);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Selecting<TSourceItem, TResultItem> Selecting<TSourceItem, TResultItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TResultItem>> selectorExpression)
			
		{
			return new ObservableComputations.Selecting<TSourceItem, TResultItem>(
				sourceScalar: sourceScalar,
				selectorExpression: selectorExpression);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Selecting<TSourceItem, TResultItem> Selecting<TSourceItem, TResultItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TResultItem>> selectorExpression)
			
		{
			return new ObservableComputations.Selecting<TSourceItem, TResultItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				selectorExpression: selectorExpression);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Selecting<TSourceItem, TResultItem> Selecting<TSourceItem, TResultItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TResultItem>> selectorExpression)
			
		{
			return new ObservableComputations.Selecting<TSourceItem, TResultItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				selectorExpression: selectorExpression);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Selecting<TSourceItem, TResultItem> Selecting<TSourceItem, TResultItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TResultItem>> selectorExpression)
			
		{
			return new ObservableComputations.Selecting<TSourceItem, TResultItem>(
				source: source,
				selectorExpression: selectorExpression);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Selecting<TSourceItem, TResultItem> Selecting<TSourceItem, TResultItem>(this
			 ObservableCollection<TSourceItem> source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TResultItem>> selectorExpression)
			
		{
			return new ObservableComputations.Selecting<TSourceItem, TResultItem>(
				source: source,
				selectorExpression: selectorExpression);
		}

		#endregion
		#region SelectingMany

		[ObservableComputationsCall]
		public static ObservableComputations.SelectingMany<TSourceItem, TResultItem> SelectingMany<TSourceItem, TResultItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, System.Collections.Specialized.INotifyCollectionChanged>> selectorExpression)
			
		{
			return new ObservableComputations.SelectingMany<TSourceItem, TResultItem>(
				sourceScalar: sourceScalar,
				selectorExpression: selectorExpression);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.SelectingMany<TSourceItem, TResultItem> SelectingMany<TSourceItem, TResultItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, System.Collections.Specialized.INotifyCollectionChanged>> selectorExpression)
			
		{
			return new ObservableComputations.SelectingMany<TSourceItem, TResultItem>(
				sourceScalar: sourceScalar,
				selectorExpression: selectorExpression);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.SelectingMany<TSourceItem, TResultItem> SelectingMany<TSourceItem, TResultItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, System.Collections.Specialized.INotifyCollectionChanged>> selectorExpression)
			
		{
			return new ObservableComputations.SelectingMany<TSourceItem, TResultItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				selectorExpression: selectorExpression);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.SelectingMany<TSourceItem, TResultItem> SelectingMany<TSourceItem, TResultItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, System.Collections.Specialized.INotifyCollectionChanged>> selectorExpression)
			
		{
			return new ObservableComputations.SelectingMany<TSourceItem, TResultItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				selectorExpression: selectorExpression);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.SelectingMany<TSourceItem, TResultItem> SelectingMany<TSourceItem, TResultItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, System.Collections.Specialized.INotifyCollectionChanged>> selectorExpression)
			
		{
			return new ObservableComputations.SelectingMany<TSourceItem, TResultItem>(
				source: source,
				selectorExpression: selectorExpression);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.SelectingMany<TSourceItem, TResultItem> SelectingMany<TSourceItem, TResultItem>(this
			 ObservableCollection<TSourceItem> source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, System.Collections.Specialized.INotifyCollectionChanged>> selectorExpression)
			
		{
			return new ObservableComputations.SelectingMany<TSourceItem, TResultItem>(
				source: source,
				selectorExpression: selectorExpression);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.SelectingMany<TSourceItem, TResultItem> SelectingMany<TSourceItem, TResultItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, int, System.Collections.Specialized.INotifyCollectionChanged>> selectorExpression)
			
		{
			return new ObservableComputations.SelectingMany<TSourceItem, TResultItem>(
				sourceScalar: sourceScalar,
				selectorExpression: selectorExpression);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.SelectingMany<TSourceItem, TResultItem> SelectingMany<TSourceItem, TResultItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, int, System.Collections.Specialized.INotifyCollectionChanged>> selectorExpression)
			
		{
			return new ObservableComputations.SelectingMany<TSourceItem, TResultItem>(
				sourceScalar: sourceScalar,
				selectorExpression: selectorExpression);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.SelectingMany<TSourceItem, TResultItem> SelectingMany<TSourceItem, TResultItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, int, System.Collections.Specialized.INotifyCollectionChanged>> selectorExpression)
			
		{
			return new ObservableComputations.SelectingMany<TSourceItem, TResultItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				selectorExpression: selectorExpression);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.SelectingMany<TSourceItem, TResultItem> SelectingMany<TSourceItem, TResultItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, int, System.Collections.Specialized.INotifyCollectionChanged>> selectorExpression)
			
		{
			return new ObservableComputations.SelectingMany<TSourceItem, TResultItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				selectorExpression: selectorExpression);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.SelectingMany<TSourceItem, TResultItem> SelectingMany<TSourceItem, TResultItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, int, System.Collections.Specialized.INotifyCollectionChanged>> selectorExpression)
			
		{
			return new ObservableComputations.SelectingMany<TSourceItem, TResultItem>(
				source: source,
				selectorExpression: selectorExpression);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.SelectingMany<TSourceItem, TResultItem> SelectingMany<TSourceItem, TResultItem>(this
			 ObservableCollection<TSourceItem> source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, int, System.Collections.Specialized.INotifyCollectionChanged>> selectorExpression)
			
		{
			return new ObservableComputations.SelectingMany<TSourceItem, TResultItem>(
				source: source,
				selectorExpression: selectorExpression);
		}

		#endregion
		#region SequenceComputing

		[ObservableComputationsCall]
		public static ObservableComputations.SequenceComputing SequenceComputing(this
			 ObservableComputations.IReadScalar<int> countScalar)
			
		{
			return new ObservableComputations.SequenceComputing(
				countScalar: countScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.SequenceComputing SequenceComputing(this
			 Expression<Func<int>> countExpression)
			
		{
			return new ObservableComputations.SequenceComputing(
				countScalar: new Computing<int>(countExpression));
		}

		#endregion
		#region Skipping

		[ObservableComputationsCall]
		public static ObservableComputations.Skipping<TSourceItem> Skipping<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 ObservableComputations.IReadScalar<int> countScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Skipping<TSourceItem>(
				sourceScalar: sourceScalar,
				countScalar: countScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Skipping<TSourceItem> Skipping<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 ObservableComputations.IReadScalar<int> countScalar)
			
		{
			return new ObservableComputations.Skipping<TSourceItem>(
				sourceScalar: sourceScalar,
				countScalar: countScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Skipping<TSourceItem> Skipping<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 Expression<Func<int>> countExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Skipping<TSourceItem>(
				sourceScalar: sourceScalar,
				countScalar: new Computing<int>(countExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Skipping<TSourceItem> Skipping<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 Expression<Func<int>> countExpression)
			
		{
			return new ObservableComputations.Skipping<TSourceItem>(
				sourceScalar: sourceScalar,
				countScalar: new Computing<int>(countExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Skipping<TSourceItem> Skipping<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 ObservableComputations.IReadScalar<int> countScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Skipping<TSourceItem>(
				sourceScalar: sourceScalar,
				countScalar: countScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Skipping<TSourceItem> Skipping<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 ObservableComputations.IReadScalar<int> countScalar)
			
		{
			return new ObservableComputations.Skipping<TSourceItem>(
				sourceScalar: sourceScalar,
				countScalar: countScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Skipping<TSourceItem> Skipping<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 Expression<Func<int>> countExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Skipping<TSourceItem>(
				sourceScalar: sourceScalar,
				countScalar: new Computing<int>(countExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Skipping<TSourceItem> Skipping<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 Expression<Func<int>> countExpression)
			
		{
			return new ObservableComputations.Skipping<TSourceItem>(
				sourceScalar: sourceScalar,
				countScalar: new Computing<int>(countExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Skipping<TSourceItem> Skipping<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 ObservableComputations.IReadScalar<int> countScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Skipping<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				countScalar: countScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Skipping<TSourceItem> Skipping<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 ObservableComputations.IReadScalar<int> countScalar)
			
		{
			return new ObservableComputations.Skipping<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				countScalar: countScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Skipping<TSourceItem> Skipping<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 Expression<Func<int>> countExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Skipping<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				countScalar: new Computing<int>(countExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Skipping<TSourceItem> Skipping<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 Expression<Func<int>> countExpression)
			
		{
			return new ObservableComputations.Skipping<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				countScalar: new Computing<int>(countExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Skipping<TSourceItem> Skipping<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 ObservableComputations.IReadScalar<int> countScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Skipping<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				countScalar: countScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Skipping<TSourceItem> Skipping<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 ObservableComputations.IReadScalar<int> countScalar)
			
		{
			return new ObservableComputations.Skipping<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				countScalar: countScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Skipping<TSourceItem> Skipping<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 Expression<Func<int>> countExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Skipping<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				countScalar: new Computing<int>(countExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Skipping<TSourceItem> Skipping<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 Expression<Func<int>> countExpression)
			
		{
			return new ObservableComputations.Skipping<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				countScalar: new Computing<int>(countExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Skipping<TSourceItem> Skipping<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 ObservableComputations.IReadScalar<int> countScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Skipping<TSourceItem>(
				source: source,
				countScalar: countScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Skipping<TSourceItem> Skipping<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 ObservableComputations.IReadScalar<int> countScalar)
			
		{
			return new ObservableComputations.Skipping<TSourceItem>(
				source: source,
				countScalar: countScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Skipping<TSourceItem> Skipping<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 Expression<Func<int>> countExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Skipping<TSourceItem>(
				source: source,
				countScalar: new Computing<int>(countExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Skipping<TSourceItem> Skipping<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 Expression<Func<int>> countExpression)
			
		{
			return new ObservableComputations.Skipping<TSourceItem>(
				source: source,
				countScalar: new Computing<int>(countExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Skipping<TSourceItem> Skipping<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 ObservableComputations.IReadScalar<int> countScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Skipping<TSourceItem>(
				source: source,
				countScalar: countScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Skipping<TSourceItem> Skipping<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 ObservableComputations.IReadScalar<int> countScalar)
			
		{
			return new ObservableComputations.Skipping<TSourceItem>(
				source: source,
				countScalar: countScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Skipping<TSourceItem> Skipping<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 Expression<Func<int>> countExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Skipping<TSourceItem>(
				source: source,
				countScalar: new Computing<int>(countExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Skipping<TSourceItem> Skipping<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 Expression<Func<int>> countExpression)
			
		{
			return new ObservableComputations.Skipping<TSourceItem>(
				source: source,
				countScalar: new Computing<int>(countExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Skipping<TSourceItem> Skipping<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 int count,
			 int capacity)
			
		{
			return new ObservableComputations.Skipping<TSourceItem>(
				sourceScalar: sourceScalar,
				count: count,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Skipping<TSourceItem> Skipping<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 int count)
			
		{
			return new ObservableComputations.Skipping<TSourceItem>(
				sourceScalar: sourceScalar,
				count: count,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Skipping<TSourceItem> Skipping<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 int count,
			 int capacity)
			
		{
			return new ObservableComputations.Skipping<TSourceItem>(
				sourceScalar: sourceScalar,
				count: count,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Skipping<TSourceItem> Skipping<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 int count)
			
		{
			return new ObservableComputations.Skipping<TSourceItem>(
				sourceScalar: sourceScalar,
				count: count,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Skipping<TSourceItem> Skipping<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 int count,
			 int capacity)
			
		{
			return new ObservableComputations.Skipping<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				count: count,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Skipping<TSourceItem> Skipping<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 int count)
			
		{
			return new ObservableComputations.Skipping<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				count: count,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Skipping<TSourceItem> Skipping<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 int count,
			 int capacity)
			
		{
			return new ObservableComputations.Skipping<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				count: count,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Skipping<TSourceItem> Skipping<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 int count)
			
		{
			return new ObservableComputations.Skipping<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				count: count,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Skipping<TSourceItem> Skipping<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 int count,
			 int capacity)
			
		{
			return new ObservableComputations.Skipping<TSourceItem>(
				source: source,
				count: count,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Skipping<TSourceItem> Skipping<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 int count)
			
		{
			return new ObservableComputations.Skipping<TSourceItem>(
				source: source,
				count: count,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Skipping<TSourceItem> Skipping<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 int count,
			 int capacity)
			
		{
			return new ObservableComputations.Skipping<TSourceItem>(
				source: source,
				count: count,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Skipping<TSourceItem> Skipping<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 int count)
			
		{
			return new ObservableComputations.Skipping<TSourceItem>(
				source: source,
				count: count,
				capacity: 0);
		}

		#endregion
		#region SkippingWhile

		[ObservableComputationsCall]
		public static ObservableComputations.SkippingWhile<TSourceItem> SkippingWhile<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, int, bool>> predicateExpression,
			 int capacity)
			
		{
			return new ObservableComputations.SkippingWhile<TSourceItem>(
				sourceScalar: sourceScalar,
				predicateExpression: predicateExpression,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.SkippingWhile<TSourceItem> SkippingWhile<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, int, bool>> predicateExpression)
			
		{
			return new ObservableComputations.SkippingWhile<TSourceItem>(
				sourceScalar: sourceScalar,
				predicateExpression: predicateExpression,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.SkippingWhile<TSourceItem> SkippingWhile<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, int, bool>> predicateExpression,
			 int capacity)
			
		{
			return new ObservableComputations.SkippingWhile<TSourceItem>(
				sourceScalar: sourceScalar,
				predicateExpression: predicateExpression,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.SkippingWhile<TSourceItem> SkippingWhile<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, int, bool>> predicateExpression)
			
		{
			return new ObservableComputations.SkippingWhile<TSourceItem>(
				sourceScalar: sourceScalar,
				predicateExpression: predicateExpression,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.SkippingWhile<TSourceItem> SkippingWhile<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, int, bool>> predicateExpression,
			 int capacity)
			
		{
			return new ObservableComputations.SkippingWhile<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				predicateExpression: predicateExpression,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.SkippingWhile<TSourceItem> SkippingWhile<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, int, bool>> predicateExpression)
			
		{
			return new ObservableComputations.SkippingWhile<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				predicateExpression: predicateExpression,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.SkippingWhile<TSourceItem> SkippingWhile<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, int, bool>> predicateExpression,
			 int capacity)
			
		{
			return new ObservableComputations.SkippingWhile<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				predicateExpression: predicateExpression,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.SkippingWhile<TSourceItem> SkippingWhile<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, int, bool>> predicateExpression)
			
		{
			return new ObservableComputations.SkippingWhile<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				predicateExpression: predicateExpression,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.SkippingWhile<TSourceItem> SkippingWhile<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, int, bool>> predicateExpression,
			 int capacity)
			
		{
			return new ObservableComputations.SkippingWhile<TSourceItem>(
				source: source,
				predicateExpression: predicateExpression,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.SkippingWhile<TSourceItem> SkippingWhile<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, int, bool>> predicateExpression)
			
		{
			return new ObservableComputations.SkippingWhile<TSourceItem>(
				source: source,
				predicateExpression: predicateExpression,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.SkippingWhile<TSourceItem> SkippingWhile<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, int, bool>> predicateExpression,
			 int capacity)
			
		{
			return new ObservableComputations.SkippingWhile<TSourceItem>(
				source: source,
				predicateExpression: predicateExpression,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.SkippingWhile<TSourceItem> SkippingWhile<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, int, bool>> predicateExpression)
			
		{
			return new ObservableComputations.SkippingWhile<TSourceItem>(
				source: source,
				predicateExpression: predicateExpression,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.SkippingWhile<TSourceItem> SkippingWhile<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, bool>> predicateExpression,
			 int capacity)
			
		{
			return new ObservableComputations.SkippingWhile<TSourceItem>(
				sourceScalar: sourceScalar,
				predicateExpression: predicateExpression,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.SkippingWhile<TSourceItem> SkippingWhile<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, bool>> predicateExpression)
			
		{
			return new ObservableComputations.SkippingWhile<TSourceItem>(
				sourceScalar: sourceScalar,
				predicateExpression: predicateExpression,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.SkippingWhile<TSourceItem> SkippingWhile<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, bool>> predicateExpression,
			 int capacity)
			
		{
			return new ObservableComputations.SkippingWhile<TSourceItem>(
				sourceScalar: sourceScalar,
				predicateExpression: predicateExpression,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.SkippingWhile<TSourceItem> SkippingWhile<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, bool>> predicateExpression)
			
		{
			return new ObservableComputations.SkippingWhile<TSourceItem>(
				sourceScalar: sourceScalar,
				predicateExpression: predicateExpression,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.SkippingWhile<TSourceItem> SkippingWhile<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, bool>> predicateExpression,
			 int capacity)
			
		{
			return new ObservableComputations.SkippingWhile<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				predicateExpression: predicateExpression,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.SkippingWhile<TSourceItem> SkippingWhile<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, bool>> predicateExpression)
			
		{
			return new ObservableComputations.SkippingWhile<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				predicateExpression: predicateExpression,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.SkippingWhile<TSourceItem> SkippingWhile<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, bool>> predicateExpression,
			 int capacity)
			
		{
			return new ObservableComputations.SkippingWhile<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				predicateExpression: predicateExpression,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.SkippingWhile<TSourceItem> SkippingWhile<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, bool>> predicateExpression)
			
		{
			return new ObservableComputations.SkippingWhile<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				predicateExpression: predicateExpression,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.SkippingWhile<TSourceItem> SkippingWhile<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, bool>> predicateExpression,
			 int capacity)
			
		{
			return new ObservableComputations.SkippingWhile<TSourceItem>(
				source: source,
				predicateExpression: predicateExpression,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.SkippingWhile<TSourceItem> SkippingWhile<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, bool>> predicateExpression)
			
		{
			return new ObservableComputations.SkippingWhile<TSourceItem>(
				source: source,
				predicateExpression: predicateExpression,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.SkippingWhile<TSourceItem> SkippingWhile<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, bool>> predicateExpression,
			 int capacity)
			
		{
			return new ObservableComputations.SkippingWhile<TSourceItem>(
				source: source,
				predicateExpression: predicateExpression,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.SkippingWhile<TSourceItem> SkippingWhile<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, bool>> predicateExpression)
			
		{
			return new ObservableComputations.SkippingWhile<TSourceItem>(
				source: source,
				predicateExpression: predicateExpression,
				capacity: 0);
		}

		#endregion
		#region StringsConcatenating

		[ObservableComputationsCall]
		public static ObservableComputations.StringsConcatenating StringsConcatenating(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 ObservableComputations.IReadScalar<string> separatorScalar)
			
		{
			return new ObservableComputations.StringsConcatenating(
				sourceScalar: sourceScalar,
				separatorScalar: separatorScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.StringsConcatenating StringsConcatenating(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar)
			
		{
			return new ObservableComputations.StringsConcatenating(
				sourceScalar: sourceScalar,
				separatorScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.StringsConcatenating StringsConcatenating(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 Expression<Func<string>> separatorExpression)
			
		{
			return new ObservableComputations.StringsConcatenating(
				sourceScalar: sourceScalar,
				separatorScalar: new Computing<string>(separatorExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.StringsConcatenating StringsConcatenating(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 ObservableComputations.IReadScalar<string> separatorScalar)
			
		{
			return new ObservableComputations.StringsConcatenating(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				separatorScalar: separatorScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.StringsConcatenating StringsConcatenating(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression)
			
		{
			return new ObservableComputations.StringsConcatenating(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				separatorScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.StringsConcatenating StringsConcatenating(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 Expression<Func<string>> separatorExpression)
			
		{
			return new ObservableComputations.StringsConcatenating(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				separatorScalar: new Computing<string>(separatorExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.StringsConcatenating StringsConcatenating(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 ObservableComputations.IReadScalar<string> separatorScalar)
			
		{
			return new ObservableComputations.StringsConcatenating(
				source: source,
				separatorScalar: separatorScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.StringsConcatenating StringsConcatenating(this
			 System.Collections.Specialized.INotifyCollectionChanged source)
			
		{
			return new ObservableComputations.StringsConcatenating(
				source: source,
				separatorScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.StringsConcatenating StringsConcatenating(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 Expression<Func<string>> separatorExpression)
			
		{
			return new ObservableComputations.StringsConcatenating(
				source: source,
				separatorScalar: new Computing<string>(separatorExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.StringsConcatenating StringsConcatenating(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 string separator)
			
		{
			return new ObservableComputations.StringsConcatenating(
				source: source,
				separator: separator);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.StringsConcatenating StringsConcatenating(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 string separator)
			
		{
			return new ObservableComputations.StringsConcatenating(
				sourceScalar: sourceScalar,
				separator: separator);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.StringsConcatenating StringsConcatenating(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 string separator)
			
		{
			return new ObservableComputations.StringsConcatenating(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				separator: separator);
		}

		#endregion
		#region Summarizing

		[ObservableComputationsCall]
		public static ObservableComputations.Summarizing<TSourceItem> Summarizing<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar)
			
		{
			return new ObservableComputations.Summarizing<TSourceItem>(
				sourceScalar: sourceScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Summarizing<TSourceItem> Summarizing<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar)
			
		{
			return new ObservableComputations.Summarizing<TSourceItem>(
				sourceScalar: sourceScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Summarizing<TSourceItem> Summarizing<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression)
			
		{
			return new ObservableComputations.Summarizing<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Summarizing<TSourceItem> Summarizing<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression)
			
		{
			return new ObservableComputations.Summarizing<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Summarizing<TSourceItem> Summarizing<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source)
			
		{
			return new ObservableComputations.Summarizing<TSourceItem>(
				source: source);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Summarizing<TSourceItem> Summarizing<TSourceItem>(this
			 ObservableCollection<TSourceItem> source)
			
		{
			return new ObservableComputations.Summarizing<TSourceItem>(
				source: source);
		}

		#endregion
		#region Taking

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 ObservableComputations.IReadScalar<int> startIndexScalar,
			 ObservableComputations.IReadScalar<int> countScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				sourceScalar: sourceScalar,
				startIndexScalar: startIndexScalar,
				countScalar: countScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 ObservableComputations.IReadScalar<int> startIndexScalar,
			 ObservableComputations.IReadScalar<int> countScalar)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				sourceScalar: sourceScalar,
				startIndexScalar: startIndexScalar,
				countScalar: countScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 ObservableComputations.IReadScalar<int> startIndexScalar,
			 Expression<Func<int>> countExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				sourceScalar: sourceScalar,
				startIndexScalar: startIndexScalar,
				countScalar: new Computing<int>(countExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 ObservableComputations.IReadScalar<int> startIndexScalar,
			 Expression<Func<int>> countExpression)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				sourceScalar: sourceScalar,
				startIndexScalar: startIndexScalar,
				countScalar: new Computing<int>(countExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 Expression<Func<int>> startIndexExpression,
			 ObservableComputations.IReadScalar<int> countScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				sourceScalar: sourceScalar,
				startIndexScalar: new Computing<int>(startIndexExpression),
				countScalar: countScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 Expression<Func<int>> startIndexExpression,
			 ObservableComputations.IReadScalar<int> countScalar)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				sourceScalar: sourceScalar,
				startIndexScalar: new Computing<int>(startIndexExpression),
				countScalar: countScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 Expression<Func<int>> startIndexExpression,
			 Expression<Func<int>> countExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				sourceScalar: sourceScalar,
				startIndexScalar: new Computing<int>(startIndexExpression),
				countScalar: new Computing<int>(countExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 Expression<Func<int>> startIndexExpression,
			 Expression<Func<int>> countExpression)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				sourceScalar: sourceScalar,
				startIndexScalar: new Computing<int>(startIndexExpression),
				countScalar: new Computing<int>(countExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 ObservableComputations.IReadScalar<int> startIndexScalar,
			 ObservableComputations.IReadScalar<int> countScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				sourceScalar: sourceScalar,
				startIndexScalar: startIndexScalar,
				countScalar: countScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 ObservableComputations.IReadScalar<int> startIndexScalar,
			 ObservableComputations.IReadScalar<int> countScalar)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				sourceScalar: sourceScalar,
				startIndexScalar: startIndexScalar,
				countScalar: countScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 ObservableComputations.IReadScalar<int> startIndexScalar,
			 Expression<Func<int>> countExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				sourceScalar: sourceScalar,
				startIndexScalar: startIndexScalar,
				countScalar: new Computing<int>(countExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 ObservableComputations.IReadScalar<int> startIndexScalar,
			 Expression<Func<int>> countExpression)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				sourceScalar: sourceScalar,
				startIndexScalar: startIndexScalar,
				countScalar: new Computing<int>(countExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 Expression<Func<int>> startIndexExpression,
			 ObservableComputations.IReadScalar<int> countScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				sourceScalar: sourceScalar,
				startIndexScalar: new Computing<int>(startIndexExpression),
				countScalar: countScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 Expression<Func<int>> startIndexExpression,
			 ObservableComputations.IReadScalar<int> countScalar)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				sourceScalar: sourceScalar,
				startIndexScalar: new Computing<int>(startIndexExpression),
				countScalar: countScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 Expression<Func<int>> startIndexExpression,
			 Expression<Func<int>> countExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				sourceScalar: sourceScalar,
				startIndexScalar: new Computing<int>(startIndexExpression),
				countScalar: new Computing<int>(countExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 Expression<Func<int>> startIndexExpression,
			 Expression<Func<int>> countExpression)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				sourceScalar: sourceScalar,
				startIndexScalar: new Computing<int>(startIndexExpression),
				countScalar: new Computing<int>(countExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 ObservableComputations.IReadScalar<int> startIndexScalar,
			 ObservableComputations.IReadScalar<int> countScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				startIndexScalar: startIndexScalar,
				countScalar: countScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 ObservableComputations.IReadScalar<int> startIndexScalar,
			 ObservableComputations.IReadScalar<int> countScalar)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				startIndexScalar: startIndexScalar,
				countScalar: countScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 ObservableComputations.IReadScalar<int> startIndexScalar,
			 Expression<Func<int>> countExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				startIndexScalar: startIndexScalar,
				countScalar: new Computing<int>(countExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 ObservableComputations.IReadScalar<int> startIndexScalar,
			 Expression<Func<int>> countExpression)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				startIndexScalar: startIndexScalar,
				countScalar: new Computing<int>(countExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 Expression<Func<int>> startIndexExpression,
			 ObservableComputations.IReadScalar<int> countScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				startIndexScalar: new Computing<int>(startIndexExpression),
				countScalar: countScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 Expression<Func<int>> startIndexExpression,
			 ObservableComputations.IReadScalar<int> countScalar)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				startIndexScalar: new Computing<int>(startIndexExpression),
				countScalar: countScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 Expression<Func<int>> startIndexExpression,
			 Expression<Func<int>> countExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				startIndexScalar: new Computing<int>(startIndexExpression),
				countScalar: new Computing<int>(countExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 Expression<Func<int>> startIndexExpression,
			 Expression<Func<int>> countExpression)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				startIndexScalar: new Computing<int>(startIndexExpression),
				countScalar: new Computing<int>(countExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 ObservableComputations.IReadScalar<int> startIndexScalar,
			 ObservableComputations.IReadScalar<int> countScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				startIndexScalar: startIndexScalar,
				countScalar: countScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 ObservableComputations.IReadScalar<int> startIndexScalar,
			 ObservableComputations.IReadScalar<int> countScalar)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				startIndexScalar: startIndexScalar,
				countScalar: countScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 ObservableComputations.IReadScalar<int> startIndexScalar,
			 Expression<Func<int>> countExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				startIndexScalar: startIndexScalar,
				countScalar: new Computing<int>(countExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 ObservableComputations.IReadScalar<int> startIndexScalar,
			 Expression<Func<int>> countExpression)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				startIndexScalar: startIndexScalar,
				countScalar: new Computing<int>(countExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 Expression<Func<int>> startIndexExpression,
			 ObservableComputations.IReadScalar<int> countScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				startIndexScalar: new Computing<int>(startIndexExpression),
				countScalar: countScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 Expression<Func<int>> startIndexExpression,
			 ObservableComputations.IReadScalar<int> countScalar)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				startIndexScalar: new Computing<int>(startIndexExpression),
				countScalar: countScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 Expression<Func<int>> startIndexExpression,
			 Expression<Func<int>> countExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				startIndexScalar: new Computing<int>(startIndexExpression),
				countScalar: new Computing<int>(countExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 Expression<Func<int>> startIndexExpression,
			 Expression<Func<int>> countExpression)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				startIndexScalar: new Computing<int>(startIndexExpression),
				countScalar: new Computing<int>(countExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 ObservableComputations.IReadScalar<int> startIndexScalar,
			 int count)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				sourceScalar: sourceScalar,
				startIndexScalar: startIndexScalar,
				count: count);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 Expression<Func<int>> startIndexExpression,
			 int count)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				sourceScalar: sourceScalar,
				startIndexScalar: new Computing<int>(startIndexExpression),
				count: count);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 ObservableComputations.IReadScalar<int> startIndexScalar,
			 int count)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				sourceScalar: sourceScalar,
				startIndexScalar: startIndexScalar,
				count: count);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 Expression<Func<int>> startIndexExpression,
			 int count)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				sourceScalar: sourceScalar,
				startIndexScalar: new Computing<int>(startIndexExpression),
				count: count);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 ObservableComputations.IReadScalar<int> startIndexScalar,
			 int count)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				startIndexScalar: startIndexScalar,
				count: count);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 Expression<Func<int>> startIndexExpression,
			 int count)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				startIndexScalar: new Computing<int>(startIndexExpression),
				count: count);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 ObservableComputations.IReadScalar<int> startIndexScalar,
			 int count)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				startIndexScalar: startIndexScalar,
				count: count);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 Expression<Func<int>> startIndexExpression,
			 int count)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				startIndexScalar: new Computing<int>(startIndexExpression),
				count: count);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 int startIndex,
			 ObservableComputations.IReadScalar<int> countScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				sourceScalar: sourceScalar,
				startIndex: startIndex,
				countScalar: countScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 int startIndex,
			 ObservableComputations.IReadScalar<int> countScalar)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				sourceScalar: sourceScalar,
				startIndex: startIndex,
				countScalar: countScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 int startIndex,
			 Expression<Func<int>> countExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				sourceScalar: sourceScalar,
				startIndex: startIndex,
				countScalar: new Computing<int>(countExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 int startIndex,
			 Expression<Func<int>> countExpression)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				sourceScalar: sourceScalar,
				startIndex: startIndex,
				countScalar: new Computing<int>(countExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 int startIndex,
			 ObservableComputations.IReadScalar<int> countScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				sourceScalar: sourceScalar,
				startIndex: startIndex,
				countScalar: countScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 int startIndex,
			 ObservableComputations.IReadScalar<int> countScalar)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				sourceScalar: sourceScalar,
				startIndex: startIndex,
				countScalar: countScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 int startIndex,
			 Expression<Func<int>> countExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				sourceScalar: sourceScalar,
				startIndex: startIndex,
				countScalar: new Computing<int>(countExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 int startIndex,
			 Expression<Func<int>> countExpression)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				sourceScalar: sourceScalar,
				startIndex: startIndex,
				countScalar: new Computing<int>(countExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 int startIndex,
			 ObservableComputations.IReadScalar<int> countScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				startIndex: startIndex,
				countScalar: countScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 int startIndex,
			 ObservableComputations.IReadScalar<int> countScalar)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				startIndex: startIndex,
				countScalar: countScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 int startIndex,
			 Expression<Func<int>> countExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				startIndex: startIndex,
				countScalar: new Computing<int>(countExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 int startIndex,
			 Expression<Func<int>> countExpression)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				startIndex: startIndex,
				countScalar: new Computing<int>(countExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 int startIndex,
			 ObservableComputations.IReadScalar<int> countScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				startIndex: startIndex,
				countScalar: countScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 int startIndex,
			 ObservableComputations.IReadScalar<int> countScalar)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				startIndex: startIndex,
				countScalar: countScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 int startIndex,
			 Expression<Func<int>> countExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				startIndex: startIndex,
				countScalar: new Computing<int>(countExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 int startIndex,
			 Expression<Func<int>> countExpression)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				startIndex: startIndex,
				countScalar: new Computing<int>(countExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 int startIndex,
			 int count)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				sourceScalar: sourceScalar,
				startIndex: startIndex,
				count: count);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 int startIndex,
			 int count)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				sourceScalar: sourceScalar,
				startIndex: startIndex,
				count: count);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 int startIndex,
			 int count)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				startIndex: startIndex,
				count: count);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 int startIndex,
			 int count)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				startIndex: startIndex,
				count: count);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 ObservableComputations.IReadScalar<int> startIndexScalar,
			 ObservableComputations.IReadScalar<int> countScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				source: source,
				startIndexScalar: startIndexScalar,
				countScalar: countScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 ObservableComputations.IReadScalar<int> startIndexScalar,
			 ObservableComputations.IReadScalar<int> countScalar)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				source: source,
				startIndexScalar: startIndexScalar,
				countScalar: countScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 ObservableComputations.IReadScalar<int> startIndexScalar,
			 Expression<Func<int>> countExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				source: source,
				startIndexScalar: startIndexScalar,
				countScalar: new Computing<int>(countExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 ObservableComputations.IReadScalar<int> startIndexScalar,
			 Expression<Func<int>> countExpression)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				source: source,
				startIndexScalar: startIndexScalar,
				countScalar: new Computing<int>(countExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 Expression<Func<int>> startIndexExpression,
			 ObservableComputations.IReadScalar<int> countScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				source: source,
				startIndexScalar: new Computing<int>(startIndexExpression),
				countScalar: countScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 Expression<Func<int>> startIndexExpression,
			 ObservableComputations.IReadScalar<int> countScalar)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				source: source,
				startIndexScalar: new Computing<int>(startIndexExpression),
				countScalar: countScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 Expression<Func<int>> startIndexExpression,
			 Expression<Func<int>> countExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				source: source,
				startIndexScalar: new Computing<int>(startIndexExpression),
				countScalar: new Computing<int>(countExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 Expression<Func<int>> startIndexExpression,
			 Expression<Func<int>> countExpression)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				source: source,
				startIndexScalar: new Computing<int>(startIndexExpression),
				countScalar: new Computing<int>(countExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 ObservableComputations.IReadScalar<int> startIndexScalar,
			 ObservableComputations.IReadScalar<int> countScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				source: source,
				startIndexScalar: startIndexScalar,
				countScalar: countScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 ObservableComputations.IReadScalar<int> startIndexScalar,
			 ObservableComputations.IReadScalar<int> countScalar)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				source: source,
				startIndexScalar: startIndexScalar,
				countScalar: countScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 ObservableComputations.IReadScalar<int> startIndexScalar,
			 Expression<Func<int>> countExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				source: source,
				startIndexScalar: startIndexScalar,
				countScalar: new Computing<int>(countExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 ObservableComputations.IReadScalar<int> startIndexScalar,
			 Expression<Func<int>> countExpression)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				source: source,
				startIndexScalar: startIndexScalar,
				countScalar: new Computing<int>(countExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 Expression<Func<int>> startIndexExpression,
			 ObservableComputations.IReadScalar<int> countScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				source: source,
				startIndexScalar: new Computing<int>(startIndexExpression),
				countScalar: countScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 Expression<Func<int>> startIndexExpression,
			 ObservableComputations.IReadScalar<int> countScalar)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				source: source,
				startIndexScalar: new Computing<int>(startIndexExpression),
				countScalar: countScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 Expression<Func<int>> startIndexExpression,
			 Expression<Func<int>> countExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				source: source,
				startIndexScalar: new Computing<int>(startIndexExpression),
				countScalar: new Computing<int>(countExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 Expression<Func<int>> startIndexExpression,
			 Expression<Func<int>> countExpression)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				source: source,
				startIndexScalar: new Computing<int>(startIndexExpression),
				countScalar: new Computing<int>(countExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 ObservableComputations.IReadScalar<int> startIndexScalar,
			 int count)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				source: source,
				startIndexScalar: startIndexScalar,
				count: count);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 Expression<Func<int>> startIndexExpression,
			 int count)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				source: source,
				startIndexScalar: new Computing<int>(startIndexExpression),
				count: count);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 ObservableComputations.IReadScalar<int> startIndexScalar,
			 int count)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				source: source,
				startIndexScalar: startIndexScalar,
				count: count);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 Expression<Func<int>> startIndexExpression,
			 int count)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				source: source,
				startIndexScalar: new Computing<int>(startIndexExpression),
				count: count);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 int startIndex,
			 ObservableComputations.IReadScalar<int> countScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				source: source,
				startIndex: startIndex,
				countScalar: countScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 int startIndex,
			 ObservableComputations.IReadScalar<int> countScalar)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				source: source,
				startIndex: startIndex,
				countScalar: countScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 int startIndex,
			 Expression<Func<int>> countExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				source: source,
				startIndex: startIndex,
				countScalar: new Computing<int>(countExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 int startIndex,
			 Expression<Func<int>> countExpression)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				source: source,
				startIndex: startIndex,
				countScalar: new Computing<int>(countExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 int startIndex,
			 ObservableComputations.IReadScalar<int> countScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				source: source,
				startIndex: startIndex,
				countScalar: countScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 int startIndex,
			 ObservableComputations.IReadScalar<int> countScalar)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				source: source,
				startIndex: startIndex,
				countScalar: countScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 int startIndex,
			 Expression<Func<int>> countExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				source: source,
				startIndex: startIndex,
				countScalar: new Computing<int>(countExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 int startIndex,
			 Expression<Func<int>> countExpression)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				source: source,
				startIndex: startIndex,
				countScalar: new Computing<int>(countExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 int startIndex,
			 int count)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				source: source,
				startIndex: startIndex,
				count: count);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Taking<TSourceItem> Taking<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 int startIndex,
			 int count)
			
		{
			return new ObservableComputations.Taking<TSourceItem>(
				source: source,
				startIndex: startIndex,
				count: count);
		}

		#endregion
		#region TakingWhile

		[ObservableComputationsCall]
		public static ObservableComputations.TakingWhile<TSourceItem> TakingWhile<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, int, bool>> predicateExpression,
			 int capacity)
			
		{
			return new ObservableComputations.TakingWhile<TSourceItem>(
				sourceScalar: sourceScalar,
				predicateExpression: predicateExpression,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.TakingWhile<TSourceItem> TakingWhile<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, int, bool>> predicateExpression)
			
		{
			return new ObservableComputations.TakingWhile<TSourceItem>(
				sourceScalar: sourceScalar,
				predicateExpression: predicateExpression,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.TakingWhile<TSourceItem> TakingWhile<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, int, bool>> predicateExpression,
			 int capacity)
			
		{
			return new ObservableComputations.TakingWhile<TSourceItem>(
				sourceScalar: sourceScalar,
				predicateExpression: predicateExpression,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.TakingWhile<TSourceItem> TakingWhile<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, int, bool>> predicateExpression)
			
		{
			return new ObservableComputations.TakingWhile<TSourceItem>(
				sourceScalar: sourceScalar,
				predicateExpression: predicateExpression,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.TakingWhile<TSourceItem> TakingWhile<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, int, bool>> predicateExpression,
			 int capacity)
			
		{
			return new ObservableComputations.TakingWhile<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				predicateExpression: predicateExpression,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.TakingWhile<TSourceItem> TakingWhile<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, int, bool>> predicateExpression)
			
		{
			return new ObservableComputations.TakingWhile<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				predicateExpression: predicateExpression,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.TakingWhile<TSourceItem> TakingWhile<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, int, bool>> predicateExpression,
			 int capacity)
			
		{
			return new ObservableComputations.TakingWhile<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				predicateExpression: predicateExpression,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.TakingWhile<TSourceItem> TakingWhile<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, int, bool>> predicateExpression)
			
		{
			return new ObservableComputations.TakingWhile<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				predicateExpression: predicateExpression,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.TakingWhile<TSourceItem> TakingWhile<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, int, bool>> predicateExpression,
			 int capacity)
			
		{
			return new ObservableComputations.TakingWhile<TSourceItem>(
				source: source,
				predicateExpression: predicateExpression,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.TakingWhile<TSourceItem> TakingWhile<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, int, bool>> predicateExpression)
			
		{
			return new ObservableComputations.TakingWhile<TSourceItem>(
				source: source,
				predicateExpression: predicateExpression,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.TakingWhile<TSourceItem> TakingWhile<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, int, bool>> predicateExpression,
			 int capacity)
			
		{
			return new ObservableComputations.TakingWhile<TSourceItem>(
				source: source,
				predicateExpression: predicateExpression,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.TakingWhile<TSourceItem> TakingWhile<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, int, bool>> predicateExpression)
			
		{
			return new ObservableComputations.TakingWhile<TSourceItem>(
				source: source,
				predicateExpression: predicateExpression,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.TakingWhile<TSourceItem> TakingWhile<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, bool>> predicateExpression,
			 int capacity)
			
		{
			return new ObservableComputations.TakingWhile<TSourceItem>(
				sourceScalar: sourceScalar,
				predicateExpression: predicateExpression,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.TakingWhile<TSourceItem> TakingWhile<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, bool>> predicateExpression)
			
		{
			return new ObservableComputations.TakingWhile<TSourceItem>(
				sourceScalar: sourceScalar,
				predicateExpression: predicateExpression,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.TakingWhile<TSourceItem> TakingWhile<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, bool>> predicateExpression,
			 int capacity)
			
		{
			return new ObservableComputations.TakingWhile<TSourceItem>(
				sourceScalar: sourceScalar,
				predicateExpression: predicateExpression,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.TakingWhile<TSourceItem> TakingWhile<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, bool>> predicateExpression)
			
		{
			return new ObservableComputations.TakingWhile<TSourceItem>(
				sourceScalar: sourceScalar,
				predicateExpression: predicateExpression,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.TakingWhile<TSourceItem> TakingWhile<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, bool>> predicateExpression,
			 int capacity)
			
		{
			return new ObservableComputations.TakingWhile<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				predicateExpression: predicateExpression,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.TakingWhile<TSourceItem> TakingWhile<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, bool>> predicateExpression)
			
		{
			return new ObservableComputations.TakingWhile<TSourceItem>(
				sourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourceExpression),
				predicateExpression: predicateExpression,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.TakingWhile<TSourceItem> TakingWhile<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, bool>> predicateExpression,
			 int capacity)
			
		{
			return new ObservableComputations.TakingWhile<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				predicateExpression: predicateExpression,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.TakingWhile<TSourceItem> TakingWhile<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, bool>> predicateExpression)
			
		{
			return new ObservableComputations.TakingWhile<TSourceItem>(
				sourceScalar: new Computing<ObservableCollection<TSourceItem>>(sourceExpression),
				predicateExpression: predicateExpression,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.TakingWhile<TSourceItem> TakingWhile<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, bool>> predicateExpression,
			 int capacity)
			
		{
			return new ObservableComputations.TakingWhile<TSourceItem>(
				source: source,
				predicateExpression: predicateExpression,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.TakingWhile<TSourceItem> TakingWhile<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, bool>> predicateExpression)
			
		{
			return new ObservableComputations.TakingWhile<TSourceItem>(
				source: source,
				predicateExpression: predicateExpression,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.TakingWhile<TSourceItem> TakingWhile<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, bool>> predicateExpression,
			 int capacity)
			
		{
			return new ObservableComputations.TakingWhile<TSourceItem>(
				source: source,
				predicateExpression: predicateExpression,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.TakingWhile<TSourceItem> TakingWhile<TSourceItem>(this
			 ObservableCollection<TSourceItem> source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, bool>> predicateExpression)
			
		{
			return new ObservableComputations.TakingWhile<TSourceItem>(
				source: source,
				predicateExpression: predicateExpression,
				capacity: 0);
		}

		#endregion
		#region ThenOrdering

		[ObservableComputationsCall]
		public static ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue> ThenOrdering<TSourceItem, TOrderingValue>(this
			 ObservableComputations.IOrdering<TSourceItem> source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 ObservableComputations.IReadScalar<System.ComponentModel.ListSortDirection> sortDirectionScalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IComparer<TOrderingValue>> comparerScalar)
			
		{
			return new ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue>(
				source: source,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: sortDirectionScalar,
				comparerScalar: comparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue> ThenOrdering<TSourceItem, TOrderingValue>(this
			 ObservableComputations.IOrdering<TSourceItem> source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 ObservableComputations.IReadScalar<System.ComponentModel.ListSortDirection> sortDirectionScalar)
			
		{
			return new ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue>(
				source: source,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: sortDirectionScalar,
				comparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue> ThenOrdering<TSourceItem, TOrderingValue>(this
			 ObservableComputations.IOrdering<TSourceItem> source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 ObservableComputations.IReadScalar<System.ComponentModel.ListSortDirection> sortDirectionScalar,
			 Expression<Func<System.Collections.Generic.IComparer<TOrderingValue>>> comparerExpression)
			
		{
			return new ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue>(
				source: source,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: sortDirectionScalar,
				comparerScalar: new Computing<System.Collections.Generic.IComparer<TOrderingValue>>(comparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue> ThenOrdering<TSourceItem, TOrderingValue>(this
			 ObservableComputations.IOrdering<TSourceItem> source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IComparer<TOrderingValue>> comparerScalar)
			
		{
			return new ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue>(
				source: source,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: null,
				comparerScalar: comparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue> ThenOrdering<TSourceItem, TOrderingValue>(this
			 ObservableComputations.IOrdering<TSourceItem> source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression)
			
		{
			return new ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue>(
				source: source,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: null,
				comparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue> ThenOrdering<TSourceItem, TOrderingValue>(this
			 ObservableComputations.IOrdering<TSourceItem> source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 Expression<Func<System.Collections.Generic.IComparer<TOrderingValue>>> comparerExpression)
			
		{
			return new ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue>(
				source: source,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: null,
				comparerScalar: new Computing<System.Collections.Generic.IComparer<TOrderingValue>>(comparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue> ThenOrdering<TSourceItem, TOrderingValue>(this
			 ObservableComputations.IOrdering<TSourceItem> source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 Expression<Func<System.ComponentModel.ListSortDirection>> sortDirectionExpression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IComparer<TOrderingValue>> comparerScalar)
			
		{
			return new ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue>(
				source: source,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: new Computing<System.ComponentModel.ListSortDirection>(sortDirectionExpression),
				comparerScalar: comparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue> ThenOrdering<TSourceItem, TOrderingValue>(this
			 ObservableComputations.IOrdering<TSourceItem> source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 Expression<Func<System.ComponentModel.ListSortDirection>> sortDirectionExpression)
			
		{
			return new ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue>(
				source: source,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: new Computing<System.ComponentModel.ListSortDirection>(sortDirectionExpression),
				comparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue> ThenOrdering<TSourceItem, TOrderingValue>(this
			 ObservableComputations.IOrdering<TSourceItem> source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 Expression<Func<System.ComponentModel.ListSortDirection>> sortDirectionExpression,
			 Expression<Func<System.Collections.Generic.IComparer<TOrderingValue>>> comparerExpression)
			
		{
			return new ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue>(
				source: source,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: new Computing<System.ComponentModel.ListSortDirection>(sortDirectionExpression),
				comparerScalar: new Computing<System.Collections.Generic.IComparer<TOrderingValue>>(comparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue> ThenOrdering<TSourceItem, TOrderingValue>(this
			 ObservableComputations.IOrdering<TSourceItem> source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 System.ComponentModel.ListSortDirection sortDirection,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IComparer<TOrderingValue>> comparerScalar)
			
		{
			return new ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue>(
				source: source,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirection: sortDirection,
				comparerScalar: comparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue> ThenOrdering<TSourceItem, TOrderingValue>(this
			 ObservableComputations.IOrdering<TSourceItem> source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 System.ComponentModel.ListSortDirection sortDirection)
			
		{
			return new ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue>(
				source: source,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirection: sortDirection,
				comparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue> ThenOrdering<TSourceItem, TOrderingValue>(this
			 ObservableComputations.IOrdering<TSourceItem> source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 System.ComponentModel.ListSortDirection sortDirection,
			 Expression<Func<System.Collections.Generic.IComparer<TOrderingValue>>> comparerExpression)
			
		{
			return new ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue>(
				source: source,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirection: sortDirection,
				comparerScalar: new Computing<System.Collections.Generic.IComparer<TOrderingValue>>(comparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue> ThenOrdering<TSourceItem, TOrderingValue>(this
			 ObservableComputations.IOrdering<TSourceItem> source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 ObservableComputations.IReadScalar<System.ComponentModel.ListSortDirection> sortDirectionScalar,
			 System.Collections.Generic.IComparer<TOrderingValue> comparer)
			
		{
			return new ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue>(
				source: source,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: sortDirectionScalar,
				comparer: comparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue> ThenOrdering<TSourceItem, TOrderingValue>(this
			 ObservableComputations.IOrdering<TSourceItem> source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 System.Collections.Generic.IComparer<TOrderingValue> comparer)
			
		{
			return new ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue>(
				source: source,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: null,
				comparer: comparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue> ThenOrdering<TSourceItem, TOrderingValue>(this
			 ObservableComputations.IOrdering<TSourceItem> source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 Expression<Func<System.ComponentModel.ListSortDirection>> sortDirectionExpression,
			 System.Collections.Generic.IComparer<TOrderingValue> comparer)
			
		{
			return new ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue>(
				source: source,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: new Computing<System.ComponentModel.ListSortDirection>(sortDirectionExpression),
				comparer: comparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue> ThenOrdering<TSourceItem, TOrderingValue>(this
			 ObservableComputations.IOrdering<TSourceItem> source,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 System.ComponentModel.ListSortDirection sortDirection,
			 System.Collections.Generic.IComparer<TOrderingValue> comparer)
			
		{
			return new ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue>(
				source: source,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirection: sortDirection,
				comparer: comparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue> ThenOrdering<TSourceItem, TOrderingValue>(this
			 ObservableComputations.IReadScalar<ObservableComputations.IOrdering<TSourceItem>> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 ObservableComputations.IReadScalar<System.ComponentModel.ListSortDirection> sortDirectionScalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IComparer<TOrderingValue>> comparerScalar)
			
		{
			return new ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue>(
				sourceScalar: sourceScalar,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: sortDirectionScalar,
				comparerScalar: comparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue> ThenOrdering<TSourceItem, TOrderingValue>(this
			 ObservableComputations.IReadScalar<ObservableComputations.IOrdering<TSourceItem>> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 ObservableComputations.IReadScalar<System.ComponentModel.ListSortDirection> sortDirectionScalar)
			
		{
			return new ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue>(
				sourceScalar: sourceScalar,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: sortDirectionScalar,
				comparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue> ThenOrdering<TSourceItem, TOrderingValue>(this
			 ObservableComputations.IReadScalar<ObservableComputations.IOrdering<TSourceItem>> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 ObservableComputations.IReadScalar<System.ComponentModel.ListSortDirection> sortDirectionScalar,
			 Expression<Func<System.Collections.Generic.IComparer<TOrderingValue>>> comparerExpression)
			
		{
			return new ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue>(
				sourceScalar: sourceScalar,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: sortDirectionScalar,
				comparerScalar: new Computing<System.Collections.Generic.IComparer<TOrderingValue>>(comparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue> ThenOrdering<TSourceItem, TOrderingValue>(this
			 ObservableComputations.IReadScalar<ObservableComputations.IOrdering<TSourceItem>> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IComparer<TOrderingValue>> comparerScalar)
			
		{
			return new ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue>(
				sourceScalar: sourceScalar,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: null,
				comparerScalar: comparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue> ThenOrdering<TSourceItem, TOrderingValue>(this
			 ObservableComputations.IReadScalar<ObservableComputations.IOrdering<TSourceItem>> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression)
			
		{
			return new ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue>(
				sourceScalar: sourceScalar,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: null,
				comparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue> ThenOrdering<TSourceItem, TOrderingValue>(this
			 ObservableComputations.IReadScalar<ObservableComputations.IOrdering<TSourceItem>> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 Expression<Func<System.Collections.Generic.IComparer<TOrderingValue>>> comparerExpression)
			
		{
			return new ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue>(
				sourceScalar: sourceScalar,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: null,
				comparerScalar: new Computing<System.Collections.Generic.IComparer<TOrderingValue>>(comparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue> ThenOrdering<TSourceItem, TOrderingValue>(this
			 ObservableComputations.IReadScalar<ObservableComputations.IOrdering<TSourceItem>> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 Expression<Func<System.ComponentModel.ListSortDirection>> sortDirectionExpression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IComparer<TOrderingValue>> comparerScalar)
			
		{
			return new ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue>(
				sourceScalar: sourceScalar,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: new Computing<System.ComponentModel.ListSortDirection>(sortDirectionExpression),
				comparerScalar: comparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue> ThenOrdering<TSourceItem, TOrderingValue>(this
			 ObservableComputations.IReadScalar<ObservableComputations.IOrdering<TSourceItem>> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 Expression<Func<System.ComponentModel.ListSortDirection>> sortDirectionExpression)
			
		{
			return new ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue>(
				sourceScalar: sourceScalar,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: new Computing<System.ComponentModel.ListSortDirection>(sortDirectionExpression),
				comparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue> ThenOrdering<TSourceItem, TOrderingValue>(this
			 ObservableComputations.IReadScalar<ObservableComputations.IOrdering<TSourceItem>> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 Expression<Func<System.ComponentModel.ListSortDirection>> sortDirectionExpression,
			 Expression<Func<System.Collections.Generic.IComparer<TOrderingValue>>> comparerExpression)
			
		{
			return new ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue>(
				sourceScalar: sourceScalar,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: new Computing<System.ComponentModel.ListSortDirection>(sortDirectionExpression),
				comparerScalar: new Computing<System.Collections.Generic.IComparer<TOrderingValue>>(comparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue> ThenOrdering<TSourceItem, TOrderingValue>(this
			 Expression<Func<ObservableComputations.IOrdering<TSourceItem>>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 ObservableComputations.IReadScalar<System.ComponentModel.ListSortDirection> sortDirectionScalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IComparer<TOrderingValue>> comparerScalar)
			
		{
			return new ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue>(
				sourceScalar: new Computing<ObservableComputations.IOrdering<TSourceItem>>(sourceExpression),
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: sortDirectionScalar,
				comparerScalar: comparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue> ThenOrdering<TSourceItem, TOrderingValue>(this
			 Expression<Func<ObservableComputations.IOrdering<TSourceItem>>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 ObservableComputations.IReadScalar<System.ComponentModel.ListSortDirection> sortDirectionScalar)
			
		{
			return new ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue>(
				sourceScalar: new Computing<ObservableComputations.IOrdering<TSourceItem>>(sourceExpression),
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: sortDirectionScalar,
				comparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue> ThenOrdering<TSourceItem, TOrderingValue>(this
			 Expression<Func<ObservableComputations.IOrdering<TSourceItem>>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 ObservableComputations.IReadScalar<System.ComponentModel.ListSortDirection> sortDirectionScalar,
			 Expression<Func<System.Collections.Generic.IComparer<TOrderingValue>>> comparerExpression)
			
		{
			return new ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue>(
				sourceScalar: new Computing<ObservableComputations.IOrdering<TSourceItem>>(sourceExpression),
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: sortDirectionScalar,
				comparerScalar: new Computing<System.Collections.Generic.IComparer<TOrderingValue>>(comparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue> ThenOrdering<TSourceItem, TOrderingValue>(this
			 Expression<Func<ObservableComputations.IOrdering<TSourceItem>>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IComparer<TOrderingValue>> comparerScalar)
			
		{
			return new ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue>(
				sourceScalar: new Computing<ObservableComputations.IOrdering<TSourceItem>>(sourceExpression),
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: null,
				comparerScalar: comparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue> ThenOrdering<TSourceItem, TOrderingValue>(this
			 Expression<Func<ObservableComputations.IOrdering<TSourceItem>>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression)
			
		{
			return new ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue>(
				sourceScalar: new Computing<ObservableComputations.IOrdering<TSourceItem>>(sourceExpression),
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: null,
				comparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue> ThenOrdering<TSourceItem, TOrderingValue>(this
			 Expression<Func<ObservableComputations.IOrdering<TSourceItem>>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 Expression<Func<System.Collections.Generic.IComparer<TOrderingValue>>> comparerExpression)
			
		{
			return new ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue>(
				sourceScalar: new Computing<ObservableComputations.IOrdering<TSourceItem>>(sourceExpression),
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: null,
				comparerScalar: new Computing<System.Collections.Generic.IComparer<TOrderingValue>>(comparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue> ThenOrdering<TSourceItem, TOrderingValue>(this
			 Expression<Func<ObservableComputations.IOrdering<TSourceItem>>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 Expression<Func<System.ComponentModel.ListSortDirection>> sortDirectionExpression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IComparer<TOrderingValue>> comparerScalar)
			
		{
			return new ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue>(
				sourceScalar: new Computing<ObservableComputations.IOrdering<TSourceItem>>(sourceExpression),
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: new Computing<System.ComponentModel.ListSortDirection>(sortDirectionExpression),
				comparerScalar: comparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue> ThenOrdering<TSourceItem, TOrderingValue>(this
			 Expression<Func<ObservableComputations.IOrdering<TSourceItem>>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 Expression<Func<System.ComponentModel.ListSortDirection>> sortDirectionExpression)
			
		{
			return new ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue>(
				sourceScalar: new Computing<ObservableComputations.IOrdering<TSourceItem>>(sourceExpression),
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: new Computing<System.ComponentModel.ListSortDirection>(sortDirectionExpression),
				comparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue> ThenOrdering<TSourceItem, TOrderingValue>(this
			 Expression<Func<ObservableComputations.IOrdering<TSourceItem>>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 Expression<Func<System.ComponentModel.ListSortDirection>> sortDirectionExpression,
			 Expression<Func<System.Collections.Generic.IComparer<TOrderingValue>>> comparerExpression)
			
		{
			return new ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue>(
				sourceScalar: new Computing<ObservableComputations.IOrdering<TSourceItem>>(sourceExpression),
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: new Computing<System.ComponentModel.ListSortDirection>(sortDirectionExpression),
				comparerScalar: new Computing<System.Collections.Generic.IComparer<TOrderingValue>>(comparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue> ThenOrdering<TSourceItem, TOrderingValue>(this
			 ObservableComputations.IReadScalar<ObservableComputations.IOrdering<TSourceItem>> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 System.ComponentModel.ListSortDirection sortDirection,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IComparer<TOrderingValue>> comparerScalar)
			
		{
			return new ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue>(
				sourceScalar: sourceScalar,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirection: sortDirection,
				comparerScalar: comparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue> ThenOrdering<TSourceItem, TOrderingValue>(this
			 ObservableComputations.IReadScalar<ObservableComputations.IOrdering<TSourceItem>> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 System.ComponentModel.ListSortDirection sortDirection)
			
		{
			return new ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue>(
				sourceScalar: sourceScalar,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirection: sortDirection,
				comparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue> ThenOrdering<TSourceItem, TOrderingValue>(this
			 ObservableComputations.IReadScalar<ObservableComputations.IOrdering<TSourceItem>> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 System.ComponentModel.ListSortDirection sortDirection,
			 Expression<Func<System.Collections.Generic.IComparer<TOrderingValue>>> comparerExpression)
			
		{
			return new ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue>(
				sourceScalar: sourceScalar,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirection: sortDirection,
				comparerScalar: new Computing<System.Collections.Generic.IComparer<TOrderingValue>>(comparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue> ThenOrdering<TSourceItem, TOrderingValue>(this
			 Expression<Func<ObservableComputations.IOrdering<TSourceItem>>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 System.ComponentModel.ListSortDirection sortDirection,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IComparer<TOrderingValue>> comparerScalar)
			
		{
			return new ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue>(
				sourceScalar: new Computing<ObservableComputations.IOrdering<TSourceItem>>(sourceExpression),
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirection: sortDirection,
				comparerScalar: comparerScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue> ThenOrdering<TSourceItem, TOrderingValue>(this
			 Expression<Func<ObservableComputations.IOrdering<TSourceItem>>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 System.ComponentModel.ListSortDirection sortDirection)
			
		{
			return new ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue>(
				sourceScalar: new Computing<ObservableComputations.IOrdering<TSourceItem>>(sourceExpression),
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirection: sortDirection,
				comparerScalar: null);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue> ThenOrdering<TSourceItem, TOrderingValue>(this
			 Expression<Func<ObservableComputations.IOrdering<TSourceItem>>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 System.ComponentModel.ListSortDirection sortDirection,
			 Expression<Func<System.Collections.Generic.IComparer<TOrderingValue>>> comparerExpression)
			
		{
			return new ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue>(
				sourceScalar: new Computing<ObservableComputations.IOrdering<TSourceItem>>(sourceExpression),
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirection: sortDirection,
				comparerScalar: new Computing<System.Collections.Generic.IComparer<TOrderingValue>>(comparerExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue> ThenOrdering<TSourceItem, TOrderingValue>(this
			 ObservableComputations.IReadScalar<ObservableComputations.IOrdering<TSourceItem>> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 ObservableComputations.IReadScalar<System.ComponentModel.ListSortDirection> sortDirectionScalar,
			 System.Collections.Generic.IComparer<TOrderingValue> comparer)
			
		{
			return new ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue>(
				sourceScalar: sourceScalar,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: sortDirectionScalar,
				comparer: comparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue> ThenOrdering<TSourceItem, TOrderingValue>(this
			 ObservableComputations.IReadScalar<ObservableComputations.IOrdering<TSourceItem>> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 System.Collections.Generic.IComparer<TOrderingValue> comparer)
			
		{
			return new ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue>(
				sourceScalar: sourceScalar,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: null,
				comparer: comparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue> ThenOrdering<TSourceItem, TOrderingValue>(this
			 ObservableComputations.IReadScalar<ObservableComputations.IOrdering<TSourceItem>> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 Expression<Func<System.ComponentModel.ListSortDirection>> sortDirectionExpression,
			 System.Collections.Generic.IComparer<TOrderingValue> comparer)
			
		{
			return new ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue>(
				sourceScalar: sourceScalar,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: new Computing<System.ComponentModel.ListSortDirection>(sortDirectionExpression),
				comparer: comparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue> ThenOrdering<TSourceItem, TOrderingValue>(this
			 Expression<Func<ObservableComputations.IOrdering<TSourceItem>>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 ObservableComputations.IReadScalar<System.ComponentModel.ListSortDirection> sortDirectionScalar,
			 System.Collections.Generic.IComparer<TOrderingValue> comparer)
			
		{
			return new ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue>(
				sourceScalar: new Computing<ObservableComputations.IOrdering<TSourceItem>>(sourceExpression),
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: sortDirectionScalar,
				comparer: comparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue> ThenOrdering<TSourceItem, TOrderingValue>(this
			 Expression<Func<ObservableComputations.IOrdering<TSourceItem>>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 System.Collections.Generic.IComparer<TOrderingValue> comparer)
			
		{
			return new ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue>(
				sourceScalar: new Computing<ObservableComputations.IOrdering<TSourceItem>>(sourceExpression),
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: null,
				comparer: comparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue> ThenOrdering<TSourceItem, TOrderingValue>(this
			 Expression<Func<ObservableComputations.IOrdering<TSourceItem>>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 Expression<Func<System.ComponentModel.ListSortDirection>> sortDirectionExpression,
			 System.Collections.Generic.IComparer<TOrderingValue> comparer)
			
		{
			return new ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue>(
				sourceScalar: new Computing<ObservableComputations.IOrdering<TSourceItem>>(sourceExpression),
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirectionScalar: new Computing<System.ComponentModel.ListSortDirection>(sortDirectionExpression),
				comparer: comparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue> ThenOrdering<TSourceItem, TOrderingValue>(this
			 ObservableComputations.IReadScalar<ObservableComputations.IOrdering<TSourceItem>> sourceScalar,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 System.ComponentModel.ListSortDirection sortDirection,
			 System.Collections.Generic.IComparer<TOrderingValue> comparer)
			
		{
			return new ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue>(
				sourceScalar: sourceScalar,
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirection: sortDirection,
				comparer: comparer);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue> ThenOrdering<TSourceItem, TOrderingValue>(this
			 Expression<Func<ObservableComputations.IOrdering<TSourceItem>>> sourceExpression,
			 System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>> orderingValueSelectorExpression,
			 System.ComponentModel.ListSortDirection sortDirection,
			 System.Collections.Generic.IComparer<TOrderingValue> comparer)
			
		{
			return new ObservableComputations.ThenOrdering<TSourceItem, TOrderingValue>(
				sourceScalar: new Computing<ObservableComputations.IOrdering<TSourceItem>>(sourceExpression),
				orderingValueSelectorExpression: orderingValueSelectorExpression,
				sortDirection: sortDirection,
				comparer: comparer);
		}

		#endregion
		#region Uniting

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourcesScalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				sourcesScalar: sourcesScalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourcesScalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				sourcesScalar: sourcesScalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourcesScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				sourcesScalar: sourcesScalar,
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourcesScalar)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				sourcesScalar: sourcesScalar,
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourcesScalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				sourcesScalar: sourcesScalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourcesScalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				sourcesScalar: sourcesScalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<ObservableCollection<TSourceItem>>> sourcesScalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				sourcesScalar: sourcesScalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<ObservableCollection<TSourceItem>>> sourcesScalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				sourcesScalar: sourcesScalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<ObservableCollection<TSourceItem>>> sourcesScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				sourcesScalar: sourcesScalar,
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<ObservableCollection<TSourceItem>>> sourcesScalar)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				sourcesScalar: sourcesScalar,
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<ObservableCollection<TSourceItem>>> sourcesScalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				sourcesScalar: sourcesScalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<ObservableCollection<TSourceItem>>> sourcesScalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				sourcesScalar: sourcesScalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourcesExpression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				sourcesScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourcesExpression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourcesExpression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				sourcesScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourcesExpression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourcesExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				sourcesScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourcesExpression),
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourcesExpression)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				sourcesScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourcesExpression),
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourcesExpression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				sourcesScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourcesExpression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourcesExpression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				sourcesScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourcesExpression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<ObservableCollection<ObservableCollection<TSourceItem>>>> sourcesExpression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				sourcesScalar: new Computing<ObservableCollection<ObservableCollection<TSourceItem>>>(sourcesExpression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<ObservableCollection<ObservableCollection<TSourceItem>>>> sourcesExpression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				sourcesScalar: new Computing<ObservableCollection<ObservableCollection<TSourceItem>>>(sourcesExpression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<ObservableCollection<ObservableCollection<TSourceItem>>>> sourcesExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				sourcesScalar: new Computing<ObservableCollection<ObservableCollection<TSourceItem>>>(sourcesExpression),
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<ObservableCollection<ObservableCollection<TSourceItem>>>> sourcesExpression)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				sourcesScalar: new Computing<ObservableCollection<ObservableCollection<TSourceItem>>>(sourcesExpression),
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<ObservableCollection<ObservableCollection<TSourceItem>>>> sourcesExpression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				sourcesScalar: new Computing<ObservableCollection<ObservableCollection<TSourceItem>>>(sourcesExpression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<ObservableCollection<ObservableCollection<TSourceItem>>>> sourcesExpression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				sourcesScalar: new Computing<ObservableCollection<ObservableCollection<TSourceItem>>>(sourcesExpression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged sources,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				sources: sources,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged sources,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				sources: sources,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged sources,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				sources: sources,
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged sources)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				sources: sources,
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged sources,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				sources: sources,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged sources,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				sources: sources,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableCollection<ObservableCollection<TSourceItem>> sources,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				sources: sources,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableCollection<ObservableCollection<TSourceItem>> sources,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				sources: sources,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableCollection<ObservableCollection<TSourceItem>> sources,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				sources: sources,
				equalityComparerScalar: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableCollection<ObservableCollection<TSourceItem>> sources)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				sources: sources,
				equalityComparerScalar: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableCollection<ObservableCollection<TSourceItem>> sources,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				sources: sources,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableCollection<ObservableCollection<TSourceItem>> sources,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				sources: sources,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged sources,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				sources: sources,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged sources,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				sources: sources,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableCollection<ObservableCollection<TSourceItem>> sources,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				sources: sources,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableCollection<ObservableCollection<TSourceItem>> sources,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				sources: sources,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourcesScalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				sourcesScalar: sourcesScalar,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourcesScalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				sourcesScalar: sourcesScalar,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<ObservableCollection<TSourceItem>>> sourcesScalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				sourcesScalar: sourcesScalar,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<ObservableCollection<TSourceItem>>> sourcesScalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				sourcesScalar: sourcesScalar,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourcesExpression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				sourcesScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourcesExpression),
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> sourcesExpression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				sourcesScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(sourcesExpression),
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<ObservableCollection<ObservableCollection<TSourceItem>>>> sourcesExpression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				sourcesScalar: new Computing<ObservableCollection<ObservableCollection<TSourceItem>>>(sourcesExpression),
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<ObservableCollection<ObservableCollection<TSourceItem>>>> sourcesExpression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				sourcesScalar: new Computing<ObservableCollection<ObservableCollection<TSourceItem>>>(sourcesExpression),
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparer: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 System.Collections.Specialized.INotifyCollectionChanged source2)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparer: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableCollection<TSourceItem> source2,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableCollection<TSourceItem> source2,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableCollection<TSourceItem> source2,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparer: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableCollection<TSourceItem> source2)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparer: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparer: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 System.Collections.Specialized.INotifyCollectionChanged source2)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparer: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableCollection<TSourceItem> source2,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableCollection<TSourceItem> source2,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableCollection<TSourceItem> source2,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparer: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableCollection<TSourceItem> source2)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparer: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparer: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 System.Collections.Specialized.INotifyCollectionChanged source2)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparer: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableCollection<TSourceItem> source2,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableCollection<TSourceItem> source2,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableCollection<TSourceItem> source2,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparer: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableCollection<TSourceItem> source2)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparer: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparer: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 System.Collections.Specialized.INotifyCollectionChanged source2)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparer: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableCollection<TSourceItem> source2,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableCollection<TSourceItem> source2,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableCollection<TSourceItem> source2,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparer: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableCollection<TSourceItem> source2)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparer: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2: source2,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2: source2,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2: source2,
				equalityComparer: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 System.Collections.Specialized.INotifyCollectionChanged source2)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2: source2,
				equalityComparer: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableCollection<TSourceItem> source2,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2: source2,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableCollection<TSourceItem> source2,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2: source2,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableCollection<TSourceItem> source2,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2: source2,
				equalityComparer: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableCollection<TSourceItem> source2)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2: source2,
				equalityComparer: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2: source2,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2: source2,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2: source2,
				equalityComparer: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 System.Collections.Specialized.INotifyCollectionChanged source2)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2: source2,
				equalityComparer: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableCollection<TSourceItem> source2,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2: source2,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableCollection<TSourceItem> source2,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2: source2,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableCollection<TSourceItem> source2,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2: source2,
				equalityComparer: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableCollection<TSourceItem> source2)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2: source2,
				equalityComparer: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparer: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparer: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparer: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparer: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparer: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparer: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparer: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparer: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparer: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparer: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparer: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparer: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparer: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparer: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparer: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparer: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparer: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparer: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparer: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparer: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparer: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparer: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparer: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparer: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparer: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparer: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparer: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparer: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparer: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparer: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparer: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparer: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparer: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparer: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparer: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparer: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparer: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparer: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparer: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparer: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparer: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparer: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparer: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparer: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparer: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparer: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparer: equalityComparer,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 System.Collections.Generic.IEqualityComparer<TSourceItem> equalityComparer)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparer: equalityComparer,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparer: null,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparer: null,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableCollection<TSourceItem> source2,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableCollection<TSourceItem> source2,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableCollection<TSourceItem> source2,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableCollection<TSourceItem> source2,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableCollection<TSourceItem> source2,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableCollection<TSourceItem> source2,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableCollection<TSourceItem> source2,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableCollection<TSourceItem> source2,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2: source2,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableCollection<TSourceItem> source2,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableCollection<TSourceItem> source2,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableCollection<TSourceItem> source2,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableCollection<TSourceItem> source2,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableCollection<TSourceItem> source2,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableCollection<TSourceItem> source2,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableCollection<TSourceItem> source2,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableCollection<TSourceItem> source2,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2: source2,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2: source2,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2: source2,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2: source2,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2: source2,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableCollection<TSourceItem> source2,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2: source2,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableCollection<TSourceItem> source2,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2: source2,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableCollection<TSourceItem> source2,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2: source2,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableCollection<TSourceItem> source2,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2: source2,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2: source2,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2: source2,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2: source2,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 System.Collections.Specialized.INotifyCollectionChanged source2,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2: source2,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableCollection<TSourceItem> source2,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2: source2,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableCollection<TSourceItem> source2,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2: source2,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableCollection<TSourceItem> source2,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2: source2,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableCollection<TSourceItem> source2,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2: source2,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: source2Scalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source1Scalar,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: source1Scalar,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source1Expression,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source1Expression),
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: source2Scalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 Expression<Func<ObservableCollection<TSourceItem>>> source1Expression,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1Scalar: new Computing<ObservableCollection<TSourceItem>>(source1Expression),
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged source1,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 ObservableComputations.IReadScalar<ObservableCollection<TSourceItem>> source2Scalar,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2Scalar: source2Scalar,
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> source2Expression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(source2Expression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 ObservableComputations.IReadScalar<System.Collections.Generic.IEqualityComparer<TSourceItem>> equalityComparerScalar)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: equalityComparerScalar,
				capacity: 0);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression,
			 int capacity)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: capacity);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Uniting<TSourceItem> Uniting<TSourceItem>(this
			 ObservableCollection<TSourceItem> source1,
			 Expression<Func<ObservableCollection<TSourceItem>>> source2Expression,
			 Expression<Func<System.Collections.Generic.IEqualityComparer<TSourceItem>>> equalityComparerExpression)
			
		{
			return new ObservableComputations.Uniting<TSourceItem>(
				source1: source1,
				source2Scalar: new Computing<ObservableCollection<TSourceItem>>(source2Expression),
				equalityComparerScalar: new Computing<System.Collections.Generic.IEqualityComparer<TSourceItem>>(equalityComparerExpression),
				capacity: 0);
		}

		#endregion
		#region Using

		[ObservableComputationsCall]
		public static ObservableComputations.Using<TArgument, TResult> Using<TArgument, TResult>(this
			 TArgument argument,
			 System.Linq.Expressions.Expression<System.Func<TArgument, TResult>> getValueExpression)
			
		{
			return new ObservableComputations.Using<TArgument, TResult>(
				argument: argument,
				getValueExpression: getValueExpression);
		}

		#endregion
		#region WeakPreviousTracking

		[ObservableComputationsCall]
		public static ObservableComputations.WeakPreviousTracking<TResult> WeakPreviousTracking<TResult>(this
			 ObservableComputations.IReadScalar<TResult> scalar)
			where TResult : class
		{
			return new ObservableComputations.WeakPreviousTracking<TResult>(
				scalar: scalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.WeakPreviousTracking<TResult> WeakPreviousTracking<TResult>(this
			 Expression<Func<TResult>> scalar)
			where TResult : class
		{
			return new ObservableComputations.WeakPreviousTracking<TResult>(
				scalar: new Computing<TResult>(scalar));
		}

		#endregion
		#region Zipping

		[ObservableComputationsCall]
		public static ObservableComputations.Zipping<TLeftSourceItem, TRightSourceItem> Zipping<TLeftSourceItem, TRightSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> leftSourceScalar,
			 System.Collections.Specialized.INotifyCollectionChanged rightSource)
			
		{
			return new ObservableComputations.Zipping<TLeftSourceItem, TRightSourceItem>(
				leftSourceScalar: leftSourceScalar,
				rightSource: rightSource);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Zipping<TLeftSourceItem, TRightSourceItem> Zipping<TLeftSourceItem, TRightSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> leftSourceScalar,
			 ObservableCollection<TRightSourceItem> rightSource)
			
		{
			return new ObservableComputations.Zipping<TLeftSourceItem, TRightSourceItem>(
				leftSourceScalar: leftSourceScalar,
				rightSource: rightSource);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Zipping<TLeftSourceItem, TRightSourceItem> Zipping<TLeftSourceItem, TRightSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TLeftSourceItem>> leftSourceScalar,
			 System.Collections.Specialized.INotifyCollectionChanged rightSource)
			
		{
			return new ObservableComputations.Zipping<TLeftSourceItem, TRightSourceItem>(
				leftSourceScalar: leftSourceScalar,
				rightSource: rightSource);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Zipping<TLeftSourceItem, TRightSourceItem> Zipping<TLeftSourceItem, TRightSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TLeftSourceItem>> leftSourceScalar,
			 ObservableCollection<TRightSourceItem> rightSource)
			
		{
			return new ObservableComputations.Zipping<TLeftSourceItem, TRightSourceItem>(
				leftSourceScalar: leftSourceScalar,
				rightSource: rightSource);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Zipping<TLeftSourceItem, TRightSourceItem> Zipping<TLeftSourceItem, TRightSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> leftSourceExpression,
			 System.Collections.Specialized.INotifyCollectionChanged rightSource)
			
		{
			return new ObservableComputations.Zipping<TLeftSourceItem, TRightSourceItem>(
				leftSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(leftSourceExpression),
				rightSource: rightSource);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Zipping<TLeftSourceItem, TRightSourceItem> Zipping<TLeftSourceItem, TRightSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> leftSourceExpression,
			 ObservableCollection<TRightSourceItem> rightSource)
			
		{
			return new ObservableComputations.Zipping<TLeftSourceItem, TRightSourceItem>(
				leftSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(leftSourceExpression),
				rightSource: rightSource);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Zipping<TLeftSourceItem, TRightSourceItem> Zipping<TLeftSourceItem, TRightSourceItem>(this
			 Expression<Func<ObservableCollection<TLeftSourceItem>>> leftSourceExpression,
			 System.Collections.Specialized.INotifyCollectionChanged rightSource)
			
		{
			return new ObservableComputations.Zipping<TLeftSourceItem, TRightSourceItem>(
				leftSourceScalar: new Computing<ObservableCollection<TLeftSourceItem>>(leftSourceExpression),
				rightSource: rightSource);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Zipping<TLeftSourceItem, TRightSourceItem> Zipping<TLeftSourceItem, TRightSourceItem>(this
			 Expression<Func<ObservableCollection<TLeftSourceItem>>> leftSourceExpression,
			 ObservableCollection<TRightSourceItem> rightSource)
			
		{
			return new ObservableComputations.Zipping<TLeftSourceItem, TRightSourceItem>(
				leftSourceScalar: new Computing<ObservableCollection<TLeftSourceItem>>(leftSourceExpression),
				rightSource: rightSource);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Zipping<TLeftSourceItem, TRightSourceItem> Zipping<TLeftSourceItem, TRightSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> leftSourceScalar,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> rightSourceScalar)
			
		{
			return new ObservableComputations.Zipping<TLeftSourceItem, TRightSourceItem>(
				leftSourceScalar: leftSourceScalar,
				rightSourceScalar: rightSourceScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Zipping<TLeftSourceItem, TRightSourceItem> Zipping<TLeftSourceItem, TRightSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> leftSourceScalar,
			 ObservableComputations.IReadScalar<ObservableCollection<TRightSourceItem>> rightSourceScalar)
			
		{
			return new ObservableComputations.Zipping<TLeftSourceItem, TRightSourceItem>(
				leftSourceScalar: leftSourceScalar,
				rightSourceScalar: rightSourceScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Zipping<TLeftSourceItem, TRightSourceItem> Zipping<TLeftSourceItem, TRightSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> leftSourceScalar,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> rightSourceExpression)
			
		{
			return new ObservableComputations.Zipping<TLeftSourceItem, TRightSourceItem>(
				leftSourceScalar: leftSourceScalar,
				rightSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(rightSourceExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Zipping<TLeftSourceItem, TRightSourceItem> Zipping<TLeftSourceItem, TRightSourceItem>(this
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> leftSourceScalar,
			 Expression<Func<ObservableCollection<TRightSourceItem>>> rightSourceExpression)
			
		{
			return new ObservableComputations.Zipping<TLeftSourceItem, TRightSourceItem>(
				leftSourceScalar: leftSourceScalar,
				rightSourceScalar: new Computing<ObservableCollection<TRightSourceItem>>(rightSourceExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Zipping<TLeftSourceItem, TRightSourceItem> Zipping<TLeftSourceItem, TRightSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TLeftSourceItem>> leftSourceScalar,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> rightSourceScalar)
			
		{
			return new ObservableComputations.Zipping<TLeftSourceItem, TRightSourceItem>(
				leftSourceScalar: leftSourceScalar,
				rightSourceScalar: rightSourceScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Zipping<TLeftSourceItem, TRightSourceItem> Zipping<TLeftSourceItem, TRightSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TLeftSourceItem>> leftSourceScalar,
			 ObservableComputations.IReadScalar<ObservableCollection<TRightSourceItem>> rightSourceScalar)
			
		{
			return new ObservableComputations.Zipping<TLeftSourceItem, TRightSourceItem>(
				leftSourceScalar: leftSourceScalar,
				rightSourceScalar: rightSourceScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Zipping<TLeftSourceItem, TRightSourceItem> Zipping<TLeftSourceItem, TRightSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TLeftSourceItem>> leftSourceScalar,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> rightSourceExpression)
			
		{
			return new ObservableComputations.Zipping<TLeftSourceItem, TRightSourceItem>(
				leftSourceScalar: leftSourceScalar,
				rightSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(rightSourceExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Zipping<TLeftSourceItem, TRightSourceItem> Zipping<TLeftSourceItem, TRightSourceItem>(this
			 ObservableComputations.IReadScalar<ObservableCollection<TLeftSourceItem>> leftSourceScalar,
			 Expression<Func<ObservableCollection<TRightSourceItem>>> rightSourceExpression)
			
		{
			return new ObservableComputations.Zipping<TLeftSourceItem, TRightSourceItem>(
				leftSourceScalar: leftSourceScalar,
				rightSourceScalar: new Computing<ObservableCollection<TRightSourceItem>>(rightSourceExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Zipping<TLeftSourceItem, TRightSourceItem> Zipping<TLeftSourceItem, TRightSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> leftSourceExpression,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> rightSourceScalar)
			
		{
			return new ObservableComputations.Zipping<TLeftSourceItem, TRightSourceItem>(
				leftSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(leftSourceExpression),
				rightSourceScalar: rightSourceScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Zipping<TLeftSourceItem, TRightSourceItem> Zipping<TLeftSourceItem, TRightSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> leftSourceExpression,
			 ObservableComputations.IReadScalar<ObservableCollection<TRightSourceItem>> rightSourceScalar)
			
		{
			return new ObservableComputations.Zipping<TLeftSourceItem, TRightSourceItem>(
				leftSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(leftSourceExpression),
				rightSourceScalar: rightSourceScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Zipping<TLeftSourceItem, TRightSourceItem> Zipping<TLeftSourceItem, TRightSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> leftSourceExpression,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> rightSourceExpression)
			
		{
			return new ObservableComputations.Zipping<TLeftSourceItem, TRightSourceItem>(
				leftSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(leftSourceExpression),
				rightSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(rightSourceExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Zipping<TLeftSourceItem, TRightSourceItem> Zipping<TLeftSourceItem, TRightSourceItem>(this
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> leftSourceExpression,
			 Expression<Func<ObservableCollection<TRightSourceItem>>> rightSourceExpression)
			
		{
			return new ObservableComputations.Zipping<TLeftSourceItem, TRightSourceItem>(
				leftSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(leftSourceExpression),
				rightSourceScalar: new Computing<ObservableCollection<TRightSourceItem>>(rightSourceExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Zipping<TLeftSourceItem, TRightSourceItem> Zipping<TLeftSourceItem, TRightSourceItem>(this
			 Expression<Func<ObservableCollection<TLeftSourceItem>>> leftSourceExpression,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> rightSourceScalar)
			
		{
			return new ObservableComputations.Zipping<TLeftSourceItem, TRightSourceItem>(
				leftSourceScalar: new Computing<ObservableCollection<TLeftSourceItem>>(leftSourceExpression),
				rightSourceScalar: rightSourceScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Zipping<TLeftSourceItem, TRightSourceItem> Zipping<TLeftSourceItem, TRightSourceItem>(this
			 Expression<Func<ObservableCollection<TLeftSourceItem>>> leftSourceExpression,
			 ObservableComputations.IReadScalar<ObservableCollection<TRightSourceItem>> rightSourceScalar)
			
		{
			return new ObservableComputations.Zipping<TLeftSourceItem, TRightSourceItem>(
				leftSourceScalar: new Computing<ObservableCollection<TLeftSourceItem>>(leftSourceExpression),
				rightSourceScalar: rightSourceScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Zipping<TLeftSourceItem, TRightSourceItem> Zipping<TLeftSourceItem, TRightSourceItem>(this
			 Expression<Func<ObservableCollection<TLeftSourceItem>>> leftSourceExpression,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> rightSourceExpression)
			
		{
			return new ObservableComputations.Zipping<TLeftSourceItem, TRightSourceItem>(
				leftSourceScalar: new Computing<ObservableCollection<TLeftSourceItem>>(leftSourceExpression),
				rightSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(rightSourceExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Zipping<TLeftSourceItem, TRightSourceItem> Zipping<TLeftSourceItem, TRightSourceItem>(this
			 Expression<Func<ObservableCollection<TLeftSourceItem>>> leftSourceExpression,
			 Expression<Func<ObservableCollection<TRightSourceItem>>> rightSourceExpression)
			
		{
			return new ObservableComputations.Zipping<TLeftSourceItem, TRightSourceItem>(
				leftSourceScalar: new Computing<ObservableCollection<TLeftSourceItem>>(leftSourceExpression),
				rightSourceScalar: new Computing<ObservableCollection<TRightSourceItem>>(rightSourceExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Zipping<TLeftSourceItem, TRightSourceItem> Zipping<TLeftSourceItem, TRightSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged leftSource,
			 System.Collections.Specialized.INotifyCollectionChanged rightSource)
			
		{
			return new ObservableComputations.Zipping<TLeftSourceItem, TRightSourceItem>(
				leftSource: leftSource,
				rightSource: rightSource);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Zipping<TLeftSourceItem, TRightSourceItem> Zipping<TLeftSourceItem, TRightSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged leftSource,
			 ObservableCollection<TRightSourceItem> rightSource)
			
		{
			return new ObservableComputations.Zipping<TLeftSourceItem, TRightSourceItem>(
				leftSource: leftSource,
				rightSource: rightSource);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Zipping<TLeftSourceItem, TRightSourceItem> Zipping<TLeftSourceItem, TRightSourceItem>(this
			 ObservableCollection<TLeftSourceItem> leftSource,
			 System.Collections.Specialized.INotifyCollectionChanged rightSource)
			
		{
			return new ObservableComputations.Zipping<TLeftSourceItem, TRightSourceItem>(
				leftSource: leftSource,
				rightSource: rightSource);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Zipping<TLeftSourceItem, TRightSourceItem> Zipping<TLeftSourceItem, TRightSourceItem>(this
			 ObservableCollection<TLeftSourceItem> leftSource,
			 ObservableCollection<TRightSourceItem> rightSource)
			
		{
			return new ObservableComputations.Zipping<TLeftSourceItem, TRightSourceItem>(
				leftSource: leftSource,
				rightSource: rightSource);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Zipping<TLeftSourceItem, TRightSourceItem> Zipping<TLeftSourceItem, TRightSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged leftSource,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> rightSourceScalar)
			
		{
			return new ObservableComputations.Zipping<TLeftSourceItem, TRightSourceItem>(
				leftSource: leftSource,
				rightSourceScalar: rightSourceScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Zipping<TLeftSourceItem, TRightSourceItem> Zipping<TLeftSourceItem, TRightSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged leftSource,
			 ObservableComputations.IReadScalar<ObservableCollection<TRightSourceItem>> rightSourceScalar)
			
		{
			return new ObservableComputations.Zipping<TLeftSourceItem, TRightSourceItem>(
				leftSource: leftSource,
				rightSourceScalar: rightSourceScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Zipping<TLeftSourceItem, TRightSourceItem> Zipping<TLeftSourceItem, TRightSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged leftSource,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> rightSourceExpression)
			
		{
			return new ObservableComputations.Zipping<TLeftSourceItem, TRightSourceItem>(
				leftSource: leftSource,
				rightSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(rightSourceExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Zipping<TLeftSourceItem, TRightSourceItem> Zipping<TLeftSourceItem, TRightSourceItem>(this
			 System.Collections.Specialized.INotifyCollectionChanged leftSource,
			 Expression<Func<ObservableCollection<TRightSourceItem>>> rightSourceExpression)
			
		{
			return new ObservableComputations.Zipping<TLeftSourceItem, TRightSourceItem>(
				leftSource: leftSource,
				rightSourceScalar: new Computing<ObservableCollection<TRightSourceItem>>(rightSourceExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Zipping<TLeftSourceItem, TRightSourceItem> Zipping<TLeftSourceItem, TRightSourceItem>(this
			 ObservableCollection<TLeftSourceItem> leftSource,
			 ObservableComputations.IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> rightSourceScalar)
			
		{
			return new ObservableComputations.Zipping<TLeftSourceItem, TRightSourceItem>(
				leftSource: leftSource,
				rightSourceScalar: rightSourceScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Zipping<TLeftSourceItem, TRightSourceItem> Zipping<TLeftSourceItem, TRightSourceItem>(this
			 ObservableCollection<TLeftSourceItem> leftSource,
			 ObservableComputations.IReadScalar<ObservableCollection<TRightSourceItem>> rightSourceScalar)
			
		{
			return new ObservableComputations.Zipping<TLeftSourceItem, TRightSourceItem>(
				leftSource: leftSource,
				rightSourceScalar: rightSourceScalar);
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Zipping<TLeftSourceItem, TRightSourceItem> Zipping<TLeftSourceItem, TRightSourceItem>(this
			 ObservableCollection<TLeftSourceItem> leftSource,
			 Expression<Func<System.Collections.Specialized.INotifyCollectionChanged>> rightSourceExpression)
			
		{
			return new ObservableComputations.Zipping<TLeftSourceItem, TRightSourceItem>(
				leftSource: leftSource,
				rightSourceScalar: new Computing<System.Collections.Specialized.INotifyCollectionChanged>(rightSourceExpression));
		}

		[ObservableComputationsCall]
		public static ObservableComputations.Zipping<TLeftSourceItem, TRightSourceItem> Zipping<TLeftSourceItem, TRightSourceItem>(this
			 ObservableCollection<TLeftSourceItem> leftSource,
			 Expression<Func<ObservableCollection<TRightSourceItem>>> rightSourceExpression)
			
		{
			return new ObservableComputations.Zipping<TLeftSourceItem, TRightSourceItem>(
				leftSource: leftSource,
				rightSourceScalar: new Computing<ObservableCollection<TRightSourceItem>>(rightSourceExpression));
		}

		#endregion
	}
}
