// Copyright (c) 2019-2021 Buchelnikov Igor Vladimirovich. All rights reserved
// Buchelnikov Igor Vladimirovich licenses this file to you under the MIT license.
// The LICENSE file is located at https://github.com/IgorBuchelnikov/ObservableComputations/blob/master/LICENSE

<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ assembly name="EnvDTE80" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="EnvDTE80" #>
<#@ output extension=".generated.cs"#>
<#@ include file=".\VisualStudioHelper.ttinclude" #>

<#+
	public string[] ExpressionArgumentNames = new []{"PREDICATE", "SELECTOR", "GETVALUEEXPRESSION"};

	public IEnumerable<ExtensionMethod> GetExtensionMethods()
	{
		try
		{
			List<ExtensionMethod> result = new List<ExtensionMethod>();

			VisualStudioHelper = new AutomationHelper(this.Host);
			string rootPath = VisualStudioHelper.SolutionDirectory + @"\ObservableComputations";
			string rootCollections = rootPath + @"\Collections";
			string rootScalars = rootPath + @"\Scalars";
	
			foreach(var file in (System.IO.Directory.GetFiles(rootCollections, @"*.cs").Concat(System.IO.Directory.GetFiles(rootScalars, @"*.cs"))).OrderBy(f => f))
			{
				var projectItem = this.VisualStudioHelper.FindProjectItem(file);
				if (projectItem == null) continue;

				foreach(EnvDTE.CodeClass classInFile in this.VisualStudioHelper.CodeModel.GetAllCodeElementsOfType(projectItem.FileCodeModel.CodeElements, EnvDTE.vsCMElement.vsCMElementClass, false))
				{
					if (classInFile.IsAbstract || classInFile.Access == vsCMAccess.vsCMAccessPrivate) continue;
					if (!classInFile.Name.Contains("ing")) continue;

					string name = classInFile.Name;

					if (name.Contains("CollectionProcessing")
						|| name.Contains("ScalarProcessing")
						|| name.Contains("PropertyDispatching")
						|| name.Contains("CollectionDisposing")
						|| name.Contains("ScalarDisposing")
						|| name.Contains("Crossing"))
						continue;

					if (name.Contains("CollectionDispatching"))
					{
					}

					string genericParameters = string.Empty;
					string genericConstraints = string.Empty;
					if (classInFile.FullName.Contains("<"))
					{
						genericParameters = "<" + classInFile.FullName.Split('<', '>')[1] + ">";
					}

					if (classInFile.FullName.Contains("WeakPreviousTracking"))
					{
						genericConstraints = "where TResult : class";
					}

					List<ExtensionMethod> classExtensionMethods = new List<ExtensionMethod>();

					foreach (CodeElement elem in classInFile.Children)
					{

						if (elem.Kind != vsCMElement.vsCMElementFunction) continue;
						CodeFunction constructor = (CodeFunction)elem;
						if (constructor.FunctionKind != EnvDTE.vsCMFunction.vsCMFunctionConstructor) continue;
						if (constructor.Access == EnvDTE.vsCMAccess.vsCMAccessPrivate) continue;

						List<ExtensionMethodArgumentVariants> variantsList = new List<ExtensionMethodArgumentVariants>();
						//if (constructor.Parameters.Count >= 7) continue;

						foreach (CodeElement parameterCodeElement in constructor.Parameters)
						{
							CodeParameter2 parameter = (CodeParameter2)parameterCodeElement;

							ExtensionMethodArgumentVariants variants = new ExtensionMethodArgumentVariants();

							variants.Name = parameter.Name;
							variants.Type = parameter.Type.AsString;	

							if (IsCollectionOfCollectionsArgument(name, parameter.Name))
							{
								variants.Types.Add(parameter.Type.AsString);
								variants.Types.Add(parameter.Type.AsString.Replace("System.Collections.Specialized.INotifyCollectionChanged", "ObservableCollection<ObservableCollection<TSourceItem>>"));
							}
							else if ((parameter.Name.Contains("source") || parameter.Name.Contains("Source")) && !parameter.Name.Contains("OcDispatcher"))
							{
								string sourceGenericTypeName;

								variants.Types.Add(parameter.Type.AsString);

								if (genericParameters.Contains("Source"))
								{
									if (parameter.Name.Contains("1") && genericParameters.Contains("1"))
										sourceGenericTypeName = "TSourceItem1";
									else if (parameter.Name.Contains("2") && genericParameters.Contains("2"))
										sourceGenericTypeName = "TSourceItem2";
									else if (parameter.Name.Contains("outer") && genericParameters.Contains("Outer"))
										sourceGenericTypeName = "TOuterSourceItem";
									else if (parameter.Name.Contains("inner") && genericParameters.Contains("Inner"))
										sourceGenericTypeName = "TInnerSourceItem";
									else if (parameter.Name.Contains("left") && genericParameters.Contains("Left"))
										sourceGenericTypeName = "TLeftSourceItem";
									else if (parameter.Name.Contains("right") && genericParameters.Contains("Right"))
										sourceGenericTypeName = "TRightSourceItem";
									else 
										sourceGenericTypeName = "TSourceItem";

									variants.Types.Add(parameter.Type.AsString.Replace("System.Collections.Specialized.INotifyCollectionChanged", "ObservableCollection<" + sourceGenericTypeName + ">"));
								}
							}
							else if (parameter.ParameterKind == vsCMParameterKind.vsCMParameterKindOptional)
							{
								variants.DefaultValue = parameter.DefaultValue;
							}

							variantsList.Add(variants);
						}

						foreach (ExtensionMethodArgumentVariants argumentVariants in variantsList)
						{
							if (ExpressionArgumentNames.Any(an => argumentVariants.Name.ToUpper().Contains(an))) continue;

							List<string> newTypes = new List<string>();
							if (argumentVariants.Types.Count > 0)
							{
								foreach (string type in argumentVariants.Types)
								{
									if (type.Contains("IReadScalar"))
									{
										newTypes.Add("Expression<" + type.Replace("ObservableComputations.IReadScalar", "Func") + ">");
									}
								}
							}
							else
							{
								newTypes.Add(argumentVariants.Type);
								if (argumentVariants.Type.Contains("IReadScalar"))
								{
									newTypes.Add("Expression<" + argumentVariants.Type.Replace("ObservableComputations.IReadScalar", "Func") + ">");
								}
							}

							if (newTypes.Count > 0)
							{
								argumentVariants.Types.AddRange(newTypes);

							}
						}

						List<ExtensionMethod> constructorExtensionMethods = new List<ExtensionMethod>();

						foreach (ExtensionMethodArgumentVariants argumentVariants in variantsList)
						{
							List<ExtensionMethod> newExtensionMethods = new List<ExtensionMethod>();

							if (constructorExtensionMethods.Count == 0)
							{
								if (argumentVariants.Types.Count > 0)
								{
									foreach (string type in argumentVariants.Types)
									{
										if (name != "MinimazingOrMaximazing")
										{
											newExtensionMethods.Add(new ExtensionMethod(
												name, classInFile.FullName, genericParameters, genericConstraints, new ExtensionMethodArgument(
													argumentVariants.Name, type)));
										}

										if (name == "MinimazingOrMaximazing")
										{
											newExtensionMethods.Add(new ExtensionMethod(
												"Minimazing", classInFile.FullName, genericParameters, genericConstraints, new ExtensionMethodArgument(
													argumentVariants.Name, type)));

											newExtensionMethods.Add(new ExtensionMethod(
												"Maximazing", classInFile.FullName, genericParameters, genericConstraints, new ExtensionMethodArgument(
													argumentVariants.Name, type)));
										}

									}
								}
								else
								{
									newExtensionMethods.Add(new ExtensionMethod(
										name, classInFile.FullName, genericParameters, genericConstraints, new ExtensionMethodArgument(
											argumentVariants.Name, argumentVariants.Type)));							
								}
							}
							else
							{
								foreach (ExtensionMethod creatingExtensionMethod in constructorExtensionMethods)
								{
									if (!argumentVariants.Type.Contains("MinimazingOrMaximazingMode"))
									{
										if (argumentVariants.Types.Count > 0)
										{
											ExtensionMethod extensionMethod;
											foreach (string type in argumentVariants.Types)
											{
												extensionMethod = new ExtensionMethod(
													creatingExtensionMethod.Name, classInFile.FullName, creatingExtensionMethod.GenericParameters, creatingExtensionMethod.GenericConstraints, creatingExtensionMethod.Arguments.ToArray());
												extensionMethod.Arguments.Add(
													new ExtensionMethodArgument(
														argumentVariants.Name, type));
												newExtensionMethods.Add(extensionMethod);

												if (argumentVariants.DefaultValue != null) 
												{
													extensionMethod = new ExtensionMethod(
														creatingExtensionMethod.Name, classInFile.FullName, creatingExtensionMethod.GenericParameters, creatingExtensionMethod.GenericConstraints, creatingExtensionMethod.Arguments.ToArray());
													extensionMethod.Arguments.Add(
														new ExtensionMethodArgument(
															argumentVariants.Name, type, argumentVariants.DefaultValue));
													newExtensionMethods.Add(extensionMethod);
												}
											}
										}
										else if (argumentVariants.DefaultValue != null) 
										{
											ExtensionMethod extensionMethod = new ExtensionMethod(
												creatingExtensionMethod.Name, classInFile.FullName, creatingExtensionMethod.GenericParameters, creatingExtensionMethod.GenericConstraints, creatingExtensionMethod.Arguments.ToArray());
											extensionMethod.Arguments.Add(
												new ExtensionMethodArgument(argumentVariants.Name, argumentVariants.Type));
											newExtensionMethods.Add(extensionMethod);

											extensionMethod = new ExtensionMethod(
												creatingExtensionMethod.Name, classInFile.FullName, creatingExtensionMethod.GenericParameters, creatingExtensionMethod.GenericConstraints, creatingExtensionMethod.Arguments.ToArray());
											extensionMethod.Arguments.Add(
												new ExtensionMethodArgument(
													argumentVariants.Name, argumentVariants.Type, argumentVariants.DefaultValue));
											newExtensionMethods.Add(extensionMethod);
										}
										else
										{
											ExtensionMethod extensionMethod = new ExtensionMethod(
												creatingExtensionMethod.Name, classInFile.FullName, creatingExtensionMethod.GenericParameters, creatingExtensionMethod.GenericConstraints, creatingExtensionMethod.Arguments.ToArray());
											extensionMethod.Arguments.Add(
												new ExtensionMethodArgument(
													argumentVariants.Name, argumentVariants.Type));
											newExtensionMethods.Add(extensionMethod);
										}
									}

									if (argumentVariants.Type.Contains("MinimazingOrMaximazingMode"))
									{
										ExtensionMethod extensionMethod = new ExtensionMethod(
											creatingExtensionMethod.Name, classInFile.FullName, creatingExtensionMethod.GenericParameters, creatingExtensionMethod.GenericConstraints, creatingExtensionMethod.Arguments.ToArray());
										extensionMethod.Arguments.Add(
											new ExtensionMethodArgument(
												argumentVariants.Name, argumentVariants.Type, creatingExtensionMethod.Name == "Minimazing" ? "MinimazingOrMaximazingMode.Minimazing" : "MinimazingOrMaximazingMode.Maximazing"));
										newExtensionMethods.Add(extensionMethod);
									}

								}
							}

							constructorExtensionMethods = newExtensionMethods;
						}

						classExtensionMethods.AddRange(constructorExtensionMethods);
					}

					var filtered = classExtensionMethods
						.Distinct()
						.Where(em => 
						!(
							!em.ArgumentsWithoutDefaultValue.Any(ema => ema.Name == "destinationOcDispatcher")
							&& em.ArgumentsWithoutDefaultValue.Any(ema => ema.Name == "sourceOcDispatcher"))
						&& !(
							!em.ArgumentsWithoutDefaultValue.Any(ema => ema.Name == "destinationOcDispatcherPriority")
							&& em.ArgumentsWithoutDefaultValue.Any(ema => ema.Name == "sourceOcDispatcherPriority"))
						&& !(
							!em.ArgumentsWithoutDefaultValue.Any(ema => ema.Name == "destinationOcDispatcherParameter")
							&& em.ArgumentsWithoutDefaultValue.Any(ema => ema.Name == "sourceOcDispatcherParameter")))
						.ToArray();

					if (filtered.Length != classExtensionMethods.Count)
					{
					}

					result.AddRange(filtered);
				}
			}

			return result;
		}
		catch (Exception exception)
		{
			throw;
		}
	}

	public class ExtensionMethod
	{
		public string TypeName;
		public string GenericParameters;
		public string Name;
		public string GenericConstraints;
		public List<ExtensionMethodArgument> Arguments = new List<ExtensionMethodArgument>();
		public IEnumerable<ExtensionMethodArgument> ArgumentsWithoutDefaultValue => Arguments.Where(a => a.DefaultValue == null);

		public override bool Equals(object obj)
		{
			ExtensionMethod other = (ExtensionMethod)obj;
			return other.Name == Name && ArgumentsWithoutDefaultValue.SequenceEqual(other.ArgumentsWithoutDefaultValue);
		}

		public ExtensionMethod(string name, string typeName, string genericParameters, string genericConstraints, params ExtensionMethodArgument[] arguments)
		{
			Name = name;
			TypeName = typeName;
			GenericParameters = genericParameters;
			GenericConstraints = genericConstraints;
			Arguments = arguments.ToList();
		}

		public override int GetHashCode()
		{
			unchecked {
				int result = Name.GetHashCode();
				
				foreach (ExtensionMethodArgument argument in Arguments.Where(a => a.DefaultValue == null))
				{
					result = result + argument.GetHashCode();
				}
				return result; }
		}
	}

	public class ExtensionMethodArgument
	{
		public string Type;
		public string Name;
		public string DefaultValue;

		public ExtensionMethodArgument(string name, string type, string defaultValue = null)
		{
			Name = name;
			Type = type;
			DefaultValue = defaultValue;
		}
 

		public override bool Equals(object obj)
		{
			ExtensionMethodArgument other = (ExtensionMethodArgument)obj;
			return other.Name == Name && other.Type == Type;
		}

		public override int GetHashCode()
		{
			unchecked {
				return Name.GetHashCode() + Type.GetHashCode(); }
		}
	}

	public class ExtensionMethodArgumentVariants
	{
		public string Name;

		public List<string> Types = new List<string>();

		public string Type;
		public string DefaultValue;
	}

	public bool IsComputingArgument(ExtensionMethodArgument argument)
	{
		return argument.Type.Contains("Func") && argument.Type.Contains("Expression") && !ExpressionArgumentNames.Any(an => argument.Name.ToUpper().Contains(an));
	}

	public bool IsCollectionOfCollectionsArgument(string extensionMethodName, string argumentName)
	{
		return (extensionMethodName == "Concatenating" || extensionMethodName == "Uniting") && (argumentName == "source" || argumentName == "sourceScalar");
	}
#>
