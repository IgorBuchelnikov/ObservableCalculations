// Copyright (c) 2019-2021 Buchelnikov Igor Vladimirovich. All rights reserved
// Buchelnikov Igor Vladimirovich licenses this file to you under the MIT license.
// The LICENSE file is located at https://github.com/IgorBuchelnikov/ObservableComputations/blob/master/LICENSE

 
 
// Copyright (c) 2019-2021 Buchelnikov Igor Vladimirovich. All rights reserved
// Buchelnikov Igor Vladimirovich licenses this file to you under the MIT license.
// The LICENSE file is located at https://github.com/IgorBuchelnikov/ObservableComputations/blob/master/LICENSE

 



using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Collections.ObjectModel;
using NUnit.Framework;
using ObservableComputations;

namespace ObservableComputations.Test
{
	[TestFixture(false)]
	[TestFixture(true)]
	public partial class QuickTests : TestBase
	{
		#region Aggregating

		
		[Test, Combinatorial]
		public void TestAggregating01()
		{
			IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Func<int, int, int> aggregateFunc = (i, r) => i + r;
			System.Func<int, int, int> deaggregateFunc = (i, r) => r - i;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Aggregating<int, int>(
				aggregateFunc,
				deaggregateFunc).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(aggregateFunc, testing.AggregateFunc);
			Assert.AreEqual(deaggregateFunc, testing.DeaggregateFunc);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			}

			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestAggregating02()
		{
			IReadScalar<ObservableCollection<int>> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Func<int, int, int> aggregateFunc = (i, r) => i + r;
			System.Func<int, int, int> deaggregateFunc = (i, r) => r - i;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Aggregating<int, int>(
				aggregateFunc,
				deaggregateFunc).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(aggregateFunc, testing.AggregateFunc);
			Assert.AreEqual(deaggregateFunc, testing.DeaggregateFunc);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			}

			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestAggregating03()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Func<int, int, int> aggregateFunc = (i, r) => i + r;
			System.Func<int, int, int> deaggregateFunc = (i, r) => r - i;
			OcConsumer consumer = new OcConsumer();
			var testing = source.Aggregating<int, int>(
				aggregateFunc,
				deaggregateFunc).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(aggregateFunc, testing.AggregateFunc);
			Assert.AreEqual(deaggregateFunc, testing.DeaggregateFunc);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestAggregating04()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Func<int, int, int> aggregateFunc = (i, r) => i + r;
			System.Func<int, int, int> deaggregateFunc = (i, r) => r - i;
			OcConsumer consumer = new OcConsumer();
			var testing = source.Aggregating<int, int>(
				aggregateFunc,
				deaggregateFunc).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(aggregateFunc, testing.AggregateFunc);
			Assert.AreEqual(deaggregateFunc, testing.DeaggregateFunc);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		#endregion
		#region AllComputing

		
		[Test, Combinatorial]
		public void TestAllComputing01()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.AllComputing<Item>(
				predicateExpression).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(predicateExpression, testing.PredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestAllComputing02()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.AllComputing<Item>(
				predicateExpression).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(predicateExpression, testing.PredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestAllComputing03()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			OcConsumer consumer = new OcConsumer();
			var testing = source.AllComputing<Item>(
				predicateExpression).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(predicateExpression, testing.PredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestAllComputing04()
		{
			ObservableCollection<Item> source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			OcConsumer consumer = new OcConsumer();
			var testing = source.AllComputing<Item>(
				predicateExpression).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(predicateExpression, testing.PredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		#endregion
		#region AnyComputing

		
		[Test, Combinatorial]
		public void TestAnyComputing01()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.AnyComputing<Item>(
				predicateExpression).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(predicateExpression, testing.PredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestAnyComputing02()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.AnyComputing<Item>(
				predicateExpression).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(predicateExpression, testing.PredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestAnyComputing03()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			OcConsumer consumer = new OcConsumer();
			var testing = source.AnyComputing<Item>(
				predicateExpression).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(predicateExpression, testing.PredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestAnyComputing04()
		{
			ObservableCollection<Item> source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			OcConsumer consumer = new OcConsumer();
			var testing = source.AnyComputing<Item>(
				predicateExpression).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(predicateExpression, testing.PredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		#endregion
		#region Appending

		
		[Test, Combinatorial]
		public void TestAppending01()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			Item item = new QuickTests.Item(1, true);
			OcConsumer consumer = new OcConsumer();
			var testing = source.Appending<Item>(
				item).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(item, testing.Item);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestAppending02()
		{
			ObservableCollection<Item> source = getItems();
			Item item = new QuickTests.Item(1, true);
			OcConsumer consumer = new OcConsumer();
			var testing = source.Appending<Item>(
				item).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(item, testing.Item);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestAppending03()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			Scalar<Item> itemScalar = getScalar<Item>(new QuickTests.Item(1, true));
			OcConsumer consumer = new OcConsumer();
			var testing = source.Appending<Item>(
				itemScalar).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(itemScalar, testing.ItemScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Item>)itemScalar).Touch();
			test();
			((Scalar<Item>)itemScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestAppending04()
		{
			ObservableCollection<Item> source = getItems();
			Scalar<Item> itemScalar = getScalar<Item>(new QuickTests.Item(1, true));
			OcConsumer consumer = new OcConsumer();
			var testing = source.Appending<Item>(
				itemScalar).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(itemScalar, testing.ItemScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Item>)itemScalar).Touch();
			test();
			((Scalar<Item>)itemScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestAppending05()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Item item = new QuickTests.Item(1, true);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Appending<Item>(
				item).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(item, testing.Item);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestAppending06()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Item item = new QuickTests.Item(1, true);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Appending<Item>(
				item).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(item, testing.Item);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestAppending07()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<Item> itemScalar = getScalar<Item>(new QuickTests.Item(1, true));
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Appending<Item>(
				itemScalar).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(itemScalar, testing.ItemScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Item>)itemScalar).Touch();
			test();
			((Scalar<Item>)itemScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestAppending08()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<Item> itemScalar = getScalar<Item>(new QuickTests.Item(1, true));
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Appending<Item>(
				itemScalar).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(itemScalar, testing.ItemScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Item>)itemScalar).Touch();
			test();
			((Scalar<Item>)itemScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		#endregion
		#region Averaging

		
		[Test, Combinatorial]
		public void TestAveraging01()
		{
			IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Averaging<int, double>().For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			}

			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestAveraging02()
		{
			IReadScalar<ObservableCollection<int>> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Averaging<int, double>().For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			}

			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestAveraging03()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			OcConsumer consumer = new OcConsumer();
			var testing = source.Averaging<int, double>().For(consumer);

			Assert.AreEqual(source, testing.Source);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestAveraging04()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			OcConsumer consumer = new OcConsumer();
			var testing = source.Averaging<int, double>().For(consumer);

			Assert.AreEqual(source, testing.Source);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		#endregion
		#region Casting

		
		[Test, Combinatorial]
		public void TestCasting01()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Casting<object>().For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestCasting02()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source.Casting<object>().For(consumer);

			Assert.AreEqual(source, testing.Source);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		#endregion
		#region CollectionPausing

		
		[Test, Combinatorial]
		public void TestCollectionPausing01(
			[Values(false, true)] bool initialIsPaused,
			[Values(CollectionPausingResumeType.ReplayChanges, CollectionPausingResumeType.Reset)] ObservableComputations.CollectionPausingResumeType resumeType)
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source.CollectionPausing<Item>(
				initialIsPaused,
				resumeType).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(resumeType, testing.ResumeType);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestCollectionPausing02(
			[Values(false, true)] bool initialIsPaused)
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source.CollectionPausing<Item>(
				initialIsPaused).For(consumer);

			Assert.AreEqual(source, testing.Source);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestCollectionPausing03(
			[Values(CollectionPausingResumeType.ReplayChanges, CollectionPausingResumeType.Reset)] ObservableComputations.CollectionPausingResumeType resumeType)
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source.CollectionPausing<Item>(
				resumeType).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(resumeType, testing.ResumeType);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestCollectionPausing04()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source.CollectionPausing<Item>().For(consumer);

			Assert.AreEqual(source, testing.Source);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestCollectionPausing05(
			[Values(false, true)] bool initialIsPaused,
			[Values(CollectionPausingResumeType.ReplayChanges, CollectionPausingResumeType.Reset)] ObservableComputations.CollectionPausingResumeType resumeType)
		{
			ObservableCollection<Item> source = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source.CollectionPausing<Item>(
				initialIsPaused,
				resumeType).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(resumeType, testing.ResumeType);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestCollectionPausing06(
			[Values(false, true)] bool initialIsPaused)
		{
			ObservableCollection<Item> source = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source.CollectionPausing<Item>(
				initialIsPaused).For(consumer);

			Assert.AreEqual(source, testing.Source);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestCollectionPausing07(
			[Values(CollectionPausingResumeType.ReplayChanges, CollectionPausingResumeType.Reset)] ObservableComputations.CollectionPausingResumeType resumeType)
		{
			ObservableCollection<Item> source = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source.CollectionPausing<Item>(
				resumeType).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(resumeType, testing.ResumeType);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestCollectionPausing08()
		{
			ObservableCollection<Item> source = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source.CollectionPausing<Item>().For(consumer);

			Assert.AreEqual(source, testing.Source);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestCollectionPausing09(
			[Values(false, true)] bool initialIsPaused,
			[Values(CollectionPausingResumeType.ReplayChanges, CollectionPausingResumeType.Reset)] ObservableComputations.CollectionPausingResumeType resumeType)
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.CollectionPausing<Item>(
				initialIsPaused,
				resumeType).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(resumeType, testing.ResumeType);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestCollectionPausing10(
			[Values(false, true)] bool initialIsPaused)
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.CollectionPausing<Item>(
				initialIsPaused).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestCollectionPausing11(
			[Values(CollectionPausingResumeType.ReplayChanges, CollectionPausingResumeType.Reset)] ObservableComputations.CollectionPausingResumeType resumeType)
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.CollectionPausing<Item>(
				resumeType).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(resumeType, testing.ResumeType);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestCollectionPausing12()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.CollectionPausing<Item>().For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestCollectionPausing13(
			[Values(false, true)] bool initialIsPaused,
			[Values(CollectionPausingResumeType.ReplayChanges, CollectionPausingResumeType.Reset)] ObservableComputations.CollectionPausingResumeType resumeType)
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.CollectionPausing<Item>(
				initialIsPaused,
				resumeType).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(resumeType, testing.ResumeType);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestCollectionPausing14(
			[Values(false, true)] bool initialIsPaused)
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.CollectionPausing<Item>(
				initialIsPaused).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestCollectionPausing15(
			[Values(CollectionPausingResumeType.ReplayChanges, CollectionPausingResumeType.Reset)] ObservableComputations.CollectionPausingResumeType resumeType)
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.CollectionPausing<Item>(
				resumeType).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(resumeType, testing.ResumeType);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestCollectionPausing16()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.CollectionPausing<Item>().For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestCollectionPausing17(
			[Values(CollectionPausingResumeType.ReplayChanges, CollectionPausingResumeType.Reset)] ObservableComputations.CollectionPausingResumeType resumeType)
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			Scalar<bool> isPausedScalar = getScalar<bool>(true);
			OcConsumer consumer = new OcConsumer();
			var testing = source.CollectionPausing<Item>(
				isPausedScalar,
				resumeType).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(isPausedScalar, testing.IsPausedScalar);
			Assert.AreEqual(resumeType, testing.ResumeType);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<bool>)isPausedScalar).Touch();
			test();
			((Scalar<bool>)isPausedScalar).Change(false);
			test();
			((Scalar<bool>)isPausedScalar).Change(true);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestCollectionPausing18()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			Scalar<bool> isPausedScalar = getScalar<bool>(true);
			OcConsumer consumer = new OcConsumer();
			var testing = source.CollectionPausing<Item>(
				isPausedScalar).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(isPausedScalar, testing.IsPausedScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<bool>)isPausedScalar).Touch();
			test();
			((Scalar<bool>)isPausedScalar).Change(false);
			test();
			((Scalar<bool>)isPausedScalar).Change(true);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestCollectionPausing19(
			[Values(CollectionPausingResumeType.ReplayChanges, CollectionPausingResumeType.Reset)] ObservableComputations.CollectionPausingResumeType resumeType)
		{
			ObservableCollection<Item> source = getItems();
			Scalar<bool> isPausedScalar = getScalar<bool>(true);
			OcConsumer consumer = new OcConsumer();
			var testing = source.CollectionPausing<Item>(
				isPausedScalar,
				resumeType).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(isPausedScalar, testing.IsPausedScalar);
			Assert.AreEqual(resumeType, testing.ResumeType);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<bool>)isPausedScalar).Touch();
			test();
			((Scalar<bool>)isPausedScalar).Change(false);
			test();
			((Scalar<bool>)isPausedScalar).Change(true);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestCollectionPausing20()
		{
			ObservableCollection<Item> source = getItems();
			Scalar<bool> isPausedScalar = getScalar<bool>(true);
			OcConsumer consumer = new OcConsumer();
			var testing = source.CollectionPausing<Item>(
				isPausedScalar).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(isPausedScalar, testing.IsPausedScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<bool>)isPausedScalar).Touch();
			test();
			((Scalar<bool>)isPausedScalar).Change(false);
			test();
			((Scalar<bool>)isPausedScalar).Change(true);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestCollectionPausing21(
			[Values(CollectionPausingResumeType.ReplayChanges, CollectionPausingResumeType.Reset)] ObservableComputations.CollectionPausingResumeType resumeType)
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<bool> isPausedScalar = getScalar<bool>(true);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.CollectionPausing<Item>(
				isPausedScalar,
				resumeType).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(isPausedScalar, testing.IsPausedScalar);
			Assert.AreEqual(resumeType, testing.ResumeType);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<bool>)isPausedScalar).Touch();
			test();
			((Scalar<bool>)isPausedScalar).Change(false);
			test();
			((Scalar<bool>)isPausedScalar).Change(true);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestCollectionPausing22()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<bool> isPausedScalar = getScalar<bool>(true);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.CollectionPausing<Item>(
				isPausedScalar).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(isPausedScalar, testing.IsPausedScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<bool>)isPausedScalar).Touch();
			test();
			((Scalar<bool>)isPausedScalar).Change(false);
			test();
			((Scalar<bool>)isPausedScalar).Change(true);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestCollectionPausing23(
			[Values(CollectionPausingResumeType.ReplayChanges, CollectionPausingResumeType.Reset)] ObservableComputations.CollectionPausingResumeType resumeType)
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<bool> isPausedScalar = getScalar<bool>(true);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.CollectionPausing<Item>(
				isPausedScalar,
				resumeType).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(isPausedScalar, testing.IsPausedScalar);
			Assert.AreEqual(resumeType, testing.ResumeType);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<bool>)isPausedScalar).Touch();
			test();
			((Scalar<bool>)isPausedScalar).Change(false);
			test();
			((Scalar<bool>)isPausedScalar).Change(true);
			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestCollectionPausing24()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<bool> isPausedScalar = getScalar<bool>(true);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.CollectionPausing<Item>(
				isPausedScalar).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(isPausedScalar, testing.IsPausedScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<bool>)isPausedScalar).Touch();
			test();
			((Scalar<bool>)isPausedScalar).Change(false);
			test();
			((Scalar<bool>)isPausedScalar).Change(true);
			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		#endregion
		#region Concatenating

		
		[Test, Combinatorial]
		public void TestConcatenating01()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getCollectionsOfItems());
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Concatenating<Item>().For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<ObservableCollection<Item>>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				
				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true)}));
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Move(0, 1);
					testing.ValidateConsistency();
				}


				IList listSource;
				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true), new Item(2, true), new Item(3, true), new Item(4, true), new Item(5, true)}));
					sourceScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(6, true), new Item(7, true), new Item(8, true), new Item(8, true), new Item(10, true)}));
					testing.ValidateConsistency();
				}

				((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestConcatenating02()
		{
			Scalar<ObservableCollection<ObservableCollection<Item>>> sourceScalar = getScalar<ObservableCollection<ObservableCollection<Item>>>(getCollectionsOfItems());
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Concatenating<Item>().For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<ObservableCollection<Item>>)((ObservableCollection<ObservableCollection<Item>>)sourceScalar.Value));
				
				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true)}));
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Move(0, 1);
					testing.ValidateConsistency();
				}


				IList listSource;
				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true), new Item(2, true), new Item(3, true), new Item(4, true), new Item(5, true)}));
					sourceScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(6, true), new Item(7, true), new Item(8, true), new Item(8, true), new Item(10, true)}));
					testing.ValidateConsistency();
				}

				((Scalar<ObservableCollection<ObservableCollection<Item>>>)sourceScalar).Change(null);
			}

			test();

			((Scalar<ObservableCollection<ObservableCollection<Item>>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<ObservableCollection<Item>>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestConcatenating03()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getCollectionsOfItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source.Concatenating<Item>().For(consumer);

			Assert.AreEqual(source, testing.Source);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<ObservableCollection<Item>>)((System.Collections.Specialized.INotifyCollectionChanged)source));
				
				if (sourceValue != null)
				{
					sourceValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true)}));
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Move(0, 1);
					testing.ValidateConsistency();
				}


				IList listSource;
				if (sourceValue != null)
				{
					sourceValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true), new Item(2, true), new Item(3, true), new Item(4, true), new Item(5, true)}));
					sourceValue.Insert(0, new ObservableCollection<Item>(new []{new Item(6, true), new Item(7, true), new Item(8, true), new Item(8, true), new Item(10, true)}));
					testing.ValidateConsistency();
				}

			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestConcatenating04()
		{
			ObservableCollection<ObservableCollection<Item>> source = getCollectionsOfItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source.Concatenating<Item>().For(consumer);

			Assert.AreEqual(source, testing.Source);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<ObservableCollection<Item>>)((ObservableCollection<ObservableCollection<Item>>)source));
				
				if (sourceValue != null)
				{
					sourceValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true)}));
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Move(0, 1);
					testing.ValidateConsistency();
				}


				IList listSource;
				if (sourceValue != null)
				{
					sourceValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true), new Item(2, true), new Item(3, true), new Item(4, true), new Item(5, true)}));
					sourceValue.Insert(0, new ObservableCollection<Item>(new []{new Item(6, true), new Item(7, true), new Item(8, true), new Item(8, true), new Item(10, true)}));
					testing.ValidateConsistency();
				}

			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestConcatenating05()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Concatenating<Item>(
				source2).For(consumer);


			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestConcatenating06()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Concatenating<Item>(
				source2).For(consumer);


			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestConcatenating07()
		{
			ObservableCollection<Item> source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Concatenating<Item>(
				source2).For(consumer);


			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestConcatenating08()
		{
			ObservableCollection<Item> source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Concatenating<Item>(
				source2).For(consumer);


			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestConcatenating09()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Concatenating<Item>(
				source2).For(consumer);


			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestConcatenating10()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			ObservableCollection<Item> source2 = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Concatenating<Item>(
				source2).For(consumer);


			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestConcatenating11()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Concatenating<Item>(
				source2).For(consumer);


			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestConcatenating12()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			ObservableCollection<Item> source2 = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Concatenating<Item>(
				source2).For(consumer);


			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestConcatenating13()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Concatenating<Item>(
				source2Scalar).For(consumer);


			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestConcatenating14()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Concatenating<Item>(
				source2Scalar).For(consumer);


			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestConcatenating15()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Concatenating<Item>(
				source2Scalar).For(consumer);


			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestConcatenating16()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Concatenating<Item>(
				source2Scalar).For(consumer);


			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestConcatenating17()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Concatenating<Item>(
				source2Scalar).For(consumer);


			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestConcatenating18()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Concatenating<Item>(
				source2Scalar).For(consumer);


			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestConcatenating19()
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Concatenating<Item>(
				source2Scalar).For(consumer);


			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestConcatenating20()
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Concatenating<Item>(
				source2Scalar).For(consumer);


			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		#endregion
		#region ConcurrentDictionaring

		
		[Test, Combinatorial]
		public void TestConcurrentDictionaring01()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> valueSelectorExpression = i => i.Num;
			System.Collections.Generic.IEqualityComparer<int> equalityComparer = EqualityComparer<int>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.ConcurrentDictionaring<Item, int, int>(
				keySelectorExpression,
				valueSelectorExpression,
				equalityComparer).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(keySelectorExpression, testing.KeySelectorExpression);
			Assert.AreEqual(valueSelectorExpression, testing.ValueSelectorExpression);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestConcurrentDictionaring02()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> valueSelectorExpression = i => i.Num;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.ConcurrentDictionaring<Item, int, int>(
				keySelectorExpression,
				valueSelectorExpression).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(keySelectorExpression, testing.KeySelectorExpression);
			Assert.AreEqual(valueSelectorExpression, testing.ValueSelectorExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestConcurrentDictionaring03()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> valueSelectorExpression = i => i.Num;
			System.Collections.Generic.IEqualityComparer<int> equalityComparer = EqualityComparer<int>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.ConcurrentDictionaring<Item, int, int>(
				keySelectorExpression,
				valueSelectorExpression,
				equalityComparer).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(keySelectorExpression, testing.KeySelectorExpression);
			Assert.AreEqual(valueSelectorExpression, testing.ValueSelectorExpression);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestConcurrentDictionaring04()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> valueSelectorExpression = i => i.Num;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.ConcurrentDictionaring<Item, int, int>(
				keySelectorExpression,
				valueSelectorExpression).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(keySelectorExpression, testing.KeySelectorExpression);
			Assert.AreEqual(valueSelectorExpression, testing.ValueSelectorExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestConcurrentDictionaring05()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> valueSelectorExpression = i => i.Num;
			System.Collections.Generic.IEqualityComparer<int> equalityComparer = EqualityComparer<int>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source.ConcurrentDictionaring<Item, int, int>(
				keySelectorExpression,
				valueSelectorExpression,
				equalityComparer).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(keySelectorExpression, testing.KeySelectorExpression);
			Assert.AreEqual(valueSelectorExpression, testing.ValueSelectorExpression);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestConcurrentDictionaring06()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> valueSelectorExpression = i => i.Num;
			OcConsumer consumer = new OcConsumer();
			var testing = source.ConcurrentDictionaring<Item, int, int>(
				keySelectorExpression,
				valueSelectorExpression).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(keySelectorExpression, testing.KeySelectorExpression);
			Assert.AreEqual(valueSelectorExpression, testing.ValueSelectorExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestConcurrentDictionaring07()
		{
			ObservableCollection<Item> source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> valueSelectorExpression = i => i.Num;
			System.Collections.Generic.IEqualityComparer<int> equalityComparer = EqualityComparer<int>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source.ConcurrentDictionaring<Item, int, int>(
				keySelectorExpression,
				valueSelectorExpression,
				equalityComparer).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(keySelectorExpression, testing.KeySelectorExpression);
			Assert.AreEqual(valueSelectorExpression, testing.ValueSelectorExpression);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestConcurrentDictionaring08()
		{
			ObservableCollection<Item> source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> valueSelectorExpression = i => i.Num;
			OcConsumer consumer = new OcConsumer();
			var testing = source.ConcurrentDictionaring<Item, int, int>(
				keySelectorExpression,
				valueSelectorExpression).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(keySelectorExpression, testing.KeySelectorExpression);
			Assert.AreEqual(valueSelectorExpression, testing.ValueSelectorExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestConcurrentDictionaring09()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> valueSelectorExpression = i => i.Num;
			Scalar<System.Collections.Generic.IEqualityComparer<int>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<int>>(EqualityComparer<int>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.ConcurrentDictionaring<Item, int, int>(
				keySelectorExpression,
				valueSelectorExpression,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(keySelectorExpression, testing.KeySelectorExpression);
			Assert.AreEqual(valueSelectorExpression, testing.ValueSelectorExpression);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestConcurrentDictionaring10()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> valueSelectorExpression = i => i.Num;
			Scalar<System.Collections.Generic.IEqualityComparer<int>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<int>>(EqualityComparer<int>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.ConcurrentDictionaring<Item, int, int>(
				keySelectorExpression,
				valueSelectorExpression,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(keySelectorExpression, testing.KeySelectorExpression);
			Assert.AreEqual(valueSelectorExpression, testing.ValueSelectorExpression);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestConcurrentDictionaring11()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> valueSelectorExpression = i => i.Num;
			Scalar<System.Collections.Generic.IEqualityComparer<int>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<int>>(EqualityComparer<int>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source.ConcurrentDictionaring<Item, int, int>(
				keySelectorExpression,
				valueSelectorExpression,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(keySelectorExpression, testing.KeySelectorExpression);
			Assert.AreEqual(valueSelectorExpression, testing.ValueSelectorExpression);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestConcurrentDictionaring12()
		{
			ObservableCollection<Item> source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> valueSelectorExpression = i => i.Num;
			Scalar<System.Collections.Generic.IEqualityComparer<int>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<int>>(EqualityComparer<int>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source.ConcurrentDictionaring<Item, int, int>(
				keySelectorExpression,
				valueSelectorExpression,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(keySelectorExpression, testing.KeySelectorExpression);
			Assert.AreEqual(valueSelectorExpression, testing.ValueSelectorExpression);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Change(null);
			test();
			consumer.Dispose();
		}
		#endregion
		#region ContainsComputing

		
		[Test, Combinatorial]
		public void TestContainsComputing01()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<Item> itemScalar = getScalar<Item>(new QuickTests.Item(1, true));
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.ContainsComputing<Item>(
				itemScalar,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(itemScalar, testing.ItemScalar);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Item>)itemScalar).Touch();
			test();
			((Scalar<Item>)itemScalar).Change(null);
			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestContainsComputing02()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<Item> itemScalar = getScalar<Item>(new QuickTests.Item(1, true));
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.ContainsComputing<Item>(
				itemScalar).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(itemScalar, testing.ItemScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Item>)itemScalar).Touch();
			test();
			((Scalar<Item>)itemScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestContainsComputing03()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<Item> itemScalar = getScalar<Item>(new QuickTests.Item(1, true));
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.ContainsComputing<Item>(
				itemScalar,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(itemScalar, testing.ItemScalar);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Item>)itemScalar).Touch();
			test();
			((Scalar<Item>)itemScalar).Change(null);
			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestContainsComputing04()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<Item> itemScalar = getScalar<Item>(new QuickTests.Item(1, true));
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.ContainsComputing<Item>(
				itemScalar).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(itemScalar, testing.ItemScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Item>)itemScalar).Touch();
			test();
			((Scalar<Item>)itemScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestContainsComputing05()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Item item = new QuickTests.Item(1, true);
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.ContainsComputing<Item>(
				item,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(item, testing.Item);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestContainsComputing06()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Item item = new QuickTests.Item(1, true);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.ContainsComputing<Item>(
				item).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(item, testing.Item);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestContainsComputing07()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Item item = new QuickTests.Item(1, true);
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.ContainsComputing<Item>(
				item,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(item, testing.Item);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestContainsComputing08()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Item item = new QuickTests.Item(1, true);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.ContainsComputing<Item>(
				item).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(item, testing.Item);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestContainsComputing09()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<Item> itemScalar = getScalar<Item>(new QuickTests.Item(1, true));
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.ContainsComputing<Item>(
				itemScalar,
				equalityComparer).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(itemScalar, testing.ItemScalar);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Item>)itemScalar).Touch();
			test();
			((Scalar<Item>)itemScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestContainsComputing10()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<Item> itemScalar = getScalar<Item>(new QuickTests.Item(1, true));
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.ContainsComputing<Item>(
				itemScalar,
				equalityComparer).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(itemScalar, testing.ItemScalar);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Item>)itemScalar).Touch();
			test();
			((Scalar<Item>)itemScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestContainsComputing11()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Item item = new QuickTests.Item(1, true);
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.ContainsComputing<Item>(
				item,
				equalityComparer).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(item, testing.Item);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestContainsComputing12()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Item item = new QuickTests.Item(1, true);
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.ContainsComputing<Item>(
				item,
				equalityComparer).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(item, testing.Item);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestContainsComputing13()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			Scalar<Item> itemScalar = getScalar<Item>(new QuickTests.Item(1, true));
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source.ContainsComputing<Item>(
				itemScalar,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(itemScalar, testing.ItemScalar);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Item>)itemScalar).Touch();
			test();
			((Scalar<Item>)itemScalar).Change(null);
			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestContainsComputing14()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			Scalar<Item> itemScalar = getScalar<Item>(new QuickTests.Item(1, true));
			OcConsumer consumer = new OcConsumer();
			var testing = source.ContainsComputing<Item>(
				itemScalar).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(itemScalar, testing.ItemScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Item>)itemScalar).Touch();
			test();
			((Scalar<Item>)itemScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestContainsComputing15()
		{
			ObservableCollection<Item> source = getItems();
			Scalar<Item> itemScalar = getScalar<Item>(new QuickTests.Item(1, true));
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source.ContainsComputing<Item>(
				itemScalar,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(itemScalar, testing.ItemScalar);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Item>)itemScalar).Touch();
			test();
			((Scalar<Item>)itemScalar).Change(null);
			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestContainsComputing16()
		{
			ObservableCollection<Item> source = getItems();
			Scalar<Item> itemScalar = getScalar<Item>(new QuickTests.Item(1, true));
			OcConsumer consumer = new OcConsumer();
			var testing = source.ContainsComputing<Item>(
				itemScalar).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(itemScalar, testing.ItemScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Item>)itemScalar).Touch();
			test();
			((Scalar<Item>)itemScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestContainsComputing17()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			Item item = new QuickTests.Item(1, true);
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source.ContainsComputing<Item>(
				item,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(item, testing.Item);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestContainsComputing18()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			Item item = new QuickTests.Item(1, true);
			OcConsumer consumer = new OcConsumer();
			var testing = source.ContainsComputing<Item>(
				item).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(item, testing.Item);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestContainsComputing19()
		{
			ObservableCollection<Item> source = getItems();
			Item item = new QuickTests.Item(1, true);
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source.ContainsComputing<Item>(
				item,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(item, testing.Item);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestContainsComputing20()
		{
			ObservableCollection<Item> source = getItems();
			Item item = new QuickTests.Item(1, true);
			OcConsumer consumer = new OcConsumer();
			var testing = source.ContainsComputing<Item>(
				item).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(item, testing.Item);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestContainsComputing21()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			Scalar<Item> itemScalar = getScalar<Item>(new QuickTests.Item(1, true));
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source.ContainsComputing<Item>(
				itemScalar,
				equalityComparer).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(itemScalar, testing.ItemScalar);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Item>)itemScalar).Touch();
			test();
			((Scalar<Item>)itemScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestContainsComputing22()
		{
			ObservableCollection<Item> source = getItems();
			Scalar<Item> itemScalar = getScalar<Item>(new QuickTests.Item(1, true));
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source.ContainsComputing<Item>(
				itemScalar,
				equalityComparer).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(itemScalar, testing.ItemScalar);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Item>)itemScalar).Touch();
			test();
			((Scalar<Item>)itemScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestContainsComputing23()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			Item item = new QuickTests.Item(1, true);
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source.ContainsComputing<Item>(
				item,
				equalityComparer).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(item, testing.Item);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestContainsComputing24()
		{
			ObservableCollection<Item> source = getItems();
			Item item = new QuickTests.Item(1, true);
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source.ContainsComputing<Item>(
				item,
				equalityComparer).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(item, testing.Item);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		#endregion
		#region Dictionaring

		
		[Test, Combinatorial]
		public void TestDictionaring01()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> valueSelectorExpression = i => i.Num;
			System.Collections.Generic.IEqualityComparer<int> equalityComparer = EqualityComparer<int>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Dictionaring<Item, int, int>(
				keySelectorExpression,
				valueSelectorExpression,
				equalityComparer).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(keySelectorExpression, testing.KeySelectorExpression);
			Assert.AreEqual(valueSelectorExpression, testing.ValueSelectorExpression);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestDictionaring02()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> valueSelectorExpression = i => i.Num;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Dictionaring<Item, int, int>(
				keySelectorExpression,
				valueSelectorExpression).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(keySelectorExpression, testing.KeySelectorExpression);
			Assert.AreEqual(valueSelectorExpression, testing.ValueSelectorExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestDictionaring03()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> valueSelectorExpression = i => i.Num;
			System.Collections.Generic.IEqualityComparer<int> equalityComparer = EqualityComparer<int>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Dictionaring<Item, int, int>(
				keySelectorExpression,
				valueSelectorExpression,
				equalityComparer).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(keySelectorExpression, testing.KeySelectorExpression);
			Assert.AreEqual(valueSelectorExpression, testing.ValueSelectorExpression);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestDictionaring04()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> valueSelectorExpression = i => i.Num;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Dictionaring<Item, int, int>(
				keySelectorExpression,
				valueSelectorExpression).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(keySelectorExpression, testing.KeySelectorExpression);
			Assert.AreEqual(valueSelectorExpression, testing.ValueSelectorExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestDictionaring05()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> valueSelectorExpression = i => i.Num;
			System.Collections.Generic.IEqualityComparer<int> equalityComparer = EqualityComparer<int>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source.Dictionaring<Item, int, int>(
				keySelectorExpression,
				valueSelectorExpression,
				equalityComparer).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(keySelectorExpression, testing.KeySelectorExpression);
			Assert.AreEqual(valueSelectorExpression, testing.ValueSelectorExpression);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestDictionaring06()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> valueSelectorExpression = i => i.Num;
			OcConsumer consumer = new OcConsumer();
			var testing = source.Dictionaring<Item, int, int>(
				keySelectorExpression,
				valueSelectorExpression).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(keySelectorExpression, testing.KeySelectorExpression);
			Assert.AreEqual(valueSelectorExpression, testing.ValueSelectorExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestDictionaring07()
		{
			ObservableCollection<Item> source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> valueSelectorExpression = i => i.Num;
			System.Collections.Generic.IEqualityComparer<int> equalityComparer = EqualityComparer<int>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source.Dictionaring<Item, int, int>(
				keySelectorExpression,
				valueSelectorExpression,
				equalityComparer).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(keySelectorExpression, testing.KeySelectorExpression);
			Assert.AreEqual(valueSelectorExpression, testing.ValueSelectorExpression);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestDictionaring08()
		{
			ObservableCollection<Item> source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> valueSelectorExpression = i => i.Num;
			OcConsumer consumer = new OcConsumer();
			var testing = source.Dictionaring<Item, int, int>(
				keySelectorExpression,
				valueSelectorExpression).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(keySelectorExpression, testing.KeySelectorExpression);
			Assert.AreEqual(valueSelectorExpression, testing.ValueSelectorExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestDictionaring09()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> valueSelectorExpression = i => i.Num;
			Scalar<System.Collections.Generic.IEqualityComparer<int>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<int>>(EqualityComparer<int>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Dictionaring<Item, int, int>(
				keySelectorExpression,
				valueSelectorExpression,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(keySelectorExpression, testing.KeySelectorExpression);
			Assert.AreEqual(valueSelectorExpression, testing.ValueSelectorExpression);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestDictionaring10()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> valueSelectorExpression = i => i.Num;
			Scalar<System.Collections.Generic.IEqualityComparer<int>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<int>>(EqualityComparer<int>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Dictionaring<Item, int, int>(
				keySelectorExpression,
				valueSelectorExpression,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(keySelectorExpression, testing.KeySelectorExpression);
			Assert.AreEqual(valueSelectorExpression, testing.ValueSelectorExpression);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestDictionaring11()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> valueSelectorExpression = i => i.Num;
			Scalar<System.Collections.Generic.IEqualityComparer<int>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<int>>(EqualityComparer<int>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source.Dictionaring<Item, int, int>(
				keySelectorExpression,
				valueSelectorExpression,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(keySelectorExpression, testing.KeySelectorExpression);
			Assert.AreEqual(valueSelectorExpression, testing.ValueSelectorExpression);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestDictionaring12()
		{
			ObservableCollection<Item> source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> valueSelectorExpression = i => i.Num;
			Scalar<System.Collections.Generic.IEqualityComparer<int>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<int>>(EqualityComparer<int>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source.Dictionaring<Item, int, int>(
				keySelectorExpression,
				valueSelectorExpression,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(keySelectorExpression, testing.KeySelectorExpression);
			Assert.AreEqual(valueSelectorExpression, testing.ValueSelectorExpression);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Change(null);
			test();
			consumer.Dispose();
		}
		#endregion
		#region Distincting

		
		[Test, Combinatorial]
		public void TestDistincting01(
			[Values(1)] int initialCapacity)
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Distincting<Item>(
				equalityComparerScalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestDistincting02()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Distincting<Item>(
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestDistincting03(
			[Values(1)] int initialCapacity)
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Distincting<Item>(
				initialCapacity).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestDistincting04()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Distincting<Item>().For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestDistincting05(
			[Values(1)] int initialCapacity)
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Distincting<Item>(
				equalityComparerScalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestDistincting06()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Distincting<Item>(
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestDistincting07(
			[Values(1)] int initialCapacity)
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Distincting<Item>(
				initialCapacity).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestDistincting08()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Distincting<Item>().For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestDistincting09(
			[Values(1)] int initialCapacity)
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source.Distincting<Item>(
				equalityComparerScalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestDistincting10()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source.Distincting<Item>(
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestDistincting11(
			[Values(1)] int initialCapacity)
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source.Distincting<Item>(
				initialCapacity).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestDistincting12()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source.Distincting<Item>().For(consumer);

			Assert.AreEqual(source, testing.Source);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestDistincting13(
			[Values(1)] int initialCapacity)
		{
			ObservableCollection<Item> source = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source.Distincting<Item>(
				equalityComparerScalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestDistincting14()
		{
			ObservableCollection<Item> source = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source.Distincting<Item>(
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestDistincting15(
			[Values(1)] int initialCapacity)
		{
			ObservableCollection<Item> source = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source.Distincting<Item>(
				initialCapacity).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestDistincting16()
		{
			ObservableCollection<Item> source = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source.Distincting<Item>().For(consumer);

			Assert.AreEqual(source, testing.Source);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestDistincting17(
			[Values(1)] int initialCapacity)
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source.Distincting<Item>(
				equalityComparer,
				initialCapacity).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestDistincting18()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source.Distincting<Item>(
				equalityComparer).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestDistincting19(
			[Values(1)] int initialCapacity)
		{
			ObservableCollection<Item> source = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source.Distincting<Item>(
				equalityComparer,
				initialCapacity).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestDistincting20()
		{
			ObservableCollection<Item> source = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source.Distincting<Item>(
				equalityComparer).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestDistincting21(
			[Values(1)] int initialCapacity)
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Distincting<Item>(
				equalityComparer,
				initialCapacity).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestDistincting22()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Distincting<Item>(
				equalityComparer).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestDistincting23(
			[Values(1)] int initialCapacity)
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Distincting<Item>(
				equalityComparer,
				initialCapacity).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestDistincting24()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Distincting<Item>(
				equalityComparer).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		#endregion
		#region Excepting

		
		[Test, Combinatorial]
		public void TestExcepting01(
			[Values(1)] int initialCapacity)
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Excepting<Item>(
				source2Scalar,
				equalityComparerScalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting02()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Excepting<Item>(
				source2Scalar,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting03(
			[Values(1)] int initialCapacity)
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Excepting<Item>(
				source2Scalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting04()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Excepting<Item>(
				source2Scalar).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting05(
			[Values(1)] int initialCapacity)
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Excepting<Item>(
				source2Scalar,
				equalityComparerScalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting06()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Excepting<Item>(
				source2Scalar,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting07(
			[Values(1)] int initialCapacity)
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Excepting<Item>(
				source2Scalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting08()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Excepting<Item>(
				source2Scalar).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting09(
			[Values(1)] int initialCapacity)
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Excepting<Item>(
				source2Scalar,
				equalityComparerScalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting10()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Excepting<Item>(
				source2Scalar,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting11(
			[Values(1)] int initialCapacity)
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Excepting<Item>(
				source2Scalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting12()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Excepting<Item>(
				source2Scalar).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting13(
			[Values(1)] int initialCapacity)
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Excepting<Item>(
				source2Scalar,
				equalityComparerScalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting14()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Excepting<Item>(
				source2Scalar,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting15(
			[Values(1)] int initialCapacity)
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Excepting<Item>(
				source2Scalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting16()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Excepting<Item>(
				source2Scalar).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting17(
			[Values(1)] int initialCapacity)
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Excepting<Item>(
				source2,
				equalityComparerScalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting18()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Excepting<Item>(
				source2,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting19(
			[Values(1)] int initialCapacity)
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Excepting<Item>(
				source2,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting20()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Excepting<Item>(
				source2).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2, testing.Source2);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting21(
			[Values(1)] int initialCapacity)
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			ObservableCollection<Item> source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Excepting<Item>(
				source2,
				equalityComparerScalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting22()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			ObservableCollection<Item> source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Excepting<Item>(
				source2,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting23(
			[Values(1)] int initialCapacity)
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			ObservableCollection<Item> source2 = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Excepting<Item>(
				source2,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting24()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			ObservableCollection<Item> source2 = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Excepting<Item>(
				source2).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2, testing.Source2);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting25(
			[Values(1)] int initialCapacity)
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Excepting<Item>(
				source2,
				equalityComparerScalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting26()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Excepting<Item>(
				source2,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting27(
			[Values(1)] int initialCapacity)
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Excepting<Item>(
				source2,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting28()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Excepting<Item>(
				source2).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2, testing.Source2);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting29(
			[Values(1)] int initialCapacity)
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			ObservableCollection<Item> source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Excepting<Item>(
				source2,
				equalityComparerScalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting30()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			ObservableCollection<Item> source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Excepting<Item>(
				source2,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting31(
			[Values(1)] int initialCapacity)
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			ObservableCollection<Item> source2 = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Excepting<Item>(
				source2,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting32()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			ObservableCollection<Item> source2 = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Excepting<Item>(
				source2).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2, testing.Source2);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting33(
			[Values(1)] int initialCapacity)
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Excepting<Item>(
				source2,
				equalityComparer,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting34()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Excepting<Item>(
				source2,
				equalityComparer).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting35(
			[Values(1)] int initialCapacity)
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			ObservableCollection<Item> source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Excepting<Item>(
				source2,
				equalityComparer,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting36()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			ObservableCollection<Item> source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Excepting<Item>(
				source2,
				equalityComparer).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting37(
			[Values(1)] int initialCapacity)
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Excepting<Item>(
				source2,
				equalityComparer,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting38()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Excepting<Item>(
				source2,
				equalityComparer).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting39(
			[Values(1)] int initialCapacity)
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			ObservableCollection<Item> source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Excepting<Item>(
				source2,
				equalityComparer,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting40()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			ObservableCollection<Item> source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Excepting<Item>(
				source2,
				equalityComparer).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting41(
			[Values(1)] int initialCapacity)
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Excepting<Item>(
				source2Scalar,
				equalityComparer,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting42()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Excepting<Item>(
				source2Scalar,
				equalityComparer).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting43(
			[Values(1)] int initialCapacity)
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Excepting<Item>(
				source2Scalar,
				equalityComparer,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting44()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Excepting<Item>(
				source2Scalar,
				equalityComparer).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting45(
			[Values(1)] int initialCapacity)
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Excepting<Item>(
				source2Scalar,
				equalityComparer,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting46()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Excepting<Item>(
				source2Scalar,
				equalityComparer).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting47(
			[Values(1)] int initialCapacity)
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Excepting<Item>(
				source2Scalar,
				equalityComparer,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting48()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Excepting<Item>(
				source2Scalar,
				equalityComparer).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting49(
			[Values(1)] int initialCapacity)
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Excepting<Item>(
				source2Scalar,
				equalityComparerScalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting50()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Excepting<Item>(
				source2Scalar,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting51(
			[Values(1)] int initialCapacity)
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Excepting<Item>(
				source2Scalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting52()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Excepting<Item>(
				source2Scalar).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting53(
			[Values(1)] int initialCapacity)
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Excepting<Item>(
				source2Scalar,
				equalityComparerScalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting54()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Excepting<Item>(
				source2Scalar,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting55(
			[Values(1)] int initialCapacity)
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Excepting<Item>(
				source2Scalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting56()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Excepting<Item>(
				source2Scalar).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting57(
			[Values(1)] int initialCapacity)
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Excepting<Item>(
				source2Scalar,
				equalityComparerScalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting58()
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Excepting<Item>(
				source2Scalar,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting59(
			[Values(1)] int initialCapacity)
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Excepting<Item>(
				source2Scalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting60()
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Excepting<Item>(
				source2Scalar).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting61(
			[Values(1)] int initialCapacity)
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Excepting<Item>(
				source2Scalar,
				equalityComparerScalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting62()
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Excepting<Item>(
				source2Scalar,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting63(
			[Values(1)] int initialCapacity)
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Excepting<Item>(
				source2Scalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting64()
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Excepting<Item>(
				source2Scalar).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting65(
			[Values(1)] int initialCapacity)
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Excepting<Item>(
				source2,
				equalityComparerScalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting66()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Excepting<Item>(
				source2,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting67(
			[Values(1)] int initialCapacity)
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Excepting<Item>(
				source2,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting68()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Excepting<Item>(
				source2).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2, testing.Source2);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting69(
			[Values(1)] int initialCapacity)
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Excepting<Item>(
				source2,
				equalityComparerScalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting70()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Excepting<Item>(
				source2,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting71(
			[Values(1)] int initialCapacity)
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Excepting<Item>(
				source2,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting72()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Excepting<Item>(
				source2).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2, testing.Source2);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting73(
			[Values(1)] int initialCapacity)
		{
			ObservableCollection<Item> source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Excepting<Item>(
				source2,
				equalityComparerScalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting74()
		{
			ObservableCollection<Item> source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Excepting<Item>(
				source2,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting75(
			[Values(1)] int initialCapacity)
		{
			ObservableCollection<Item> source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Excepting<Item>(
				source2,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting76()
		{
			ObservableCollection<Item> source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Excepting<Item>(
				source2).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2, testing.Source2);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting77(
			[Values(1)] int initialCapacity)
		{
			ObservableCollection<Item> source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Excepting<Item>(
				source2,
				equalityComparerScalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting78()
		{
			ObservableCollection<Item> source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Excepting<Item>(
				source2,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting79(
			[Values(1)] int initialCapacity)
		{
			ObservableCollection<Item> source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Excepting<Item>(
				source2,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting80()
		{
			ObservableCollection<Item> source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Excepting<Item>(
				source2).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2, testing.Source2);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting81(
			[Values(1)] int initialCapacity)
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Excepting<Item>(
				source2,
				equalityComparer,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting82()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Excepting<Item>(
				source2,
				equalityComparer).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting83(
			[Values(1)] int initialCapacity)
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Excepting<Item>(
				source2,
				equalityComparer,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting84()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Excepting<Item>(
				source2,
				equalityComparer).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting85(
			[Values(1)] int initialCapacity)
		{
			ObservableCollection<Item> source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Excepting<Item>(
				source2,
				equalityComparer,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting86()
		{
			ObservableCollection<Item> source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Excepting<Item>(
				source2,
				equalityComparer).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting87(
			[Values(1)] int initialCapacity)
		{
			ObservableCollection<Item> source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Excepting<Item>(
				source2,
				equalityComparer,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting88()
		{
			ObservableCollection<Item> source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Excepting<Item>(
				source2,
				equalityComparer).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting89(
			[Values(1)] int initialCapacity)
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Excepting<Item>(
				source2Scalar,
				equalityComparer,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting90()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Excepting<Item>(
				source2Scalar,
				equalityComparer).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting91(
			[Values(1)] int initialCapacity)
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Excepting<Item>(
				source2Scalar,
				equalityComparer,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting92()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Excepting<Item>(
				source2Scalar,
				equalityComparer).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting93(
			[Values(1)] int initialCapacity)
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Excepting<Item>(
				source2Scalar,
				equalityComparer,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting94()
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Excepting<Item>(
				source2Scalar,
				equalityComparer).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting95(
			[Values(1)] int initialCapacity)
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Excepting<Item>(
				source2Scalar,
				equalityComparer,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExcepting96()
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Excepting<Item>(
				source2Scalar,
				equalityComparer).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		#endregion
		#region Extending

		
		[Test, Combinatorial]
		public void TestExtending01()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Extending<Item>().For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExtending02()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Extending<Item>().For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExtending03()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source.Extending<Item>().For(consumer);

			Assert.AreEqual(source, testing.Source);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestExtending04()
		{
			ObservableCollection<Item> source = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source.Extending<Item>().For(consumer);

			Assert.AreEqual(source, testing.Source);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		#endregion
		#region Filtering

		
		[Test, Combinatorial]
		public void TestFiltering01(
			[Values(1)] int initialCapacity)
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Filtering<Item>(
				predicateExpression,
				initialCapacity).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(predicateExpression, testing.PredicateExpression);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestFiltering02()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Filtering<Item>(
				predicateExpression).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(predicateExpression, testing.PredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestFiltering03(
			[Values(1)] int initialCapacity)
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Filtering<Item>(
				predicateExpression,
				initialCapacity).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(predicateExpression, testing.PredicateExpression);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestFiltering04()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Filtering<Item>(
				predicateExpression).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(predicateExpression, testing.PredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestFiltering05(
			[Values(1)] int initialCapacity)
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			OcConsumer consumer = new OcConsumer();
			var testing = source.Filtering<Item>(
				predicateExpression,
				initialCapacity).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(predicateExpression, testing.PredicateExpression);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestFiltering06()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			OcConsumer consumer = new OcConsumer();
			var testing = source.Filtering<Item>(
				predicateExpression).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(predicateExpression, testing.PredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestFiltering07(
			[Values(1)] int initialCapacity)
		{
			ObservableCollection<Item> source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			OcConsumer consumer = new OcConsumer();
			var testing = source.Filtering<Item>(
				predicateExpression,
				initialCapacity).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(predicateExpression, testing.PredicateExpression);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestFiltering08()
		{
			ObservableCollection<Item> source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			OcConsumer consumer = new OcConsumer();
			var testing = source.Filtering<Item>(
				predicateExpression).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(predicateExpression, testing.PredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		#endregion
		#region FirstComputing

		
		[Test, Combinatorial]
		public void TestFirstComputing01()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Item defaultValue = null;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.FirstComputing<Item>(
				defaultValue).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(defaultValue, testing.DefaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestFirstComputing02()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.FirstComputing<Item>().For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestFirstComputing03()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Item defaultValue = null;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.FirstComputing<Item>(
				defaultValue).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(defaultValue, testing.DefaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestFirstComputing04()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.FirstComputing<Item>().For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestFirstComputing05()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			Item defaultValue = null;
			OcConsumer consumer = new OcConsumer();
			var testing = source.FirstComputing<Item>(
				defaultValue).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(defaultValue, testing.DefaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestFirstComputing06()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source.FirstComputing<Item>().For(consumer);

			Assert.AreEqual(source, testing.Source);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestFirstComputing07()
		{
			ObservableCollection<Item> source = getItems();
			Item defaultValue = null;
			OcConsumer consumer = new OcConsumer();
			var testing = source.FirstComputing<Item>(
				defaultValue).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(defaultValue, testing.DefaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestFirstComputing08()
		{
			ObservableCollection<Item> source = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source.FirstComputing<Item>().For(consumer);

			Assert.AreEqual(source, testing.Source);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		#endregion
		#region Grouping

		
		[Test, Combinatorial]
		public void TestGrouping01(
			[Values(1)] int initialCapacity)
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			Scalar<System.Collections.Generic.IEqualityComparer<int>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<int>>(EqualityComparer<int>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Grouping<Item, int>(
				keySelectorExpression,
				equalityComparerScalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(keySelectorExpression, testing.KeySelectorExpression);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestGrouping02()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			Scalar<System.Collections.Generic.IEqualityComparer<int>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<int>>(EqualityComparer<int>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Grouping<Item, int>(
				keySelectorExpression,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(keySelectorExpression, testing.KeySelectorExpression);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestGrouping03(
			[Values(1)] int initialCapacity)
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Grouping<Item, int>(
				keySelectorExpression,
				initialCapacity).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(keySelectorExpression, testing.KeySelectorExpression);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestGrouping04()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Grouping<Item, int>(
				keySelectorExpression).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(keySelectorExpression, testing.KeySelectorExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestGrouping05(
			[Values(1)] int initialCapacity)
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			Scalar<System.Collections.Generic.IEqualityComparer<int>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<int>>(EqualityComparer<int>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Grouping<Item, int>(
				keySelectorExpression,
				equalityComparerScalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(keySelectorExpression, testing.KeySelectorExpression);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestGrouping06()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			Scalar<System.Collections.Generic.IEqualityComparer<int>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<int>>(EqualityComparer<int>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Grouping<Item, int>(
				keySelectorExpression,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(keySelectorExpression, testing.KeySelectorExpression);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestGrouping07(
			[Values(1)] int initialCapacity)
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Grouping<Item, int>(
				keySelectorExpression,
				initialCapacity).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(keySelectorExpression, testing.KeySelectorExpression);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestGrouping08()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Grouping<Item, int>(
				keySelectorExpression).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(keySelectorExpression, testing.KeySelectorExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestGrouping09(
			[Values(1)] int initialCapacity)
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			Scalar<System.Collections.Generic.IEqualityComparer<int>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<int>>(EqualityComparer<int>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source.Grouping<Item, int>(
				keySelectorExpression,
				equalityComparerScalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(keySelectorExpression, testing.KeySelectorExpression);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestGrouping10()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			Scalar<System.Collections.Generic.IEqualityComparer<int>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<int>>(EqualityComparer<int>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source.Grouping<Item, int>(
				keySelectorExpression,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(keySelectorExpression, testing.KeySelectorExpression);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestGrouping11(
			[Values(1)] int initialCapacity)
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			OcConsumer consumer = new OcConsumer();
			var testing = source.Grouping<Item, int>(
				keySelectorExpression,
				initialCapacity).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(keySelectorExpression, testing.KeySelectorExpression);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestGrouping12()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			OcConsumer consumer = new OcConsumer();
			var testing = source.Grouping<Item, int>(
				keySelectorExpression).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(keySelectorExpression, testing.KeySelectorExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestGrouping13(
			[Values(1)] int initialCapacity)
		{
			ObservableCollection<Item> source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			Scalar<System.Collections.Generic.IEqualityComparer<int>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<int>>(EqualityComparer<int>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source.Grouping<Item, int>(
				keySelectorExpression,
				equalityComparerScalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(keySelectorExpression, testing.KeySelectorExpression);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestGrouping14()
		{
			ObservableCollection<Item> source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			Scalar<System.Collections.Generic.IEqualityComparer<int>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<int>>(EqualityComparer<int>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source.Grouping<Item, int>(
				keySelectorExpression,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(keySelectorExpression, testing.KeySelectorExpression);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestGrouping15(
			[Values(1)] int initialCapacity)
		{
			ObservableCollection<Item> source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			OcConsumer consumer = new OcConsumer();
			var testing = source.Grouping<Item, int>(
				keySelectorExpression,
				initialCapacity).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(keySelectorExpression, testing.KeySelectorExpression);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestGrouping16()
		{
			ObservableCollection<Item> source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			OcConsumer consumer = new OcConsumer();
			var testing = source.Grouping<Item, int>(
				keySelectorExpression).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(keySelectorExpression, testing.KeySelectorExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestGrouping17(
			[Values(1)] int initialCapacity)
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			System.Collections.Generic.IEqualityComparer<int> equalityComparer = EqualityComparer<int>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Grouping<Item, int>(
				keySelectorExpression,
				equalityComparer,
				initialCapacity).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(keySelectorExpression, testing.KeySelectorExpression);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestGrouping18()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			System.Collections.Generic.IEqualityComparer<int> equalityComparer = EqualityComparer<int>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Grouping<Item, int>(
				keySelectorExpression,
				equalityComparer).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(keySelectorExpression, testing.KeySelectorExpression);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestGrouping19(
			[Values(1)] int initialCapacity)
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			System.Collections.Generic.IEqualityComparer<int> equalityComparer = EqualityComparer<int>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Grouping<Item, int>(
				keySelectorExpression,
				equalityComparer,
				initialCapacity).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(keySelectorExpression, testing.KeySelectorExpression);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestGrouping20()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			System.Collections.Generic.IEqualityComparer<int> equalityComparer = EqualityComparer<int>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Grouping<Item, int>(
				keySelectorExpression,
				equalityComparer).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(keySelectorExpression, testing.KeySelectorExpression);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestGrouping21(
			[Values(1)] int initialCapacity)
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			System.Collections.Generic.IEqualityComparer<int> equalityComparer = EqualityComparer<int>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source.Grouping<Item, int>(
				keySelectorExpression,
				equalityComparer,
				initialCapacity).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(keySelectorExpression, testing.KeySelectorExpression);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestGrouping22()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			System.Collections.Generic.IEqualityComparer<int> equalityComparer = EqualityComparer<int>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source.Grouping<Item, int>(
				keySelectorExpression,
				equalityComparer).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(keySelectorExpression, testing.KeySelectorExpression);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestGrouping23(
			[Values(1)] int initialCapacity)
		{
			ObservableCollection<Item> source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			System.Collections.Generic.IEqualityComparer<int> equalityComparer = EqualityComparer<int>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source.Grouping<Item, int>(
				keySelectorExpression,
				equalityComparer,
				initialCapacity).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(keySelectorExpression, testing.KeySelectorExpression);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestGrouping24()
		{
			ObservableCollection<Item> source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			System.Collections.Generic.IEqualityComparer<int> equalityComparer = EqualityComparer<int>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source.Grouping<Item, int>(
				keySelectorExpression,
				equalityComparer).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(keySelectorExpression, testing.KeySelectorExpression);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		#endregion
		#region GroupJoining

		
		[Test, Combinatorial]
		public void TestGroupJoining01()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			Scalar<System.Collections.Generic.IEqualityComparer<int>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<int>>(EqualityComparer<int>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = outerSourceScalar.GroupJoining<Item, Item, int>(
				innerSourceScalar,
				outerKeySelector,
				innerKeySelector,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(outerSourceScalar, testing.OuterSourceScalar);
			Assert.AreEqual(innerSourceScalar, testing.InnerSourceScalar);
			Assert.AreEqual(outerKeySelector, testing.OuterKeySelector);
			Assert.AreEqual(innerKeySelector, testing.InnerKeySelector);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestGroupJoining02()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			OcConsumer consumer = new OcConsumer();
			var testing = outerSourceScalar.GroupJoining<Item, Item, int>(
				innerSourceScalar,
				outerKeySelector,
				innerKeySelector).For(consumer);

			Assert.AreEqual(outerSourceScalar, testing.OuterSourceScalar);
			Assert.AreEqual(innerSourceScalar, testing.InnerSourceScalar);
			Assert.AreEqual(outerKeySelector, testing.OuterKeySelector);
			Assert.AreEqual(innerKeySelector, testing.InnerKeySelector);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestGroupJoining03()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<ObservableCollection<Item>> innerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			Scalar<System.Collections.Generic.IEqualityComparer<int>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<int>>(EqualityComparer<int>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = outerSourceScalar.GroupJoining<Item, Item, int>(
				innerSourceScalar,
				outerKeySelector,
				innerKeySelector,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(outerSourceScalar, testing.OuterSourceScalar);
			Assert.AreEqual(innerSourceScalar, testing.InnerSourceScalar);
			Assert.AreEqual(outerKeySelector, testing.OuterKeySelector);
			Assert.AreEqual(innerKeySelector, testing.InnerKeySelector);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestGroupJoining04()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<ObservableCollection<Item>> innerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			OcConsumer consumer = new OcConsumer();
			var testing = outerSourceScalar.GroupJoining<Item, Item, int>(
				innerSourceScalar,
				outerKeySelector,
				innerKeySelector).For(consumer);

			Assert.AreEqual(outerSourceScalar, testing.OuterSourceScalar);
			Assert.AreEqual(innerSourceScalar, testing.InnerSourceScalar);
			Assert.AreEqual(outerKeySelector, testing.OuterKeySelector);
			Assert.AreEqual(innerKeySelector, testing.InnerKeySelector);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestGroupJoining05()
		{
			Scalar<ObservableCollection<Item>> outerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			Scalar<System.Collections.Generic.IEqualityComparer<int>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<int>>(EqualityComparer<int>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = outerSourceScalar.GroupJoining<Item, Item, int>(
				innerSourceScalar,
				outerKeySelector,
				innerKeySelector,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(outerSourceScalar, testing.OuterSourceScalar);
			Assert.AreEqual(innerSourceScalar, testing.InnerSourceScalar);
			Assert.AreEqual(outerKeySelector, testing.OuterKeySelector);
			Assert.AreEqual(innerKeySelector, testing.InnerKeySelector);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestGroupJoining06()
		{
			Scalar<ObservableCollection<Item>> outerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			OcConsumer consumer = new OcConsumer();
			var testing = outerSourceScalar.GroupJoining<Item, Item, int>(
				innerSourceScalar,
				outerKeySelector,
				innerKeySelector).For(consumer);

			Assert.AreEqual(outerSourceScalar, testing.OuterSourceScalar);
			Assert.AreEqual(innerSourceScalar, testing.InnerSourceScalar);
			Assert.AreEqual(outerKeySelector, testing.OuterKeySelector);
			Assert.AreEqual(innerKeySelector, testing.InnerKeySelector);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestGroupJoining07()
		{
			Scalar<ObservableCollection<Item>> outerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<ObservableCollection<Item>> innerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			Scalar<System.Collections.Generic.IEqualityComparer<int>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<int>>(EqualityComparer<int>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = outerSourceScalar.GroupJoining<Item, Item, int>(
				innerSourceScalar,
				outerKeySelector,
				innerKeySelector,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(outerSourceScalar, testing.OuterSourceScalar);
			Assert.AreEqual(innerSourceScalar, testing.InnerSourceScalar);
			Assert.AreEqual(outerKeySelector, testing.OuterKeySelector);
			Assert.AreEqual(innerKeySelector, testing.InnerKeySelector);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestGroupJoining08()
		{
			Scalar<ObservableCollection<Item>> outerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<ObservableCollection<Item>> innerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			OcConsumer consumer = new OcConsumer();
			var testing = outerSourceScalar.GroupJoining<Item, Item, int>(
				innerSourceScalar,
				outerKeySelector,
				innerKeySelector).For(consumer);

			Assert.AreEqual(outerSourceScalar, testing.OuterSourceScalar);
			Assert.AreEqual(innerSourceScalar, testing.InnerSourceScalar);
			Assert.AreEqual(outerKeySelector, testing.OuterKeySelector);
			Assert.AreEqual(innerKeySelector, testing.InnerKeySelector);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestGroupJoining09()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			Scalar<System.Collections.Generic.IEqualityComparer<int>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<int>>(EqualityComparer<int>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = outerSourceScalar.GroupJoining<Item, Item, int>(
				innerSource,
				outerKeySelector,
				innerKeySelector,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(outerSourceScalar, testing.OuterSourceScalar);
			Assert.AreEqual(innerSource, testing.InnerSource);
			Assert.AreEqual(outerKeySelector, testing.OuterKeySelector);
			Assert.AreEqual(innerKeySelector, testing.InnerKeySelector);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestGroupJoining10()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			OcConsumer consumer = new OcConsumer();
			var testing = outerSourceScalar.GroupJoining<Item, Item, int>(
				innerSource,
				outerKeySelector,
				innerKeySelector).For(consumer);

			Assert.AreEqual(outerSourceScalar, testing.OuterSourceScalar);
			Assert.AreEqual(innerSource, testing.InnerSource);
			Assert.AreEqual(outerKeySelector, testing.OuterKeySelector);
			Assert.AreEqual(innerKeySelector, testing.InnerKeySelector);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestGroupJoining11()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			ObservableCollection<Item> innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			Scalar<System.Collections.Generic.IEqualityComparer<int>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<int>>(EqualityComparer<int>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = outerSourceScalar.GroupJoining<Item, Item, int>(
				innerSource,
				outerKeySelector,
				innerKeySelector,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(outerSourceScalar, testing.OuterSourceScalar);
			Assert.AreEqual(innerSource, testing.InnerSource);
			Assert.AreEqual(outerKeySelector, testing.OuterKeySelector);
			Assert.AreEqual(innerKeySelector, testing.InnerKeySelector);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestGroupJoining12()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			ObservableCollection<Item> innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			OcConsumer consumer = new OcConsumer();
			var testing = outerSourceScalar.GroupJoining<Item, Item, int>(
				innerSource,
				outerKeySelector,
				innerKeySelector).For(consumer);

			Assert.AreEqual(outerSourceScalar, testing.OuterSourceScalar);
			Assert.AreEqual(innerSource, testing.InnerSource);
			Assert.AreEqual(outerKeySelector, testing.OuterKeySelector);
			Assert.AreEqual(innerKeySelector, testing.InnerKeySelector);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestGroupJoining13()
		{
			Scalar<ObservableCollection<Item>> outerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			Scalar<System.Collections.Generic.IEqualityComparer<int>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<int>>(EqualityComparer<int>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = outerSourceScalar.GroupJoining<Item, Item, int>(
				innerSource,
				outerKeySelector,
				innerKeySelector,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(outerSourceScalar, testing.OuterSourceScalar);
			Assert.AreEqual(innerSource, testing.InnerSource);
			Assert.AreEqual(outerKeySelector, testing.OuterKeySelector);
			Assert.AreEqual(innerKeySelector, testing.InnerKeySelector);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestGroupJoining14()
		{
			Scalar<ObservableCollection<Item>> outerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			OcConsumer consumer = new OcConsumer();
			var testing = outerSourceScalar.GroupJoining<Item, Item, int>(
				innerSource,
				outerKeySelector,
				innerKeySelector).For(consumer);

			Assert.AreEqual(outerSourceScalar, testing.OuterSourceScalar);
			Assert.AreEqual(innerSource, testing.InnerSource);
			Assert.AreEqual(outerKeySelector, testing.OuterKeySelector);
			Assert.AreEqual(innerKeySelector, testing.InnerKeySelector);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestGroupJoining15()
		{
			Scalar<ObservableCollection<Item>> outerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			ObservableCollection<Item> innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			Scalar<System.Collections.Generic.IEqualityComparer<int>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<int>>(EqualityComparer<int>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = outerSourceScalar.GroupJoining<Item, Item, int>(
				innerSource,
				outerKeySelector,
				innerKeySelector,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(outerSourceScalar, testing.OuterSourceScalar);
			Assert.AreEqual(innerSource, testing.InnerSource);
			Assert.AreEqual(outerKeySelector, testing.OuterKeySelector);
			Assert.AreEqual(innerKeySelector, testing.InnerKeySelector);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestGroupJoining16()
		{
			Scalar<ObservableCollection<Item>> outerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			ObservableCollection<Item> innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			OcConsumer consumer = new OcConsumer();
			var testing = outerSourceScalar.GroupJoining<Item, Item, int>(
				innerSource,
				outerKeySelector,
				innerKeySelector).For(consumer);

			Assert.AreEqual(outerSourceScalar, testing.OuterSourceScalar);
			Assert.AreEqual(innerSource, testing.InnerSource);
			Assert.AreEqual(outerKeySelector, testing.OuterKeySelector);
			Assert.AreEqual(innerKeySelector, testing.InnerKeySelector);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestGroupJoining17()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			System.Collections.Generic.IEqualityComparer<int> equalityComparer = EqualityComparer<int>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = outerSourceScalar.GroupJoining<Item, Item, int>(
				innerSource,
				outerKeySelector,
				innerKeySelector,
				equalityComparer).For(consumer);

			Assert.AreEqual(outerSourceScalar, testing.OuterSourceScalar);
			Assert.AreEqual(innerSource, testing.InnerSource);
			Assert.AreEqual(outerKeySelector, testing.OuterKeySelector);
			Assert.AreEqual(innerKeySelector, testing.InnerKeySelector);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestGroupJoining18()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			ObservableCollection<Item> innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			System.Collections.Generic.IEqualityComparer<int> equalityComparer = EqualityComparer<int>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = outerSourceScalar.GroupJoining<Item, Item, int>(
				innerSource,
				outerKeySelector,
				innerKeySelector,
				equalityComparer).For(consumer);

			Assert.AreEqual(outerSourceScalar, testing.OuterSourceScalar);
			Assert.AreEqual(innerSource, testing.InnerSource);
			Assert.AreEqual(outerKeySelector, testing.OuterKeySelector);
			Assert.AreEqual(innerKeySelector, testing.InnerKeySelector);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestGroupJoining19()
		{
			Scalar<ObservableCollection<Item>> outerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			System.Collections.Generic.IEqualityComparer<int> equalityComparer = EqualityComparer<int>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = outerSourceScalar.GroupJoining<Item, Item, int>(
				innerSource,
				outerKeySelector,
				innerKeySelector,
				equalityComparer).For(consumer);

			Assert.AreEqual(outerSourceScalar, testing.OuterSourceScalar);
			Assert.AreEqual(innerSource, testing.InnerSource);
			Assert.AreEqual(outerKeySelector, testing.OuterKeySelector);
			Assert.AreEqual(innerKeySelector, testing.InnerKeySelector);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestGroupJoining20()
		{
			Scalar<ObservableCollection<Item>> outerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			ObservableCollection<Item> innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			System.Collections.Generic.IEqualityComparer<int> equalityComparer = EqualityComparer<int>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = outerSourceScalar.GroupJoining<Item, Item, int>(
				innerSource,
				outerKeySelector,
				innerKeySelector,
				equalityComparer).For(consumer);

			Assert.AreEqual(outerSourceScalar, testing.OuterSourceScalar);
			Assert.AreEqual(innerSource, testing.InnerSource);
			Assert.AreEqual(outerKeySelector, testing.OuterKeySelector);
			Assert.AreEqual(innerKeySelector, testing.InnerKeySelector);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestGroupJoining21()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			System.Collections.Generic.IEqualityComparer<int> equalityComparer = EqualityComparer<int>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = outerSourceScalar.GroupJoining<Item, Item, int>(
				innerSourceScalar,
				outerKeySelector,
				innerKeySelector,
				equalityComparer).For(consumer);

			Assert.AreEqual(outerSourceScalar, testing.OuterSourceScalar);
			Assert.AreEqual(innerSourceScalar, testing.InnerSourceScalar);
			Assert.AreEqual(outerKeySelector, testing.OuterKeySelector);
			Assert.AreEqual(innerKeySelector, testing.InnerKeySelector);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestGroupJoining22()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<ObservableCollection<Item>> innerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			System.Collections.Generic.IEqualityComparer<int> equalityComparer = EqualityComparer<int>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = outerSourceScalar.GroupJoining<Item, Item, int>(
				innerSourceScalar,
				outerKeySelector,
				innerKeySelector,
				equalityComparer).For(consumer);

			Assert.AreEqual(outerSourceScalar, testing.OuterSourceScalar);
			Assert.AreEqual(innerSourceScalar, testing.InnerSourceScalar);
			Assert.AreEqual(outerKeySelector, testing.OuterKeySelector);
			Assert.AreEqual(innerKeySelector, testing.InnerKeySelector);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestGroupJoining23()
		{
			Scalar<ObservableCollection<Item>> outerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			System.Collections.Generic.IEqualityComparer<int> equalityComparer = EqualityComparer<int>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = outerSourceScalar.GroupJoining<Item, Item, int>(
				innerSourceScalar,
				outerKeySelector,
				innerKeySelector,
				equalityComparer).For(consumer);

			Assert.AreEqual(outerSourceScalar, testing.OuterSourceScalar);
			Assert.AreEqual(innerSourceScalar, testing.InnerSourceScalar);
			Assert.AreEqual(outerKeySelector, testing.OuterKeySelector);
			Assert.AreEqual(innerKeySelector, testing.InnerKeySelector);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestGroupJoining24()
		{
			Scalar<ObservableCollection<Item>> outerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<ObservableCollection<Item>> innerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			System.Collections.Generic.IEqualityComparer<int> equalityComparer = EqualityComparer<int>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = outerSourceScalar.GroupJoining<Item, Item, int>(
				innerSourceScalar,
				outerKeySelector,
				innerKeySelector,
				equalityComparer).For(consumer);

			Assert.AreEqual(outerSourceScalar, testing.OuterSourceScalar);
			Assert.AreEqual(innerSourceScalar, testing.InnerSourceScalar);
			Assert.AreEqual(outerKeySelector, testing.OuterKeySelector);
			Assert.AreEqual(innerKeySelector, testing.InnerKeySelector);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestGroupJoining25()
		{
			System.Collections.Specialized.INotifyCollectionChanged outerSource = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			Scalar<System.Collections.Generic.IEqualityComparer<int>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<int>>(EqualityComparer<int>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = outerSource.GroupJoining<Item, Item, int>(
				innerSourceScalar,
				outerKeySelector,
				innerKeySelector,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(outerSource, testing.OuterSource);
			Assert.AreEqual(innerSourceScalar, testing.InnerSourceScalar);
			Assert.AreEqual(outerKeySelector, testing.OuterKeySelector);
			Assert.AreEqual(innerKeySelector, testing.InnerKeySelector);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestGroupJoining26()
		{
			System.Collections.Specialized.INotifyCollectionChanged outerSource = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			OcConsumer consumer = new OcConsumer();
			var testing = outerSource.GroupJoining<Item, Item, int>(
				innerSourceScalar,
				outerKeySelector,
				innerKeySelector).For(consumer);

			Assert.AreEqual(outerSource, testing.OuterSource);
			Assert.AreEqual(innerSourceScalar, testing.InnerSourceScalar);
			Assert.AreEqual(outerKeySelector, testing.OuterKeySelector);
			Assert.AreEqual(innerKeySelector, testing.InnerKeySelector);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestGroupJoining27()
		{
			System.Collections.Specialized.INotifyCollectionChanged outerSource = getItems();
			Scalar<ObservableCollection<Item>> innerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			Scalar<System.Collections.Generic.IEqualityComparer<int>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<int>>(EqualityComparer<int>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = outerSource.GroupJoining<Item, Item, int>(
				innerSourceScalar,
				outerKeySelector,
				innerKeySelector,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(outerSource, testing.OuterSource);
			Assert.AreEqual(innerSourceScalar, testing.InnerSourceScalar);
			Assert.AreEqual(outerKeySelector, testing.OuterKeySelector);
			Assert.AreEqual(innerKeySelector, testing.InnerKeySelector);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestGroupJoining28()
		{
			System.Collections.Specialized.INotifyCollectionChanged outerSource = getItems();
			Scalar<ObservableCollection<Item>> innerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			OcConsumer consumer = new OcConsumer();
			var testing = outerSource.GroupJoining<Item, Item, int>(
				innerSourceScalar,
				outerKeySelector,
				innerKeySelector).For(consumer);

			Assert.AreEqual(outerSource, testing.OuterSource);
			Assert.AreEqual(innerSourceScalar, testing.InnerSourceScalar);
			Assert.AreEqual(outerKeySelector, testing.OuterKeySelector);
			Assert.AreEqual(innerKeySelector, testing.InnerKeySelector);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestGroupJoining29()
		{
			ObservableCollection<Item> outerSource = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			Scalar<System.Collections.Generic.IEqualityComparer<int>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<int>>(EqualityComparer<int>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = outerSource.GroupJoining<Item, Item, int>(
				innerSourceScalar,
				outerKeySelector,
				innerKeySelector,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(outerSource, testing.OuterSource);
			Assert.AreEqual(innerSourceScalar, testing.InnerSourceScalar);
			Assert.AreEqual(outerKeySelector, testing.OuterKeySelector);
			Assert.AreEqual(innerKeySelector, testing.InnerKeySelector);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestGroupJoining30()
		{
			ObservableCollection<Item> outerSource = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			OcConsumer consumer = new OcConsumer();
			var testing = outerSource.GroupJoining<Item, Item, int>(
				innerSourceScalar,
				outerKeySelector,
				innerKeySelector).For(consumer);

			Assert.AreEqual(outerSource, testing.OuterSource);
			Assert.AreEqual(innerSourceScalar, testing.InnerSourceScalar);
			Assert.AreEqual(outerKeySelector, testing.OuterKeySelector);
			Assert.AreEqual(innerKeySelector, testing.InnerKeySelector);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestGroupJoining31()
		{
			ObservableCollection<Item> outerSource = getItems();
			Scalar<ObservableCollection<Item>> innerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			Scalar<System.Collections.Generic.IEqualityComparer<int>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<int>>(EqualityComparer<int>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = outerSource.GroupJoining<Item, Item, int>(
				innerSourceScalar,
				outerKeySelector,
				innerKeySelector,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(outerSource, testing.OuterSource);
			Assert.AreEqual(innerSourceScalar, testing.InnerSourceScalar);
			Assert.AreEqual(outerKeySelector, testing.OuterKeySelector);
			Assert.AreEqual(innerKeySelector, testing.InnerKeySelector);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestGroupJoining32()
		{
			ObservableCollection<Item> outerSource = getItems();
			Scalar<ObservableCollection<Item>> innerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			OcConsumer consumer = new OcConsumer();
			var testing = outerSource.GroupJoining<Item, Item, int>(
				innerSourceScalar,
				outerKeySelector,
				innerKeySelector).For(consumer);

			Assert.AreEqual(outerSource, testing.OuterSource);
			Assert.AreEqual(innerSourceScalar, testing.InnerSourceScalar);
			Assert.AreEqual(outerKeySelector, testing.OuterKeySelector);
			Assert.AreEqual(innerKeySelector, testing.InnerKeySelector);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestGroupJoining33()
		{
			System.Collections.Specialized.INotifyCollectionChanged outerSource = getItems();
			System.Collections.Specialized.INotifyCollectionChanged innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			Scalar<System.Collections.Generic.IEqualityComparer<int>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<int>>(EqualityComparer<int>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = outerSource.GroupJoining<Item, Item, int>(
				innerSource,
				outerKeySelector,
				innerKeySelector,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(outerSource, testing.OuterSource);
			Assert.AreEqual(innerSource, testing.InnerSource);
			Assert.AreEqual(outerKeySelector, testing.OuterKeySelector);
			Assert.AreEqual(innerKeySelector, testing.InnerKeySelector);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestGroupJoining34()
		{
			System.Collections.Specialized.INotifyCollectionChanged outerSource = getItems();
			System.Collections.Specialized.INotifyCollectionChanged innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			OcConsumer consumer = new OcConsumer();
			var testing = outerSource.GroupJoining<Item, Item, int>(
				innerSource,
				outerKeySelector,
				innerKeySelector).For(consumer);

			Assert.AreEqual(outerSource, testing.OuterSource);
			Assert.AreEqual(innerSource, testing.InnerSource);
			Assert.AreEqual(outerKeySelector, testing.OuterKeySelector);
			Assert.AreEqual(innerKeySelector, testing.InnerKeySelector);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestGroupJoining35()
		{
			System.Collections.Specialized.INotifyCollectionChanged outerSource = getItems();
			ObservableCollection<Item> innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			Scalar<System.Collections.Generic.IEqualityComparer<int>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<int>>(EqualityComparer<int>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = outerSource.GroupJoining<Item, Item, int>(
				innerSource,
				outerKeySelector,
				innerKeySelector,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(outerSource, testing.OuterSource);
			Assert.AreEqual(innerSource, testing.InnerSource);
			Assert.AreEqual(outerKeySelector, testing.OuterKeySelector);
			Assert.AreEqual(innerKeySelector, testing.InnerKeySelector);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestGroupJoining36()
		{
			System.Collections.Specialized.INotifyCollectionChanged outerSource = getItems();
			ObservableCollection<Item> innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			OcConsumer consumer = new OcConsumer();
			var testing = outerSource.GroupJoining<Item, Item, int>(
				innerSource,
				outerKeySelector,
				innerKeySelector).For(consumer);

			Assert.AreEqual(outerSource, testing.OuterSource);
			Assert.AreEqual(innerSource, testing.InnerSource);
			Assert.AreEqual(outerKeySelector, testing.OuterKeySelector);
			Assert.AreEqual(innerKeySelector, testing.InnerKeySelector);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestGroupJoining37()
		{
			ObservableCollection<Item> outerSource = getItems();
			System.Collections.Specialized.INotifyCollectionChanged innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			Scalar<System.Collections.Generic.IEqualityComparer<int>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<int>>(EqualityComparer<int>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = outerSource.GroupJoining<Item, Item, int>(
				innerSource,
				outerKeySelector,
				innerKeySelector,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(outerSource, testing.OuterSource);
			Assert.AreEqual(innerSource, testing.InnerSource);
			Assert.AreEqual(outerKeySelector, testing.OuterKeySelector);
			Assert.AreEqual(innerKeySelector, testing.InnerKeySelector);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestGroupJoining38()
		{
			ObservableCollection<Item> outerSource = getItems();
			System.Collections.Specialized.INotifyCollectionChanged innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			OcConsumer consumer = new OcConsumer();
			var testing = outerSource.GroupJoining<Item, Item, int>(
				innerSource,
				outerKeySelector,
				innerKeySelector).For(consumer);

			Assert.AreEqual(outerSource, testing.OuterSource);
			Assert.AreEqual(innerSource, testing.InnerSource);
			Assert.AreEqual(outerKeySelector, testing.OuterKeySelector);
			Assert.AreEqual(innerKeySelector, testing.InnerKeySelector);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestGroupJoining39()
		{
			ObservableCollection<Item> outerSource = getItems();
			ObservableCollection<Item> innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			Scalar<System.Collections.Generic.IEqualityComparer<int>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<int>>(EqualityComparer<int>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = outerSource.GroupJoining<Item, Item, int>(
				innerSource,
				outerKeySelector,
				innerKeySelector,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(outerSource, testing.OuterSource);
			Assert.AreEqual(innerSource, testing.InnerSource);
			Assert.AreEqual(outerKeySelector, testing.OuterKeySelector);
			Assert.AreEqual(innerKeySelector, testing.InnerKeySelector);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestGroupJoining40()
		{
			ObservableCollection<Item> outerSource = getItems();
			ObservableCollection<Item> innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			OcConsumer consumer = new OcConsumer();
			var testing = outerSource.GroupJoining<Item, Item, int>(
				innerSource,
				outerKeySelector,
				innerKeySelector).For(consumer);

			Assert.AreEqual(outerSource, testing.OuterSource);
			Assert.AreEqual(innerSource, testing.InnerSource);
			Assert.AreEqual(outerKeySelector, testing.OuterKeySelector);
			Assert.AreEqual(innerKeySelector, testing.InnerKeySelector);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestGroupJoining41()
		{
			System.Collections.Specialized.INotifyCollectionChanged outerSource = getItems();
			System.Collections.Specialized.INotifyCollectionChanged innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			System.Collections.Generic.IEqualityComparer<int> equalityComparer = EqualityComparer<int>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = outerSource.GroupJoining<Item, Item, int>(
				innerSource,
				outerKeySelector,
				innerKeySelector,
				equalityComparer).For(consumer);

			Assert.AreEqual(outerSource, testing.OuterSource);
			Assert.AreEqual(innerSource, testing.InnerSource);
			Assert.AreEqual(outerKeySelector, testing.OuterKeySelector);
			Assert.AreEqual(innerKeySelector, testing.InnerKeySelector);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestGroupJoining42()
		{
			System.Collections.Specialized.INotifyCollectionChanged outerSource = getItems();
			ObservableCollection<Item> innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			System.Collections.Generic.IEqualityComparer<int> equalityComparer = EqualityComparer<int>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = outerSource.GroupJoining<Item, Item, int>(
				innerSource,
				outerKeySelector,
				innerKeySelector,
				equalityComparer).For(consumer);

			Assert.AreEqual(outerSource, testing.OuterSource);
			Assert.AreEqual(innerSource, testing.InnerSource);
			Assert.AreEqual(outerKeySelector, testing.OuterKeySelector);
			Assert.AreEqual(innerKeySelector, testing.InnerKeySelector);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestGroupJoining43()
		{
			ObservableCollection<Item> outerSource = getItems();
			System.Collections.Specialized.INotifyCollectionChanged innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			System.Collections.Generic.IEqualityComparer<int> equalityComparer = EqualityComparer<int>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = outerSource.GroupJoining<Item, Item, int>(
				innerSource,
				outerKeySelector,
				innerKeySelector,
				equalityComparer).For(consumer);

			Assert.AreEqual(outerSource, testing.OuterSource);
			Assert.AreEqual(innerSource, testing.InnerSource);
			Assert.AreEqual(outerKeySelector, testing.OuterKeySelector);
			Assert.AreEqual(innerKeySelector, testing.InnerKeySelector);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestGroupJoining44()
		{
			ObservableCollection<Item> outerSource = getItems();
			ObservableCollection<Item> innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			System.Collections.Generic.IEqualityComparer<int> equalityComparer = EqualityComparer<int>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = outerSource.GroupJoining<Item, Item, int>(
				innerSource,
				outerKeySelector,
				innerKeySelector,
				equalityComparer).For(consumer);

			Assert.AreEqual(outerSource, testing.OuterSource);
			Assert.AreEqual(innerSource, testing.InnerSource);
			Assert.AreEqual(outerKeySelector, testing.OuterKeySelector);
			Assert.AreEqual(innerKeySelector, testing.InnerKeySelector);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestGroupJoining45()
		{
			System.Collections.Specialized.INotifyCollectionChanged outerSource = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			System.Collections.Generic.IEqualityComparer<int> equalityComparer = EqualityComparer<int>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = outerSource.GroupJoining<Item, Item, int>(
				innerSourceScalar,
				outerKeySelector,
				innerKeySelector,
				equalityComparer).For(consumer);

			Assert.AreEqual(outerSource, testing.OuterSource);
			Assert.AreEqual(innerSourceScalar, testing.InnerSourceScalar);
			Assert.AreEqual(outerKeySelector, testing.OuterKeySelector);
			Assert.AreEqual(innerKeySelector, testing.InnerKeySelector);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestGroupJoining46()
		{
			System.Collections.Specialized.INotifyCollectionChanged outerSource = getItems();
			Scalar<ObservableCollection<Item>> innerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			System.Collections.Generic.IEqualityComparer<int> equalityComparer = EqualityComparer<int>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = outerSource.GroupJoining<Item, Item, int>(
				innerSourceScalar,
				outerKeySelector,
				innerKeySelector,
				equalityComparer).For(consumer);

			Assert.AreEqual(outerSource, testing.OuterSource);
			Assert.AreEqual(innerSourceScalar, testing.InnerSourceScalar);
			Assert.AreEqual(outerKeySelector, testing.OuterKeySelector);
			Assert.AreEqual(innerKeySelector, testing.InnerKeySelector);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestGroupJoining47()
		{
			ObservableCollection<Item> outerSource = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			System.Collections.Generic.IEqualityComparer<int> equalityComparer = EqualityComparer<int>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = outerSource.GroupJoining<Item, Item, int>(
				innerSourceScalar,
				outerKeySelector,
				innerKeySelector,
				equalityComparer).For(consumer);

			Assert.AreEqual(outerSource, testing.OuterSource);
			Assert.AreEqual(innerSourceScalar, testing.InnerSourceScalar);
			Assert.AreEqual(outerKeySelector, testing.OuterKeySelector);
			Assert.AreEqual(innerKeySelector, testing.InnerKeySelector);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestGroupJoining48()
		{
			ObservableCollection<Item> outerSource = getItems();
			Scalar<ObservableCollection<Item>> innerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			System.Collections.Generic.IEqualityComparer<int> equalityComparer = EqualityComparer<int>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = outerSource.GroupJoining<Item, Item, int>(
				innerSourceScalar,
				outerKeySelector,
				innerKeySelector,
				equalityComparer).For(consumer);

			Assert.AreEqual(outerSource, testing.OuterSource);
			Assert.AreEqual(innerSourceScalar, testing.InnerSourceScalar);
			Assert.AreEqual(outerKeySelector, testing.OuterKeySelector);
			Assert.AreEqual(innerKeySelector, testing.InnerKeySelector);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		#endregion
		#region HashSetting

		
		[Test, Combinatorial]
		public void TestHashSetting01()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			System.Collections.Generic.IEqualityComparer<int> equalityComparer = EqualityComparer<int>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.HashSetting<Item, int>(
				keySelectorExpression,
				equalityComparer).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(keySelectorExpression, testing.KeySelectorExpression);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestHashSetting02()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.HashSetting<Item, int>(
				keySelectorExpression).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(keySelectorExpression, testing.KeySelectorExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestHashSetting03()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			System.Collections.Generic.IEqualityComparer<int> equalityComparer = EqualityComparer<int>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.HashSetting<Item, int>(
				keySelectorExpression,
				equalityComparer).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(keySelectorExpression, testing.KeySelectorExpression);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestHashSetting04()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.HashSetting<Item, int>(
				keySelectorExpression).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(keySelectorExpression, testing.KeySelectorExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestHashSetting05()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			System.Collections.Generic.IEqualityComparer<int> equalityComparer = EqualityComparer<int>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source.HashSetting<Item, int>(
				keySelectorExpression,
				equalityComparer).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(keySelectorExpression, testing.KeySelectorExpression);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestHashSetting06()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			OcConsumer consumer = new OcConsumer();
			var testing = source.HashSetting<Item, int>(
				keySelectorExpression).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(keySelectorExpression, testing.KeySelectorExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestHashSetting07()
		{
			ObservableCollection<Item> source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			System.Collections.Generic.IEqualityComparer<int> equalityComparer = EqualityComparer<int>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source.HashSetting<Item, int>(
				keySelectorExpression,
				equalityComparer).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(keySelectorExpression, testing.KeySelectorExpression);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestHashSetting08()
		{
			ObservableCollection<Item> source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			OcConsumer consumer = new OcConsumer();
			var testing = source.HashSetting<Item, int>(
				keySelectorExpression).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(keySelectorExpression, testing.KeySelectorExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestHashSetting09()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			Scalar<System.Collections.Generic.IEqualityComparer<int>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<int>>(EqualityComparer<int>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.HashSetting<Item, int>(
				keySelectorExpression,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(keySelectorExpression, testing.KeySelectorExpression);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestHashSetting10()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			Scalar<System.Collections.Generic.IEqualityComparer<int>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<int>>(EqualityComparer<int>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.HashSetting<Item, int>(
				keySelectorExpression,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(keySelectorExpression, testing.KeySelectorExpression);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestHashSetting11()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			Scalar<System.Collections.Generic.IEqualityComparer<int>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<int>>(EqualityComparer<int>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source.HashSetting<Item, int>(
				keySelectorExpression,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(keySelectorExpression, testing.KeySelectorExpression);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestHashSetting12()
		{
			ObservableCollection<Item> source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			Scalar<System.Collections.Generic.IEqualityComparer<int>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<int>>(EqualityComparer<int>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source.HashSetting<Item, int>(
				keySelectorExpression,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(keySelectorExpression, testing.KeySelectorExpression);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Change(null);
			test();
			consumer.Dispose();
		}
		#endregion
		#region IndicesComputing

		
		[Test, Combinatorial]
		public void TestIndicesComputing01(
			[Values(1)] int initialCapacity)
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.IndicesComputing<Item>(
				predicateExpression,
				initialCapacity).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(predicateExpression, testing.PredicateExpression);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIndicesComputing02()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.IndicesComputing<Item>(
				predicateExpression).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(predicateExpression, testing.PredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIndicesComputing03(
			[Values(1)] int initialCapacity)
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.IndicesComputing<Item>(
				predicateExpression,
				initialCapacity).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(predicateExpression, testing.PredicateExpression);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIndicesComputing04()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.IndicesComputing<Item>(
				predicateExpression).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(predicateExpression, testing.PredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIndicesComputing05(
			[Values(1)] int initialCapacity)
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			OcConsumer consumer = new OcConsumer();
			var testing = source.IndicesComputing<Item>(
				predicateExpression,
				initialCapacity).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(predicateExpression, testing.PredicateExpression);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIndicesComputing06()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			OcConsumer consumer = new OcConsumer();
			var testing = source.IndicesComputing<Item>(
				predicateExpression).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(predicateExpression, testing.PredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIndicesComputing07(
			[Values(1)] int initialCapacity)
		{
			ObservableCollection<Item> source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			OcConsumer consumer = new OcConsumer();
			var testing = source.IndicesComputing<Item>(
				predicateExpression,
				initialCapacity).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(predicateExpression, testing.PredicateExpression);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIndicesComputing08()
		{
			ObservableCollection<Item> source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			OcConsumer consumer = new OcConsumer();
			var testing = source.IndicesComputing<Item>(
				predicateExpression).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(predicateExpression, testing.PredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		#endregion
		#region Intersecting

		
		[Test, Combinatorial]
		public void TestIntersecting01(
			[Values(1)] int initialCapacity)
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Intersecting<Item>(
				source2Scalar,
				equalityComparerScalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting02()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Intersecting<Item>(
				source2Scalar,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting03(
			[Values(1)] int initialCapacity)
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Intersecting<Item>(
				source2Scalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting04()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Intersecting<Item>(
				source2Scalar).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting05(
			[Values(1)] int initialCapacity)
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Intersecting<Item>(
				source2Scalar,
				equalityComparerScalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting06()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Intersecting<Item>(
				source2Scalar,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting07(
			[Values(1)] int initialCapacity)
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Intersecting<Item>(
				source2Scalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting08()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Intersecting<Item>(
				source2Scalar).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting09(
			[Values(1)] int initialCapacity)
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Intersecting<Item>(
				source2Scalar,
				equalityComparerScalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting10()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Intersecting<Item>(
				source2Scalar,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting11(
			[Values(1)] int initialCapacity)
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Intersecting<Item>(
				source2Scalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting12()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Intersecting<Item>(
				source2Scalar).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting13(
			[Values(1)] int initialCapacity)
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Intersecting<Item>(
				source2Scalar,
				equalityComparerScalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting14()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Intersecting<Item>(
				source2Scalar,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting15(
			[Values(1)] int initialCapacity)
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Intersecting<Item>(
				source2Scalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting16()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Intersecting<Item>(
				source2Scalar).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting17(
			[Values(1)] int initialCapacity)
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Intersecting<Item>(
				source2,
				equalityComparerScalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting18()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Intersecting<Item>(
				source2,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting19(
			[Values(1)] int initialCapacity)
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Intersecting<Item>(
				source2,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting20()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Intersecting<Item>(
				source2).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2, testing.Source2);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting21(
			[Values(1)] int initialCapacity)
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			ObservableCollection<Item> source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Intersecting<Item>(
				source2,
				equalityComparerScalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting22()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			ObservableCollection<Item> source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Intersecting<Item>(
				source2,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting23(
			[Values(1)] int initialCapacity)
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			ObservableCollection<Item> source2 = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Intersecting<Item>(
				source2,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting24()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			ObservableCollection<Item> source2 = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Intersecting<Item>(
				source2).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2, testing.Source2);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting25(
			[Values(1)] int initialCapacity)
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Intersecting<Item>(
				source2,
				equalityComparerScalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting26()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Intersecting<Item>(
				source2,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting27(
			[Values(1)] int initialCapacity)
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Intersecting<Item>(
				source2,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting28()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Intersecting<Item>(
				source2).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2, testing.Source2);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting29(
			[Values(1)] int initialCapacity)
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			ObservableCollection<Item> source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Intersecting<Item>(
				source2,
				equalityComparerScalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting30()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			ObservableCollection<Item> source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Intersecting<Item>(
				source2,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting31(
			[Values(1)] int initialCapacity)
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			ObservableCollection<Item> source2 = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Intersecting<Item>(
				source2,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting32()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			ObservableCollection<Item> source2 = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Intersecting<Item>(
				source2).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2, testing.Source2);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting33(
			[Values(1)] int initialCapacity)
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Intersecting<Item>(
				source2,
				equalityComparer,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting34()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Intersecting<Item>(
				source2,
				equalityComparer).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting35(
			[Values(1)] int initialCapacity)
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			ObservableCollection<Item> source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Intersecting<Item>(
				source2,
				equalityComparer,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting36()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			ObservableCollection<Item> source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Intersecting<Item>(
				source2,
				equalityComparer).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting37(
			[Values(1)] int initialCapacity)
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Intersecting<Item>(
				source2,
				equalityComparer,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting38()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Intersecting<Item>(
				source2,
				equalityComparer).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting39(
			[Values(1)] int initialCapacity)
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			ObservableCollection<Item> source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Intersecting<Item>(
				source2,
				equalityComparer,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting40()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			ObservableCollection<Item> source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Intersecting<Item>(
				source2,
				equalityComparer).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting41(
			[Values(1)] int initialCapacity)
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Intersecting<Item>(
				source2Scalar,
				equalityComparer,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting42()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Intersecting<Item>(
				source2Scalar,
				equalityComparer).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting43(
			[Values(1)] int initialCapacity)
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Intersecting<Item>(
				source2Scalar,
				equalityComparer,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting44()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Intersecting<Item>(
				source2Scalar,
				equalityComparer).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting45(
			[Values(1)] int initialCapacity)
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Intersecting<Item>(
				source2Scalar,
				equalityComparer,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting46()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Intersecting<Item>(
				source2Scalar,
				equalityComparer).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting47(
			[Values(1)] int initialCapacity)
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Intersecting<Item>(
				source2Scalar,
				equalityComparer,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting48()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Intersecting<Item>(
				source2Scalar,
				equalityComparer).For(consumer);

			Assert.AreEqual(source1Scalar, testing.Source1Scalar);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting49(
			[Values(1)] int initialCapacity)
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Intersecting<Item>(
				source2Scalar,
				equalityComparerScalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting50()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Intersecting<Item>(
				source2Scalar,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting51(
			[Values(1)] int initialCapacity)
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Intersecting<Item>(
				source2Scalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting52()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Intersecting<Item>(
				source2Scalar).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting53(
			[Values(1)] int initialCapacity)
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Intersecting<Item>(
				source2Scalar,
				equalityComparerScalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting54()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Intersecting<Item>(
				source2Scalar,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting55(
			[Values(1)] int initialCapacity)
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Intersecting<Item>(
				source2Scalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting56()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Intersecting<Item>(
				source2Scalar).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting57(
			[Values(1)] int initialCapacity)
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Intersecting<Item>(
				source2Scalar,
				equalityComparerScalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting58()
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Intersecting<Item>(
				source2Scalar,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting59(
			[Values(1)] int initialCapacity)
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Intersecting<Item>(
				source2Scalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting60()
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Intersecting<Item>(
				source2Scalar).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting61(
			[Values(1)] int initialCapacity)
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Intersecting<Item>(
				source2Scalar,
				equalityComparerScalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting62()
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Intersecting<Item>(
				source2Scalar,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting63(
			[Values(1)] int initialCapacity)
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Intersecting<Item>(
				source2Scalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting64()
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Intersecting<Item>(
				source2Scalar).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting65(
			[Values(1)] int initialCapacity)
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Intersecting<Item>(
				source2,
				equalityComparerScalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting66()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Intersecting<Item>(
				source2,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting67(
			[Values(1)] int initialCapacity)
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Intersecting<Item>(
				source2,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting68()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Intersecting<Item>(
				source2).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2, testing.Source2);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting69(
			[Values(1)] int initialCapacity)
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Intersecting<Item>(
				source2,
				equalityComparerScalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting70()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Intersecting<Item>(
				source2,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting71(
			[Values(1)] int initialCapacity)
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Intersecting<Item>(
				source2,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting72()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Intersecting<Item>(
				source2).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2, testing.Source2);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting73(
			[Values(1)] int initialCapacity)
		{
			ObservableCollection<Item> source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Intersecting<Item>(
				source2,
				equalityComparerScalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting74()
		{
			ObservableCollection<Item> source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Intersecting<Item>(
				source2,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting75(
			[Values(1)] int initialCapacity)
		{
			ObservableCollection<Item> source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Intersecting<Item>(
				source2,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting76()
		{
			ObservableCollection<Item> source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Intersecting<Item>(
				source2).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2, testing.Source2);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting77(
			[Values(1)] int initialCapacity)
		{
			ObservableCollection<Item> source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Intersecting<Item>(
				source2,
				equalityComparerScalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting78()
		{
			ObservableCollection<Item> source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Intersecting<Item>(
				source2,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting79(
			[Values(1)] int initialCapacity)
		{
			ObservableCollection<Item> source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Intersecting<Item>(
				source2,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting80()
		{
			ObservableCollection<Item> source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Intersecting<Item>(
				source2).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2, testing.Source2);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting81(
			[Values(1)] int initialCapacity)
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Intersecting<Item>(
				source2,
				equalityComparer,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting82()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Intersecting<Item>(
				source2,
				equalityComparer).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting83(
			[Values(1)] int initialCapacity)
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Intersecting<Item>(
				source2,
				equalityComparer,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting84()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Intersecting<Item>(
				source2,
				equalityComparer).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting85(
			[Values(1)] int initialCapacity)
		{
			ObservableCollection<Item> source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Intersecting<Item>(
				source2,
				equalityComparer,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting86()
		{
			ObservableCollection<Item> source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Intersecting<Item>(
				source2,
				equalityComparer).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting87(
			[Values(1)] int initialCapacity)
		{
			ObservableCollection<Item> source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Intersecting<Item>(
				source2,
				equalityComparer,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting88()
		{
			ObservableCollection<Item> source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Intersecting<Item>(
				source2,
				equalityComparer).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2, testing.Source2);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting89(
			[Values(1)] int initialCapacity)
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Intersecting<Item>(
				source2Scalar,
				equalityComparer,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting90()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Intersecting<Item>(
				source2Scalar,
				equalityComparer).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting91(
			[Values(1)] int initialCapacity)
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Intersecting<Item>(
				source2Scalar,
				equalityComparer,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting92()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Intersecting<Item>(
				source2Scalar,
				equalityComparer).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting93(
			[Values(1)] int initialCapacity)
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Intersecting<Item>(
				source2Scalar,
				equalityComparer,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting94()
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Intersecting<Item>(
				source2Scalar,
				equalityComparer).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting95(
			[Values(1)] int initialCapacity)
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Intersecting<Item>(
				source2Scalar,
				equalityComparer,
				initialCapacity).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestIntersecting96()
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Intersecting<Item>(
				source2Scalar,
				equalityComparer).For(consumer);

			Assert.AreEqual(source1, testing.Source1);
			Assert.AreEqual(source2Scalar, testing.Source2Scalar);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		#endregion
		#region ItemComputing

		
		[Test, Combinatorial]
		public void TestItemComputing01(
			[Values(1)] int index)
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Item defaultValue = new QuickTests.Item(1, true);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.ItemComputing<Item>(
				index,
				defaultValue).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(index, testing.Index);
			Assert.AreEqual(defaultValue, testing.DefaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestItemComputing02(
			[Values(1)] int index)
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.ItemComputing<Item>(
				index).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(index, testing.Index);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestItemComputing03(
			[Values(1)] int index)
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Item defaultValue = new QuickTests.Item(1, true);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.ItemComputing<Item>(
				index,
				defaultValue).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(index, testing.Index);
			Assert.AreEqual(defaultValue, testing.DefaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestItemComputing04(
			[Values(1)] int index)
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.ItemComputing<Item>(
				index).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(index, testing.Index);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestItemComputing05()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<int> indexScalar = getScalar<int>(0);
			Item defaultValue = new QuickTests.Item(1, true);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.ItemComputing<Item>(
				indexScalar,
				defaultValue).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(indexScalar, testing.IndexScalar);
			Assert.AreEqual(defaultValue, testing.DefaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)indexScalar).Touch();
			test();
			((Scalar<int>)indexScalar).Change(1);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestItemComputing06()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<int> indexScalar = getScalar<int>(0);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.ItemComputing<Item>(
				indexScalar).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(indexScalar, testing.IndexScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)indexScalar).Touch();
			test();
			((Scalar<int>)indexScalar).Change(1);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestItemComputing07()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<int> indexScalar = getScalar<int>(0);
			Item defaultValue = new QuickTests.Item(1, true);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.ItemComputing<Item>(
				indexScalar,
				defaultValue).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(indexScalar, testing.IndexScalar);
			Assert.AreEqual(defaultValue, testing.DefaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)indexScalar).Touch();
			test();
			((Scalar<int>)indexScalar).Change(1);
			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestItemComputing08()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<int> indexScalar = getScalar<int>(0);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.ItemComputing<Item>(
				indexScalar).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(indexScalar, testing.IndexScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)indexScalar).Touch();
			test();
			((Scalar<int>)indexScalar).Change(1);
			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestItemComputing09(
			[Values(1)] int index)
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			Item defaultValue = new QuickTests.Item(1, true);
			OcConsumer consumer = new OcConsumer();
			var testing = source.ItemComputing<Item>(
				index,
				defaultValue).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(index, testing.Index);
			Assert.AreEqual(defaultValue, testing.DefaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestItemComputing10(
			[Values(1)] int index)
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source.ItemComputing<Item>(
				index).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(index, testing.Index);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestItemComputing11(
			[Values(1)] int index)
		{
			ObservableCollection<Item> source = getItems();
			Item defaultValue = new QuickTests.Item(1, true);
			OcConsumer consumer = new OcConsumer();
			var testing = source.ItemComputing<Item>(
				index,
				defaultValue).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(index, testing.Index);
			Assert.AreEqual(defaultValue, testing.DefaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestItemComputing12(
			[Values(1)] int index)
		{
			ObservableCollection<Item> source = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source.ItemComputing<Item>(
				index).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(index, testing.Index);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestItemComputing13()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			Scalar<int> indexScalar = getScalar<int>(0);
			Item defaultValue = new QuickTests.Item(1, true);
			OcConsumer consumer = new OcConsumer();
			var testing = source.ItemComputing<Item>(
				indexScalar,
				defaultValue).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(indexScalar, testing.IndexScalar);
			Assert.AreEqual(defaultValue, testing.DefaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)indexScalar).Touch();
			test();
			((Scalar<int>)indexScalar).Change(1);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestItemComputing14()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			Scalar<int> indexScalar = getScalar<int>(0);
			OcConsumer consumer = new OcConsumer();
			var testing = source.ItemComputing<Item>(
				indexScalar).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(indexScalar, testing.IndexScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)indexScalar).Touch();
			test();
			((Scalar<int>)indexScalar).Change(1);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestItemComputing15()
		{
			ObservableCollection<Item> source = getItems();
			Scalar<int> indexScalar = getScalar<int>(0);
			Item defaultValue = new QuickTests.Item(1, true);
			OcConsumer consumer = new OcConsumer();
			var testing = source.ItemComputing<Item>(
				indexScalar,
				defaultValue).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(indexScalar, testing.IndexScalar);
			Assert.AreEqual(defaultValue, testing.DefaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)indexScalar).Touch();
			test();
			((Scalar<int>)indexScalar).Change(1);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestItemComputing16()
		{
			ObservableCollection<Item> source = getItems();
			Scalar<int> indexScalar = getScalar<int>(0);
			OcConsumer consumer = new OcConsumer();
			var testing = source.ItemComputing<Item>(
				indexScalar).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(indexScalar, testing.IndexScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)indexScalar).Touch();
			test();
			((Scalar<int>)indexScalar).Change(1);
			test();
			consumer.Dispose();
		}
		#endregion
		#region Joining

		
		[Test, Combinatorial]
		public void TestJoining01(
			[Values(1)] int initialCapacity)
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> leftSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> rightSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> predicateExpression = (i1, i2) => i1.Num == i2.Num;
			OcConsumer consumer = new OcConsumer();
			var testing = leftSourceScalar.Joining<Item, Item>(
				rightSourceScalar,
				predicateExpression,
				initialCapacity).For(consumer);

			Assert.AreEqual(leftSourceScalar, testing.LeftSourceScalar);
			Assert.AreEqual(rightSourceScalar, testing.RightSourceScalar);
			Assert.AreEqual(predicateExpression, testing.PredicateExpression);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var leftSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)leftSourceScalar.Value));

				if (leftSourceScalarValue != null)
				{		
					leftSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					leftSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					leftSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					leftSourceScalarValue[2].Active = !leftSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					leftSourceScalarValue[2].Num = leftSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					leftSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					leftSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					leftSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var rightSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)rightSourceScalar.Value));

				if (rightSourceScalarValue != null)
				{		
					rightSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					rightSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					rightSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					rightSourceScalarValue[2].Active = !rightSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					rightSourceScalarValue[2].Num = rightSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					rightSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					rightSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					rightSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)leftSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)leftSourceScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)rightSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)rightSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestJoining02()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> leftSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> rightSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> predicateExpression = (i1, i2) => i1.Num == i2.Num;
			OcConsumer consumer = new OcConsumer();
			var testing = leftSourceScalar.Joining<Item, Item>(
				rightSourceScalar,
				predicateExpression).For(consumer);

			Assert.AreEqual(leftSourceScalar, testing.LeftSourceScalar);
			Assert.AreEqual(rightSourceScalar, testing.RightSourceScalar);
			Assert.AreEqual(predicateExpression, testing.PredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var leftSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)leftSourceScalar.Value));

				if (leftSourceScalarValue != null)
				{		
					leftSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					leftSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					leftSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					leftSourceScalarValue[2].Active = !leftSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					leftSourceScalarValue[2].Num = leftSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					leftSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					leftSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					leftSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var rightSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)rightSourceScalar.Value));

				if (rightSourceScalarValue != null)
				{		
					rightSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					rightSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					rightSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					rightSourceScalarValue[2].Active = !rightSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					rightSourceScalarValue[2].Num = rightSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					rightSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					rightSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					rightSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)leftSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)leftSourceScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)rightSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)rightSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestJoining03(
			[Values(1)] int initialCapacity)
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> leftSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<ObservableCollection<Item>> rightSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> predicateExpression = (i1, i2) => i1.Num == i2.Num;
			OcConsumer consumer = new OcConsumer();
			var testing = leftSourceScalar.Joining<Item, Item>(
				rightSourceScalar,
				predicateExpression,
				initialCapacity).For(consumer);

			Assert.AreEqual(leftSourceScalar, testing.LeftSourceScalar);
			Assert.AreEqual(rightSourceScalar, testing.RightSourceScalar);
			Assert.AreEqual(predicateExpression, testing.PredicateExpression);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var leftSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)leftSourceScalar.Value));

				if (leftSourceScalarValue != null)
				{		
					leftSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					leftSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					leftSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					leftSourceScalarValue[2].Active = !leftSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					leftSourceScalarValue[2].Num = leftSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					leftSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					leftSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					leftSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var rightSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)rightSourceScalar.Value));

				if (rightSourceScalarValue != null)
				{		
					rightSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					rightSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					rightSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					rightSourceScalarValue[2].Active = !rightSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					rightSourceScalarValue[2].Num = rightSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					rightSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					rightSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					rightSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)leftSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)leftSourceScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)rightSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)rightSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestJoining04()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> leftSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<ObservableCollection<Item>> rightSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> predicateExpression = (i1, i2) => i1.Num == i2.Num;
			OcConsumer consumer = new OcConsumer();
			var testing = leftSourceScalar.Joining<Item, Item>(
				rightSourceScalar,
				predicateExpression).For(consumer);

			Assert.AreEqual(leftSourceScalar, testing.LeftSourceScalar);
			Assert.AreEqual(rightSourceScalar, testing.RightSourceScalar);
			Assert.AreEqual(predicateExpression, testing.PredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var leftSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)leftSourceScalar.Value));

				if (leftSourceScalarValue != null)
				{		
					leftSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					leftSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					leftSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					leftSourceScalarValue[2].Active = !leftSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					leftSourceScalarValue[2].Num = leftSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					leftSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					leftSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					leftSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var rightSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)rightSourceScalar.Value));

				if (rightSourceScalarValue != null)
				{		
					rightSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					rightSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					rightSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					rightSourceScalarValue[2].Active = !rightSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					rightSourceScalarValue[2].Num = rightSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					rightSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					rightSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					rightSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)leftSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)leftSourceScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)rightSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)rightSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestJoining05(
			[Values(1)] int initialCapacity)
		{
			Scalar<ObservableCollection<Item>> leftSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> rightSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> predicateExpression = (i1, i2) => i1.Num == i2.Num;
			OcConsumer consumer = new OcConsumer();
			var testing = leftSourceScalar.Joining<Item, Item>(
				rightSourceScalar,
				predicateExpression,
				initialCapacity).For(consumer);

			Assert.AreEqual(leftSourceScalar, testing.LeftSourceScalar);
			Assert.AreEqual(rightSourceScalar, testing.RightSourceScalar);
			Assert.AreEqual(predicateExpression, testing.PredicateExpression);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var leftSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)leftSourceScalar.Value));

				if (leftSourceScalarValue != null)
				{		
					leftSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					leftSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					leftSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					leftSourceScalarValue[2].Active = !leftSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					leftSourceScalarValue[2].Num = leftSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					leftSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					leftSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					leftSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var rightSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)rightSourceScalar.Value));

				if (rightSourceScalarValue != null)
				{		
					rightSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					rightSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					rightSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					rightSourceScalarValue[2].Active = !rightSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					rightSourceScalarValue[2].Num = rightSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					rightSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					rightSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					rightSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
			}

			test();

			((Scalar<ObservableCollection<Item>>)leftSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)leftSourceScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)rightSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)rightSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestJoining06()
		{
			Scalar<ObservableCollection<Item>> leftSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> rightSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> predicateExpression = (i1, i2) => i1.Num == i2.Num;
			OcConsumer consumer = new OcConsumer();
			var testing = leftSourceScalar.Joining<Item, Item>(
				rightSourceScalar,
				predicateExpression).For(consumer);

			Assert.AreEqual(leftSourceScalar, testing.LeftSourceScalar);
			Assert.AreEqual(rightSourceScalar, testing.RightSourceScalar);
			Assert.AreEqual(predicateExpression, testing.PredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var leftSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)leftSourceScalar.Value));

				if (leftSourceScalarValue != null)
				{		
					leftSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					leftSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					leftSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					leftSourceScalarValue[2].Active = !leftSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					leftSourceScalarValue[2].Num = leftSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					leftSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					leftSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					leftSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var rightSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)rightSourceScalar.Value));

				if (rightSourceScalarValue != null)
				{		
					rightSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					rightSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					rightSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					rightSourceScalarValue[2].Active = !rightSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					rightSourceScalarValue[2].Num = rightSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					rightSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					rightSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					rightSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
			}

			test();

			((Scalar<ObservableCollection<Item>>)leftSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)leftSourceScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)rightSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)rightSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestJoining07(
			[Values(1)] int initialCapacity)
		{
			Scalar<ObservableCollection<Item>> leftSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<ObservableCollection<Item>> rightSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> predicateExpression = (i1, i2) => i1.Num == i2.Num;
			OcConsumer consumer = new OcConsumer();
			var testing = leftSourceScalar.Joining<Item, Item>(
				rightSourceScalar,
				predicateExpression,
				initialCapacity).For(consumer);

			Assert.AreEqual(leftSourceScalar, testing.LeftSourceScalar);
			Assert.AreEqual(rightSourceScalar, testing.RightSourceScalar);
			Assert.AreEqual(predicateExpression, testing.PredicateExpression);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var leftSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)leftSourceScalar.Value));

				if (leftSourceScalarValue != null)
				{		
					leftSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					leftSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					leftSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					leftSourceScalarValue[2].Active = !leftSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					leftSourceScalarValue[2].Num = leftSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					leftSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					leftSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					leftSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var rightSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)rightSourceScalar.Value));

				if (rightSourceScalarValue != null)
				{		
					rightSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					rightSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					rightSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					rightSourceScalarValue[2].Active = !rightSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					rightSourceScalarValue[2].Num = rightSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					rightSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					rightSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					rightSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
			}

			test();

			((Scalar<ObservableCollection<Item>>)leftSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)leftSourceScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)rightSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)rightSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestJoining08()
		{
			Scalar<ObservableCollection<Item>> leftSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<ObservableCollection<Item>> rightSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> predicateExpression = (i1, i2) => i1.Num == i2.Num;
			OcConsumer consumer = new OcConsumer();
			var testing = leftSourceScalar.Joining<Item, Item>(
				rightSourceScalar,
				predicateExpression).For(consumer);

			Assert.AreEqual(leftSourceScalar, testing.LeftSourceScalar);
			Assert.AreEqual(rightSourceScalar, testing.RightSourceScalar);
			Assert.AreEqual(predicateExpression, testing.PredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var leftSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)leftSourceScalar.Value));

				if (leftSourceScalarValue != null)
				{		
					leftSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					leftSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					leftSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					leftSourceScalarValue[2].Active = !leftSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					leftSourceScalarValue[2].Num = leftSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					leftSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					leftSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					leftSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var rightSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)rightSourceScalar.Value));

				if (rightSourceScalarValue != null)
				{		
					rightSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					rightSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					rightSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					rightSourceScalarValue[2].Active = !rightSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					rightSourceScalarValue[2].Num = rightSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					rightSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					rightSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					rightSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
			}

			test();

			((Scalar<ObservableCollection<Item>>)leftSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)leftSourceScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)rightSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)rightSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestJoining09(
			[Values(1)] int initialCapacity)
		{
			System.Collections.Specialized.INotifyCollectionChanged leftSource = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> rightSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> predicateExpression = (i1, i2) => i1.Num == i2.Num;
			OcConsumer consumer = new OcConsumer();
			var testing = leftSource.Joining<Item, Item>(
				rightSourceScalar,
				predicateExpression,
				initialCapacity).For(consumer);

			Assert.AreEqual(leftSource, testing.LeftSource);
			Assert.AreEqual(rightSourceScalar, testing.RightSourceScalar);
			Assert.AreEqual(predicateExpression, testing.PredicateExpression);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var leftSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)leftSource));

				if (leftSourceValue != null)
				{		
					leftSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					leftSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					leftSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					leftSourceValue[2].Active = !leftSourceValue[2].Active;
					testing.ValidateConsistency();
					leftSourceValue[2].Num = leftSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					leftSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					leftSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					leftSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var rightSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)rightSourceScalar.Value));

				if (rightSourceScalarValue != null)
				{		
					rightSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					rightSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					rightSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					rightSourceScalarValue[2].Active = !rightSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					rightSourceScalarValue[2].Num = rightSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					rightSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					rightSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					rightSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)rightSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)rightSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestJoining10()
		{
			System.Collections.Specialized.INotifyCollectionChanged leftSource = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> rightSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> predicateExpression = (i1, i2) => i1.Num == i2.Num;
			OcConsumer consumer = new OcConsumer();
			var testing = leftSource.Joining<Item, Item>(
				rightSourceScalar,
				predicateExpression).For(consumer);

			Assert.AreEqual(leftSource, testing.LeftSource);
			Assert.AreEqual(rightSourceScalar, testing.RightSourceScalar);
			Assert.AreEqual(predicateExpression, testing.PredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var leftSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)leftSource));

				if (leftSourceValue != null)
				{		
					leftSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					leftSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					leftSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					leftSourceValue[2].Active = !leftSourceValue[2].Active;
					testing.ValidateConsistency();
					leftSourceValue[2].Num = leftSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					leftSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					leftSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					leftSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var rightSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)rightSourceScalar.Value));

				if (rightSourceScalarValue != null)
				{		
					rightSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					rightSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					rightSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					rightSourceScalarValue[2].Active = !rightSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					rightSourceScalarValue[2].Num = rightSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					rightSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					rightSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					rightSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)rightSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)rightSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestJoining11(
			[Values(1)] int initialCapacity)
		{
			System.Collections.Specialized.INotifyCollectionChanged leftSource = getItems();
			Scalar<ObservableCollection<Item>> rightSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> predicateExpression = (i1, i2) => i1.Num == i2.Num;
			OcConsumer consumer = new OcConsumer();
			var testing = leftSource.Joining<Item, Item>(
				rightSourceScalar,
				predicateExpression,
				initialCapacity).For(consumer);

			Assert.AreEqual(leftSource, testing.LeftSource);
			Assert.AreEqual(rightSourceScalar, testing.RightSourceScalar);
			Assert.AreEqual(predicateExpression, testing.PredicateExpression);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var leftSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)leftSource));

				if (leftSourceValue != null)
				{		
					leftSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					leftSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					leftSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					leftSourceValue[2].Active = !leftSourceValue[2].Active;
					testing.ValidateConsistency();
					leftSourceValue[2].Num = leftSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					leftSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					leftSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					leftSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var rightSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)rightSourceScalar.Value));

				if (rightSourceScalarValue != null)
				{		
					rightSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					rightSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					rightSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					rightSourceScalarValue[2].Active = !rightSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					rightSourceScalarValue[2].Num = rightSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					rightSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					rightSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					rightSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
			}

			test();

			((Scalar<ObservableCollection<Item>>)rightSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)rightSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestJoining12()
		{
			System.Collections.Specialized.INotifyCollectionChanged leftSource = getItems();
			Scalar<ObservableCollection<Item>> rightSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> predicateExpression = (i1, i2) => i1.Num == i2.Num;
			OcConsumer consumer = new OcConsumer();
			var testing = leftSource.Joining<Item, Item>(
				rightSourceScalar,
				predicateExpression).For(consumer);

			Assert.AreEqual(leftSource, testing.LeftSource);
			Assert.AreEqual(rightSourceScalar, testing.RightSourceScalar);
			Assert.AreEqual(predicateExpression, testing.PredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var leftSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)leftSource));

				if (leftSourceValue != null)
				{		
					leftSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					leftSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					leftSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					leftSourceValue[2].Active = !leftSourceValue[2].Active;
					testing.ValidateConsistency();
					leftSourceValue[2].Num = leftSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					leftSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					leftSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					leftSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var rightSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)rightSourceScalar.Value));

				if (rightSourceScalarValue != null)
				{		
					rightSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					rightSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					rightSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					rightSourceScalarValue[2].Active = !rightSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					rightSourceScalarValue[2].Num = rightSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					rightSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					rightSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					rightSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
			}

			test();

			((Scalar<ObservableCollection<Item>>)rightSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)rightSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestJoining13(
			[Values(1)] int initialCapacity)
		{
			ObservableCollection<Item> leftSource = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> rightSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> predicateExpression = (i1, i2) => i1.Num == i2.Num;
			OcConsumer consumer = new OcConsumer();
			var testing = leftSource.Joining<Item, Item>(
				rightSourceScalar,
				predicateExpression,
				initialCapacity).For(consumer);

			Assert.AreEqual(leftSource, testing.LeftSource);
			Assert.AreEqual(rightSourceScalar, testing.RightSourceScalar);
			Assert.AreEqual(predicateExpression, testing.PredicateExpression);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var leftSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)leftSource));

				if (leftSourceValue != null)
				{		
					leftSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					leftSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					leftSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					leftSourceValue[2].Active = !leftSourceValue[2].Active;
					testing.ValidateConsistency();
					leftSourceValue[2].Num = leftSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					leftSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					leftSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					leftSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var rightSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)rightSourceScalar.Value));

				if (rightSourceScalarValue != null)
				{		
					rightSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					rightSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					rightSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					rightSourceScalarValue[2].Active = !rightSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					rightSourceScalarValue[2].Num = rightSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					rightSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					rightSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					rightSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)rightSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)rightSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestJoining14()
		{
			ObservableCollection<Item> leftSource = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> rightSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> predicateExpression = (i1, i2) => i1.Num == i2.Num;
			OcConsumer consumer = new OcConsumer();
			var testing = leftSource.Joining<Item, Item>(
				rightSourceScalar,
				predicateExpression).For(consumer);

			Assert.AreEqual(leftSource, testing.LeftSource);
			Assert.AreEqual(rightSourceScalar, testing.RightSourceScalar);
			Assert.AreEqual(predicateExpression, testing.PredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var leftSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)leftSource));

				if (leftSourceValue != null)
				{		
					leftSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					leftSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					leftSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					leftSourceValue[2].Active = !leftSourceValue[2].Active;
					testing.ValidateConsistency();
					leftSourceValue[2].Num = leftSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					leftSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					leftSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					leftSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var rightSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)rightSourceScalar.Value));

				if (rightSourceScalarValue != null)
				{		
					rightSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					rightSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					rightSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					rightSourceScalarValue[2].Active = !rightSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					rightSourceScalarValue[2].Num = rightSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					rightSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					rightSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					rightSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)rightSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)rightSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestJoining15(
			[Values(1)] int initialCapacity)
		{
			ObservableCollection<Item> leftSource = getItems();
			Scalar<ObservableCollection<Item>> rightSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> predicateExpression = (i1, i2) => i1.Num == i2.Num;
			OcConsumer consumer = new OcConsumer();
			var testing = leftSource.Joining<Item, Item>(
				rightSourceScalar,
				predicateExpression,
				initialCapacity).For(consumer);

			Assert.AreEqual(leftSource, testing.LeftSource);
			Assert.AreEqual(rightSourceScalar, testing.RightSourceScalar);
			Assert.AreEqual(predicateExpression, testing.PredicateExpression);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var leftSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)leftSource));

				if (leftSourceValue != null)
				{		
					leftSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					leftSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					leftSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					leftSourceValue[2].Active = !leftSourceValue[2].Active;
					testing.ValidateConsistency();
					leftSourceValue[2].Num = leftSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					leftSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					leftSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					leftSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var rightSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)rightSourceScalar.Value));

				if (rightSourceScalarValue != null)
				{		
					rightSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					rightSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					rightSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					rightSourceScalarValue[2].Active = !rightSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					rightSourceScalarValue[2].Num = rightSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					rightSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					rightSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					rightSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
			}

			test();

			((Scalar<ObservableCollection<Item>>)rightSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)rightSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestJoining16()
		{
			ObservableCollection<Item> leftSource = getItems();
			Scalar<ObservableCollection<Item>> rightSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> predicateExpression = (i1, i2) => i1.Num == i2.Num;
			OcConsumer consumer = new OcConsumer();
			var testing = leftSource.Joining<Item, Item>(
				rightSourceScalar,
				predicateExpression).For(consumer);

			Assert.AreEqual(leftSource, testing.LeftSource);
			Assert.AreEqual(rightSourceScalar, testing.RightSourceScalar);
			Assert.AreEqual(predicateExpression, testing.PredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var leftSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)leftSource));

				if (leftSourceValue != null)
				{		
					leftSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					leftSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					leftSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					leftSourceValue[2].Active = !leftSourceValue[2].Active;
					testing.ValidateConsistency();
					leftSourceValue[2].Num = leftSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					leftSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					leftSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					leftSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var rightSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)rightSourceScalar.Value));

				if (rightSourceScalarValue != null)
				{		
					rightSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					rightSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					rightSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					rightSourceScalarValue[2].Active = !rightSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					rightSourceScalarValue[2].Num = rightSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					rightSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					rightSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					rightSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
			}

			test();

			((Scalar<ObservableCollection<Item>>)rightSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)rightSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestJoining17(
			[Values(1)] int initialCapacity)
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> leftSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged rightSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> predicateExpression = (i1, i2) => i1.Num == i2.Num;
			OcConsumer consumer = new OcConsumer();
			var testing = leftSourceScalar.Joining<Item, Item>(
				rightSource,
				predicateExpression,
				initialCapacity).For(consumer);

			Assert.AreEqual(leftSourceScalar, testing.LeftSourceScalar);
			Assert.AreEqual(rightSource, testing.RightSource);
			Assert.AreEqual(predicateExpression, testing.PredicateExpression);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var leftSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)leftSourceScalar.Value));

				if (leftSourceScalarValue != null)
				{		
					leftSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					leftSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					leftSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					leftSourceScalarValue[2].Active = !leftSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					leftSourceScalarValue[2].Num = leftSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					leftSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					leftSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					leftSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var rightSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)rightSource));

				if (rightSourceValue != null)
				{		
					rightSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					rightSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					rightSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					rightSourceValue[2].Active = !rightSourceValue[2].Active;
					testing.ValidateConsistency();
					rightSourceValue[2].Num = rightSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					rightSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					rightSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					rightSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)leftSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)leftSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestJoining18()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> leftSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged rightSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> predicateExpression = (i1, i2) => i1.Num == i2.Num;
			OcConsumer consumer = new OcConsumer();
			var testing = leftSourceScalar.Joining<Item, Item>(
				rightSource,
				predicateExpression).For(consumer);

			Assert.AreEqual(leftSourceScalar, testing.LeftSourceScalar);
			Assert.AreEqual(rightSource, testing.RightSource);
			Assert.AreEqual(predicateExpression, testing.PredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var leftSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)leftSourceScalar.Value));

				if (leftSourceScalarValue != null)
				{		
					leftSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					leftSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					leftSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					leftSourceScalarValue[2].Active = !leftSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					leftSourceScalarValue[2].Num = leftSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					leftSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					leftSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					leftSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var rightSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)rightSource));

				if (rightSourceValue != null)
				{		
					rightSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					rightSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					rightSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					rightSourceValue[2].Active = !rightSourceValue[2].Active;
					testing.ValidateConsistency();
					rightSourceValue[2].Num = rightSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					rightSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					rightSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					rightSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)leftSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)leftSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestJoining19(
			[Values(1)] int initialCapacity)
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> leftSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			ObservableCollection<Item> rightSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> predicateExpression = (i1, i2) => i1.Num == i2.Num;
			OcConsumer consumer = new OcConsumer();
			var testing = leftSourceScalar.Joining<Item, Item>(
				rightSource,
				predicateExpression,
				initialCapacity).For(consumer);

			Assert.AreEqual(leftSourceScalar, testing.LeftSourceScalar);
			Assert.AreEqual(rightSource, testing.RightSource);
			Assert.AreEqual(predicateExpression, testing.PredicateExpression);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var leftSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)leftSourceScalar.Value));

				if (leftSourceScalarValue != null)
				{		
					leftSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					leftSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					leftSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					leftSourceScalarValue[2].Active = !leftSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					leftSourceScalarValue[2].Num = leftSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					leftSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					leftSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					leftSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var rightSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)rightSource));

				if (rightSourceValue != null)
				{		
					rightSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					rightSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					rightSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					rightSourceValue[2].Active = !rightSourceValue[2].Active;
					testing.ValidateConsistency();
					rightSourceValue[2].Num = rightSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					rightSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					rightSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					rightSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)leftSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)leftSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestJoining20()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> leftSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			ObservableCollection<Item> rightSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> predicateExpression = (i1, i2) => i1.Num == i2.Num;
			OcConsumer consumer = new OcConsumer();
			var testing = leftSourceScalar.Joining<Item, Item>(
				rightSource,
				predicateExpression).For(consumer);

			Assert.AreEqual(leftSourceScalar, testing.LeftSourceScalar);
			Assert.AreEqual(rightSource, testing.RightSource);
			Assert.AreEqual(predicateExpression, testing.PredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var leftSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)leftSourceScalar.Value));

				if (leftSourceScalarValue != null)
				{		
					leftSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					leftSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					leftSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					leftSourceScalarValue[2].Active = !leftSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					leftSourceScalarValue[2].Num = leftSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					leftSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					leftSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					leftSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var rightSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)rightSource));

				if (rightSourceValue != null)
				{		
					rightSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					rightSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					rightSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					rightSourceValue[2].Active = !rightSourceValue[2].Active;
					testing.ValidateConsistency();
					rightSourceValue[2].Num = rightSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					rightSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					rightSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					rightSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)leftSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)leftSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestJoining21(
			[Values(1)] int initialCapacity)
		{
			Scalar<ObservableCollection<Item>> leftSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged rightSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> predicateExpression = (i1, i2) => i1.Num == i2.Num;
			OcConsumer consumer = new OcConsumer();
			var testing = leftSourceScalar.Joining<Item, Item>(
				rightSource,
				predicateExpression,
				initialCapacity).For(consumer);

			Assert.AreEqual(leftSourceScalar, testing.LeftSourceScalar);
			Assert.AreEqual(rightSource, testing.RightSource);
			Assert.AreEqual(predicateExpression, testing.PredicateExpression);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var leftSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)leftSourceScalar.Value));

				if (leftSourceScalarValue != null)
				{		
					leftSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					leftSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					leftSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					leftSourceScalarValue[2].Active = !leftSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					leftSourceScalarValue[2].Num = leftSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					leftSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					leftSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					leftSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var rightSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)rightSource));

				if (rightSourceValue != null)
				{		
					rightSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					rightSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					rightSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					rightSourceValue[2].Active = !rightSourceValue[2].Active;
					testing.ValidateConsistency();
					rightSourceValue[2].Num = rightSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					rightSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					rightSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					rightSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
			}

			test();

			((Scalar<ObservableCollection<Item>>)leftSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)leftSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestJoining22()
		{
			Scalar<ObservableCollection<Item>> leftSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged rightSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> predicateExpression = (i1, i2) => i1.Num == i2.Num;
			OcConsumer consumer = new OcConsumer();
			var testing = leftSourceScalar.Joining<Item, Item>(
				rightSource,
				predicateExpression).For(consumer);

			Assert.AreEqual(leftSourceScalar, testing.LeftSourceScalar);
			Assert.AreEqual(rightSource, testing.RightSource);
			Assert.AreEqual(predicateExpression, testing.PredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var leftSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)leftSourceScalar.Value));

				if (leftSourceScalarValue != null)
				{		
					leftSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					leftSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					leftSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					leftSourceScalarValue[2].Active = !leftSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					leftSourceScalarValue[2].Num = leftSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					leftSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					leftSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					leftSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var rightSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)rightSource));

				if (rightSourceValue != null)
				{		
					rightSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					rightSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					rightSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					rightSourceValue[2].Active = !rightSourceValue[2].Active;
					testing.ValidateConsistency();
					rightSourceValue[2].Num = rightSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					rightSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					rightSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					rightSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
			}

			test();

			((Scalar<ObservableCollection<Item>>)leftSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)leftSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestJoining23(
			[Values(1)] int initialCapacity)
		{
			Scalar<ObservableCollection<Item>> leftSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			ObservableCollection<Item> rightSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> predicateExpression = (i1, i2) => i1.Num == i2.Num;
			OcConsumer consumer = new OcConsumer();
			var testing = leftSourceScalar.Joining<Item, Item>(
				rightSource,
				predicateExpression,
				initialCapacity).For(consumer);

			Assert.AreEqual(leftSourceScalar, testing.LeftSourceScalar);
			Assert.AreEqual(rightSource, testing.RightSource);
			Assert.AreEqual(predicateExpression, testing.PredicateExpression);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var leftSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)leftSourceScalar.Value));

				if (leftSourceScalarValue != null)
				{		
					leftSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					leftSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					leftSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					leftSourceScalarValue[2].Active = !leftSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					leftSourceScalarValue[2].Num = leftSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					leftSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					leftSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					leftSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var rightSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)rightSource));

				if (rightSourceValue != null)
				{		
					rightSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					rightSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					rightSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					rightSourceValue[2].Active = !rightSourceValue[2].Active;
					testing.ValidateConsistency();
					rightSourceValue[2].Num = rightSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					rightSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					rightSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					rightSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
			}

			test();

			((Scalar<ObservableCollection<Item>>)leftSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)leftSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestJoining24()
		{
			Scalar<ObservableCollection<Item>> leftSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			ObservableCollection<Item> rightSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> predicateExpression = (i1, i2) => i1.Num == i2.Num;
			OcConsumer consumer = new OcConsumer();
			var testing = leftSourceScalar.Joining<Item, Item>(
				rightSource,
				predicateExpression).For(consumer);

			Assert.AreEqual(leftSourceScalar, testing.LeftSourceScalar);
			Assert.AreEqual(rightSource, testing.RightSource);
			Assert.AreEqual(predicateExpression, testing.PredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var leftSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)leftSourceScalar.Value));

				if (leftSourceScalarValue != null)
				{		
					leftSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					leftSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					leftSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					leftSourceScalarValue[2].Active = !leftSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					leftSourceScalarValue[2].Num = leftSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					leftSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					leftSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					leftSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var rightSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)rightSource));

				if (rightSourceValue != null)
				{		
					rightSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					rightSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					rightSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					rightSourceValue[2].Active = !rightSourceValue[2].Active;
					testing.ValidateConsistency();
					rightSourceValue[2].Num = rightSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					rightSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					rightSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					rightSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
			}

			test();

			((Scalar<ObservableCollection<Item>>)leftSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)leftSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestJoining25(
			[Values(1)] int initialCapacity)
		{
			System.Collections.Specialized.INotifyCollectionChanged leftSource = getItems();
			System.Collections.Specialized.INotifyCollectionChanged rightSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> predicateExpression = (i1, i2) => i1.Num == i2.Num;
			OcConsumer consumer = new OcConsumer();
			var testing = leftSource.Joining<Item, Item>(
				rightSource,
				predicateExpression,
				initialCapacity).For(consumer);

			Assert.AreEqual(leftSource, testing.LeftSource);
			Assert.AreEqual(rightSource, testing.RightSource);
			Assert.AreEqual(predicateExpression, testing.PredicateExpression);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var leftSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)leftSource));

				if (leftSourceValue != null)
				{		
					leftSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					leftSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					leftSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					leftSourceValue[2].Active = !leftSourceValue[2].Active;
					testing.ValidateConsistency();
					leftSourceValue[2].Num = leftSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					leftSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					leftSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					leftSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var rightSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)rightSource));

				if (rightSourceValue != null)
				{		
					rightSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					rightSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					rightSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					rightSourceValue[2].Active = !rightSourceValue[2].Active;
					testing.ValidateConsistency();
					rightSourceValue[2].Num = rightSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					rightSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					rightSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					rightSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestJoining26()
		{
			System.Collections.Specialized.INotifyCollectionChanged leftSource = getItems();
			System.Collections.Specialized.INotifyCollectionChanged rightSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> predicateExpression = (i1, i2) => i1.Num == i2.Num;
			OcConsumer consumer = new OcConsumer();
			var testing = leftSource.Joining<Item, Item>(
				rightSource,
				predicateExpression).For(consumer);

			Assert.AreEqual(leftSource, testing.LeftSource);
			Assert.AreEqual(rightSource, testing.RightSource);
			Assert.AreEqual(predicateExpression, testing.PredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var leftSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)leftSource));

				if (leftSourceValue != null)
				{		
					leftSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					leftSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					leftSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					leftSourceValue[2].Active = !leftSourceValue[2].Active;
					testing.ValidateConsistency();
					leftSourceValue[2].Num = leftSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					leftSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					leftSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					leftSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var rightSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)rightSource));

				if (rightSourceValue != null)
				{		
					rightSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					rightSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					rightSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					rightSourceValue[2].Active = !rightSourceValue[2].Active;
					testing.ValidateConsistency();
					rightSourceValue[2].Num = rightSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					rightSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					rightSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					rightSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestJoining27(
			[Values(1)] int initialCapacity)
		{
			System.Collections.Specialized.INotifyCollectionChanged leftSource = getItems();
			ObservableCollection<Item> rightSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> predicateExpression = (i1, i2) => i1.Num == i2.Num;
			OcConsumer consumer = new OcConsumer();
			var testing = leftSource.Joining<Item, Item>(
				rightSource,
				predicateExpression,
				initialCapacity).For(consumer);

			Assert.AreEqual(leftSource, testing.LeftSource);
			Assert.AreEqual(rightSource, testing.RightSource);
			Assert.AreEqual(predicateExpression, testing.PredicateExpression);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var leftSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)leftSource));

				if (leftSourceValue != null)
				{		
					leftSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					leftSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					leftSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					leftSourceValue[2].Active = !leftSourceValue[2].Active;
					testing.ValidateConsistency();
					leftSourceValue[2].Num = leftSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					leftSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					leftSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					leftSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var rightSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)rightSource));

				if (rightSourceValue != null)
				{		
					rightSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					rightSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					rightSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					rightSourceValue[2].Active = !rightSourceValue[2].Active;
					testing.ValidateConsistency();
					rightSourceValue[2].Num = rightSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					rightSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					rightSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					rightSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestJoining28()
		{
			System.Collections.Specialized.INotifyCollectionChanged leftSource = getItems();
			ObservableCollection<Item> rightSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> predicateExpression = (i1, i2) => i1.Num == i2.Num;
			OcConsumer consumer = new OcConsumer();
			var testing = leftSource.Joining<Item, Item>(
				rightSource,
				predicateExpression).For(consumer);

			Assert.AreEqual(leftSource, testing.LeftSource);
			Assert.AreEqual(rightSource, testing.RightSource);
			Assert.AreEqual(predicateExpression, testing.PredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var leftSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)leftSource));

				if (leftSourceValue != null)
				{		
					leftSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					leftSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					leftSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					leftSourceValue[2].Active = !leftSourceValue[2].Active;
					testing.ValidateConsistency();
					leftSourceValue[2].Num = leftSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					leftSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					leftSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					leftSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var rightSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)rightSource));

				if (rightSourceValue != null)
				{		
					rightSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					rightSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					rightSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					rightSourceValue[2].Active = !rightSourceValue[2].Active;
					testing.ValidateConsistency();
					rightSourceValue[2].Num = rightSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					rightSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					rightSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					rightSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestJoining29(
			[Values(1)] int initialCapacity)
		{
			ObservableCollection<Item> leftSource = getItems();
			System.Collections.Specialized.INotifyCollectionChanged rightSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> predicateExpression = (i1, i2) => i1.Num == i2.Num;
			OcConsumer consumer = new OcConsumer();
			var testing = leftSource.Joining<Item, Item>(
				rightSource,
				predicateExpression,
				initialCapacity).For(consumer);

			Assert.AreEqual(leftSource, testing.LeftSource);
			Assert.AreEqual(rightSource, testing.RightSource);
			Assert.AreEqual(predicateExpression, testing.PredicateExpression);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var leftSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)leftSource));

				if (leftSourceValue != null)
				{		
					leftSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					leftSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					leftSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					leftSourceValue[2].Active = !leftSourceValue[2].Active;
					testing.ValidateConsistency();
					leftSourceValue[2].Num = leftSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					leftSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					leftSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					leftSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var rightSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)rightSource));

				if (rightSourceValue != null)
				{		
					rightSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					rightSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					rightSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					rightSourceValue[2].Active = !rightSourceValue[2].Active;
					testing.ValidateConsistency();
					rightSourceValue[2].Num = rightSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					rightSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					rightSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					rightSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestJoining30()
		{
			ObservableCollection<Item> leftSource = getItems();
			System.Collections.Specialized.INotifyCollectionChanged rightSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> predicateExpression = (i1, i2) => i1.Num == i2.Num;
			OcConsumer consumer = new OcConsumer();
			var testing = leftSource.Joining<Item, Item>(
				rightSource,
				predicateExpression).For(consumer);

			Assert.AreEqual(leftSource, testing.LeftSource);
			Assert.AreEqual(rightSource, testing.RightSource);
			Assert.AreEqual(predicateExpression, testing.PredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var leftSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)leftSource));

				if (leftSourceValue != null)
				{		
					leftSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					leftSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					leftSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					leftSourceValue[2].Active = !leftSourceValue[2].Active;
					testing.ValidateConsistency();
					leftSourceValue[2].Num = leftSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					leftSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					leftSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					leftSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var rightSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)rightSource));

				if (rightSourceValue != null)
				{		
					rightSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					rightSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					rightSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					rightSourceValue[2].Active = !rightSourceValue[2].Active;
					testing.ValidateConsistency();
					rightSourceValue[2].Num = rightSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					rightSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					rightSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					rightSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestJoining31(
			[Values(1)] int initialCapacity)
		{
			ObservableCollection<Item> leftSource = getItems();
			ObservableCollection<Item> rightSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> predicateExpression = (i1, i2) => i1.Num == i2.Num;
			OcConsumer consumer = new OcConsumer();
			var testing = leftSource.Joining<Item, Item>(
				rightSource,
				predicateExpression,
				initialCapacity).For(consumer);

			Assert.AreEqual(leftSource, testing.LeftSource);
			Assert.AreEqual(rightSource, testing.RightSource);
			Assert.AreEqual(predicateExpression, testing.PredicateExpression);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var leftSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)leftSource));

				if (leftSourceValue != null)
				{		
					leftSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					leftSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					leftSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					leftSourceValue[2].Active = !leftSourceValue[2].Active;
					testing.ValidateConsistency();
					leftSourceValue[2].Num = leftSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					leftSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					leftSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					leftSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var rightSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)rightSource));

				if (rightSourceValue != null)
				{		
					rightSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					rightSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					rightSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					rightSourceValue[2].Active = !rightSourceValue[2].Active;
					testing.ValidateConsistency();
					rightSourceValue[2].Num = rightSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					rightSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					rightSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					rightSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestJoining32()
		{
			ObservableCollection<Item> leftSource = getItems();
			ObservableCollection<Item> rightSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> predicateExpression = (i1, i2) => i1.Num == i2.Num;
			OcConsumer consumer = new OcConsumer();
			var testing = leftSource.Joining<Item, Item>(
				rightSource,
				predicateExpression).For(consumer);

			Assert.AreEqual(leftSource, testing.LeftSource);
			Assert.AreEqual(rightSource, testing.RightSource);
			Assert.AreEqual(predicateExpression, testing.PredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var leftSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)leftSource));

				if (leftSourceValue != null)
				{		
					leftSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					leftSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					leftSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					leftSourceValue[2].Active = !leftSourceValue[2].Active;
					testing.ValidateConsistency();
					leftSourceValue[2].Num = leftSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					leftSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					leftSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					leftSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var rightSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)rightSource));

				if (rightSourceValue != null)
				{		
					rightSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					rightSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					rightSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					rightSourceValue[2].Active = !rightSourceValue[2].Active;
					testing.ValidateConsistency();
					rightSourceValue[2].Num = rightSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					rightSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					rightSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					rightSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
			}

			test();
			consumer.Dispose();
		}
		#endregion
		#region LastComputing

		
		[Test, Combinatorial]
		public void TestLastComputing01()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Item defaultValue = null;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.LastComputing<Item>(
				defaultValue).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(defaultValue, testing.DefaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestLastComputing02()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.LastComputing<Item>().For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestLastComputing03()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Item defaultValue = null;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.LastComputing<Item>(
				defaultValue).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(defaultValue, testing.DefaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestLastComputing04()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.LastComputing<Item>().For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestLastComputing05()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			Item defaultValue = null;
			OcConsumer consumer = new OcConsumer();
			var testing = source.LastComputing<Item>(
				defaultValue).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(defaultValue, testing.DefaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestLastComputing06()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source.LastComputing<Item>().For(consumer);

			Assert.AreEqual(source, testing.Source);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestLastComputing07()
		{
			ObservableCollection<Item> source = getItems();
			Item defaultValue = null;
			OcConsumer consumer = new OcConsumer();
			var testing = source.LastComputing<Item>(
				defaultValue).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(defaultValue, testing.DefaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestLastComputing08()
		{
			ObservableCollection<Item> source = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source.LastComputing<Item>().For(consumer);

			Assert.AreEqual(source, testing.Source);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		#endregion
		#region Maximazing

		
		[Test, Combinatorial]
		public void TestMaximazing01()
		{
			IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			int defaultValue = 0;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Maximazing<int>(
				comparer,
				defaultValue).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(comparer, testing.Comparer);
			Assert.AreEqual(defaultValue, testing.DefaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			}

			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestMaximazing02()
		{
			IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Maximazing<int>(
				comparer).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(comparer, testing.Comparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			}

			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestMaximazing03()
		{
			IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			int defaultValue = 0;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Maximazing<int>(
				defaultValue).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(defaultValue, testing.DefaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			}

			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestMaximazing04()
		{
			IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Maximazing<int>().For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			}

			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestMaximazing05()
		{
			IReadScalar<ObservableCollection<int>> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			int defaultValue = 0;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Maximazing<int>(
				comparer,
				defaultValue).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(comparer, testing.Comparer);
			Assert.AreEqual(defaultValue, testing.DefaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			}

			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestMaximazing06()
		{
			IReadScalar<ObservableCollection<int>> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Maximazing<int>(
				comparer).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(comparer, testing.Comparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			}

			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestMaximazing07()
		{
			IReadScalar<ObservableCollection<int>> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			int defaultValue = 0;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Maximazing<int>(
				defaultValue).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(defaultValue, testing.DefaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			}

			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestMaximazing08()
		{
			IReadScalar<ObservableCollection<int>> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Maximazing<int>().For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			}

			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestMaximazing09()
		{
			IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			int defaultValue = 0;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Maximazing<int>(
				comparerScalar,
				defaultValue).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(comparerScalar, testing.ComparerScalar);
			Assert.AreEqual(defaultValue, testing.DefaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestMaximazing10()
		{
			IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Maximazing<int>(
				comparerScalar).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(comparerScalar, testing.ComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestMaximazing11()
		{
			IReadScalar<ObservableCollection<int>> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			int defaultValue = 0;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Maximazing<int>(
				comparerScalar,
				defaultValue).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(comparerScalar, testing.ComparerScalar);
			Assert.AreEqual(defaultValue, testing.DefaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestMaximazing12()
		{
			IReadScalar<ObservableCollection<int>> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Maximazing<int>(
				comparerScalar).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(comparerScalar, testing.ComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestMaximazing13()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			int defaultValue = 0;
			OcConsumer consumer = new OcConsumer();
			var testing = source.Maximazing<int>(
				comparer,
				defaultValue).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(comparer, testing.Comparer);
			Assert.AreEqual(defaultValue, testing.DefaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestMaximazing14()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source.Maximazing<int>(
				comparer).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(comparer, testing.Comparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestMaximazing15()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			int defaultValue = 0;
			OcConsumer consumer = new OcConsumer();
			var testing = source.Maximazing<int>(
				defaultValue).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(defaultValue, testing.DefaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestMaximazing16()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			OcConsumer consumer = new OcConsumer();
			var testing = source.Maximazing<int>().For(consumer);

			Assert.AreEqual(source, testing.Source);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestMaximazing17()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			int defaultValue = 0;
			OcConsumer consumer = new OcConsumer();
			var testing = source.Maximazing<int>(
				comparer,
				defaultValue).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(comparer, testing.Comparer);
			Assert.AreEqual(defaultValue, testing.DefaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestMaximazing18()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source.Maximazing<int>(
				comparer).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(comparer, testing.Comparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestMaximazing19()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			int defaultValue = 0;
			OcConsumer consumer = new OcConsumer();
			var testing = source.Maximazing<int>(
				defaultValue).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(defaultValue, testing.DefaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestMaximazing20()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			OcConsumer consumer = new OcConsumer();
			var testing = source.Maximazing<int>().For(consumer);

			Assert.AreEqual(source, testing.Source);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestMaximazing21()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			int defaultValue = 0;
			OcConsumer consumer = new OcConsumer();
			var testing = source.Maximazing<int>(
				comparerScalar,
				defaultValue).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(comparerScalar, testing.ComparerScalar);
			Assert.AreEqual(defaultValue, testing.DefaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestMaximazing22()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source.Maximazing<int>(
				comparerScalar).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(comparerScalar, testing.ComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestMaximazing23()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			int defaultValue = 0;
			OcConsumer consumer = new OcConsumer();
			var testing = source.Maximazing<int>(
				comparerScalar,
				defaultValue).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(comparerScalar, testing.ComparerScalar);
			Assert.AreEqual(defaultValue, testing.DefaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestMaximazing24()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source.Maximazing<int>(
				comparerScalar).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(comparerScalar, testing.ComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();
			consumer.Dispose();
		}
		#endregion
		#region Minimazing

		
		[Test, Combinatorial]
		public void TestMinimazing01()
		{
			IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			int defaultValue = 0;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Minimazing<int>(
				comparer,
				defaultValue).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(comparer, testing.Comparer);
			Assert.AreEqual(defaultValue, testing.DefaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			}

			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestMinimazing02()
		{
			IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Minimazing<int>(
				comparer).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(comparer, testing.Comparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			}

			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestMinimazing03()
		{
			IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			int defaultValue = 0;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Minimazing<int>(
				defaultValue).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(defaultValue, testing.DefaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			}

			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestMinimazing04()
		{
			IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Minimazing<int>().For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			}

			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestMinimazing05()
		{
			IReadScalar<ObservableCollection<int>> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			int defaultValue = 0;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Minimazing<int>(
				comparer,
				defaultValue).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(comparer, testing.Comparer);
			Assert.AreEqual(defaultValue, testing.DefaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			}

			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestMinimazing06()
		{
			IReadScalar<ObservableCollection<int>> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Minimazing<int>(
				comparer).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(comparer, testing.Comparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			}

			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestMinimazing07()
		{
			IReadScalar<ObservableCollection<int>> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			int defaultValue = 0;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Minimazing<int>(
				defaultValue).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(defaultValue, testing.DefaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			}

			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestMinimazing08()
		{
			IReadScalar<ObservableCollection<int>> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Minimazing<int>().For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			}

			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestMinimazing09()
		{
			IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			int defaultValue = 0;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Minimazing<int>(
				comparerScalar,
				defaultValue).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(comparerScalar, testing.ComparerScalar);
			Assert.AreEqual(defaultValue, testing.DefaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestMinimazing10()
		{
			IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Minimazing<int>(
				comparerScalar).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(comparerScalar, testing.ComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestMinimazing11()
		{
			IReadScalar<ObservableCollection<int>> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			int defaultValue = 0;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Minimazing<int>(
				comparerScalar,
				defaultValue).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(comparerScalar, testing.ComparerScalar);
			Assert.AreEqual(defaultValue, testing.DefaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestMinimazing12()
		{
			IReadScalar<ObservableCollection<int>> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Minimazing<int>(
				comparerScalar).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(comparerScalar, testing.ComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestMinimazing13()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			int defaultValue = 0;
			OcConsumer consumer = new OcConsumer();
			var testing = source.Minimazing<int>(
				comparer,
				defaultValue).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(comparer, testing.Comparer);
			Assert.AreEqual(defaultValue, testing.DefaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestMinimazing14()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source.Minimazing<int>(
				comparer).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(comparer, testing.Comparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestMinimazing15()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			int defaultValue = 0;
			OcConsumer consumer = new OcConsumer();
			var testing = source.Minimazing<int>(
				defaultValue).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(defaultValue, testing.DefaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestMinimazing16()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			OcConsumer consumer = new OcConsumer();
			var testing = source.Minimazing<int>().For(consumer);

			Assert.AreEqual(source, testing.Source);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestMinimazing17()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			int defaultValue = 0;
			OcConsumer consumer = new OcConsumer();
			var testing = source.Minimazing<int>(
				comparer,
				defaultValue).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(comparer, testing.Comparer);
			Assert.AreEqual(defaultValue, testing.DefaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestMinimazing18()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source.Minimazing<int>(
				comparer).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(comparer, testing.Comparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestMinimazing19()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			int defaultValue = 0;
			OcConsumer consumer = new OcConsumer();
			var testing = source.Minimazing<int>(
				defaultValue).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(defaultValue, testing.DefaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestMinimazing20()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			OcConsumer consumer = new OcConsumer();
			var testing = source.Minimazing<int>().For(consumer);

			Assert.AreEqual(source, testing.Source);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestMinimazing21()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			int defaultValue = 0;
			OcConsumer consumer = new OcConsumer();
			var testing = source.Minimazing<int>(
				comparerScalar,
				defaultValue).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(comparerScalar, testing.ComparerScalar);
			Assert.AreEqual(defaultValue, testing.DefaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestMinimazing22()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source.Minimazing<int>(
				comparerScalar).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(comparerScalar, testing.ComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestMinimazing23()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			int defaultValue = 0;
			OcConsumer consumer = new OcConsumer();
			var testing = source.Minimazing<int>(
				comparerScalar,
				defaultValue).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(comparerScalar, testing.ComparerScalar);
			Assert.AreEqual(defaultValue, testing.DefaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestMinimazing24()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source.Minimazing<int>(
				comparerScalar).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(comparerScalar, testing.ComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();
			consumer.Dispose();
		}
		#endregion
		#region OfTypeComputing

		
		[Test, Combinatorial]
		public void TestOfTypeComputing01()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.OfTypeComputing<object>().For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestOfTypeComputing02()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source.OfTypeComputing<object>().For(consumer);

			Assert.AreEqual(source, testing.Source);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		#endregion
		#region Ordering

		
		[Test, Combinatorial]
		public void TestOrdering01()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			Scalar<System.ComponentModel.ListSortDirection> sortDirectionScalar = getScalar<System.ComponentModel.ListSortDirection>(System.ComponentModel.ListSortDirection.Ascending);
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source.Ordering<int, int>(
				orderingValueSelectorExpression,
				sortDirectionScalar,
				comparerScalar).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(orderingValueSelectorExpression, testing.OrderingValueSelectorExpression);
			Assert.AreEqual(sortDirectionScalar, testing.SortDirectionScalar);
			Assert.AreEqual(comparerScalar, testing.ComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Touch();
			test();
			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Change(System.ComponentModel.ListSortDirection.Descending);
			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestOrdering02()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			Scalar<System.ComponentModel.ListSortDirection> sortDirectionScalar = getScalar<System.ComponentModel.ListSortDirection>(System.ComponentModel.ListSortDirection.Ascending);
			OcConsumer consumer = new OcConsumer();
			var testing = source.Ordering<int, int>(
				orderingValueSelectorExpression,
				sortDirectionScalar).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(orderingValueSelectorExpression, testing.OrderingValueSelectorExpression);
			Assert.AreEqual(sortDirectionScalar, testing.SortDirectionScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Touch();
			test();
			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Change(System.ComponentModel.ListSortDirection.Descending);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestOrdering03()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source.Ordering<int, int>(
				orderingValueSelectorExpression,
				comparerScalar).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(orderingValueSelectorExpression, testing.OrderingValueSelectorExpression);
			Assert.AreEqual(comparerScalar, testing.ComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestOrdering04()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			OcConsumer consumer = new OcConsumer();
			var testing = source.Ordering<int, int>(
				orderingValueSelectorExpression).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(orderingValueSelectorExpression, testing.OrderingValueSelectorExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestOrdering05()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			Scalar<System.ComponentModel.ListSortDirection> sortDirectionScalar = getScalar<System.ComponentModel.ListSortDirection>(System.ComponentModel.ListSortDirection.Ascending);
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source.Ordering<int, int>(
				orderingValueSelectorExpression,
				sortDirectionScalar,
				comparerScalar).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(orderingValueSelectorExpression, testing.OrderingValueSelectorExpression);
			Assert.AreEqual(sortDirectionScalar, testing.SortDirectionScalar);
			Assert.AreEqual(comparerScalar, testing.ComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Touch();
			test();
			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Change(System.ComponentModel.ListSortDirection.Descending);
			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestOrdering06()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			Scalar<System.ComponentModel.ListSortDirection> sortDirectionScalar = getScalar<System.ComponentModel.ListSortDirection>(System.ComponentModel.ListSortDirection.Ascending);
			OcConsumer consumer = new OcConsumer();
			var testing = source.Ordering<int, int>(
				orderingValueSelectorExpression,
				sortDirectionScalar).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(orderingValueSelectorExpression, testing.OrderingValueSelectorExpression);
			Assert.AreEqual(sortDirectionScalar, testing.SortDirectionScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Touch();
			test();
			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Change(System.ComponentModel.ListSortDirection.Descending);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestOrdering07()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source.Ordering<int, int>(
				orderingValueSelectorExpression,
				comparerScalar).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(orderingValueSelectorExpression, testing.OrderingValueSelectorExpression);
			Assert.AreEqual(comparerScalar, testing.ComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestOrdering08()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			OcConsumer consumer = new OcConsumer();
			var testing = source.Ordering<int, int>(
				orderingValueSelectorExpression).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(orderingValueSelectorExpression, testing.OrderingValueSelectorExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestOrdering09()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			System.ComponentModel.ListSortDirection sortDirection = System.ComponentModel.ListSortDirection.Ascending;
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source.Ordering<int, int>(
				orderingValueSelectorExpression,
				sortDirection,
				comparerScalar).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(orderingValueSelectorExpression, testing.OrderingValueSelectorExpression);
			Assert.AreEqual(sortDirection, testing.SortDirection);
			Assert.AreEqual(comparerScalar, testing.ComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestOrdering10()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			System.ComponentModel.ListSortDirection sortDirection = System.ComponentModel.ListSortDirection.Ascending;
			OcConsumer consumer = new OcConsumer();
			var testing = source.Ordering<int, int>(
				orderingValueSelectorExpression,
				sortDirection).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(orderingValueSelectorExpression, testing.OrderingValueSelectorExpression);
			Assert.AreEqual(sortDirection, testing.SortDirection);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestOrdering11()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			System.ComponentModel.ListSortDirection sortDirection = System.ComponentModel.ListSortDirection.Ascending;
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source.Ordering<int, int>(
				orderingValueSelectorExpression,
				sortDirection,
				comparerScalar).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(orderingValueSelectorExpression, testing.OrderingValueSelectorExpression);
			Assert.AreEqual(sortDirection, testing.SortDirection);
			Assert.AreEqual(comparerScalar, testing.ComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestOrdering12()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			System.ComponentModel.ListSortDirection sortDirection = System.ComponentModel.ListSortDirection.Ascending;
			OcConsumer consumer = new OcConsumer();
			var testing = source.Ordering<int, int>(
				orderingValueSelectorExpression,
				sortDirection).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(orderingValueSelectorExpression, testing.OrderingValueSelectorExpression);
			Assert.AreEqual(sortDirection, testing.SortDirection);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestOrdering13()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			Scalar<System.ComponentModel.ListSortDirection> sortDirectionScalar = getScalar<System.ComponentModel.ListSortDirection>(System.ComponentModel.ListSortDirection.Ascending);
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source.Ordering<int, int>(
				orderingValueSelectorExpression,
				sortDirectionScalar,
				comparer).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(orderingValueSelectorExpression, testing.OrderingValueSelectorExpression);
			Assert.AreEqual(sortDirectionScalar, testing.SortDirectionScalar);
			Assert.AreEqual(comparer, testing.Comparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Touch();
			test();
			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Change(System.ComponentModel.ListSortDirection.Descending);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestOrdering14()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source.Ordering<int, int>(
				orderingValueSelectorExpression,
				comparer).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(orderingValueSelectorExpression, testing.OrderingValueSelectorExpression);
			Assert.AreEqual(comparer, testing.Comparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestOrdering15()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			Scalar<System.ComponentModel.ListSortDirection> sortDirectionScalar = getScalar<System.ComponentModel.ListSortDirection>(System.ComponentModel.ListSortDirection.Ascending);
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source.Ordering<int, int>(
				orderingValueSelectorExpression,
				sortDirectionScalar,
				comparer).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(orderingValueSelectorExpression, testing.OrderingValueSelectorExpression);
			Assert.AreEqual(sortDirectionScalar, testing.SortDirectionScalar);
			Assert.AreEqual(comparer, testing.Comparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Touch();
			test();
			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Change(System.ComponentModel.ListSortDirection.Descending);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestOrdering16()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source.Ordering<int, int>(
				orderingValueSelectorExpression,
				comparer).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(orderingValueSelectorExpression, testing.OrderingValueSelectorExpression);
			Assert.AreEqual(comparer, testing.Comparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestOrdering17()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			System.ComponentModel.ListSortDirection sortDirection = System.ComponentModel.ListSortDirection.Ascending;
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source.Ordering<int, int>(
				orderingValueSelectorExpression,
				sortDirection,
				comparer).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(orderingValueSelectorExpression, testing.OrderingValueSelectorExpression);
			Assert.AreEqual(sortDirection, testing.SortDirection);
			Assert.AreEqual(comparer, testing.Comparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestOrdering18()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			System.ComponentModel.ListSortDirection sortDirection = System.ComponentModel.ListSortDirection.Ascending;
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source.Ordering<int, int>(
				orderingValueSelectorExpression,
				sortDirection,
				comparer).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(orderingValueSelectorExpression, testing.OrderingValueSelectorExpression);
			Assert.AreEqual(sortDirection, testing.SortDirection);
			Assert.AreEqual(comparer, testing.Comparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestOrdering19()
		{
			IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			Scalar<System.ComponentModel.ListSortDirection> sortDirectionScalar = getScalar<System.ComponentModel.ListSortDirection>(System.ComponentModel.ListSortDirection.Ascending);
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Ordering<int, int>(
				orderingValueSelectorExpression,
				sortDirectionScalar,
				comparerScalar).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(orderingValueSelectorExpression, testing.OrderingValueSelectorExpression);
			Assert.AreEqual(sortDirectionScalar, testing.SortDirectionScalar);
			Assert.AreEqual(comparerScalar, testing.ComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			}

			test();

			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Touch();
			test();
			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Change(System.ComponentModel.ListSortDirection.Descending);
			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestOrdering20()
		{
			IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			Scalar<System.ComponentModel.ListSortDirection> sortDirectionScalar = getScalar<System.ComponentModel.ListSortDirection>(System.ComponentModel.ListSortDirection.Ascending);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Ordering<int, int>(
				orderingValueSelectorExpression,
				sortDirectionScalar).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(orderingValueSelectorExpression, testing.OrderingValueSelectorExpression);
			Assert.AreEqual(sortDirectionScalar, testing.SortDirectionScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			}

			test();

			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Touch();
			test();
			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Change(System.ComponentModel.ListSortDirection.Descending);
			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestOrdering21()
		{
			IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Ordering<int, int>(
				orderingValueSelectorExpression,
				comparerScalar).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(orderingValueSelectorExpression, testing.OrderingValueSelectorExpression);
			Assert.AreEqual(comparerScalar, testing.ComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestOrdering22()
		{
			IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Ordering<int, int>(
				orderingValueSelectorExpression).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(orderingValueSelectorExpression, testing.OrderingValueSelectorExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			}

			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestOrdering23()
		{
			IReadScalar<ObservableCollection<int>> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			Scalar<System.ComponentModel.ListSortDirection> sortDirectionScalar = getScalar<System.ComponentModel.ListSortDirection>(System.ComponentModel.ListSortDirection.Ascending);
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Ordering<int, int>(
				orderingValueSelectorExpression,
				sortDirectionScalar,
				comparerScalar).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(orderingValueSelectorExpression, testing.OrderingValueSelectorExpression);
			Assert.AreEqual(sortDirectionScalar, testing.SortDirectionScalar);
			Assert.AreEqual(comparerScalar, testing.ComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			}

			test();

			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Touch();
			test();
			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Change(System.ComponentModel.ListSortDirection.Descending);
			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestOrdering24()
		{
			IReadScalar<ObservableCollection<int>> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			Scalar<System.ComponentModel.ListSortDirection> sortDirectionScalar = getScalar<System.ComponentModel.ListSortDirection>(System.ComponentModel.ListSortDirection.Ascending);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Ordering<int, int>(
				orderingValueSelectorExpression,
				sortDirectionScalar).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(orderingValueSelectorExpression, testing.OrderingValueSelectorExpression);
			Assert.AreEqual(sortDirectionScalar, testing.SortDirectionScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			}

			test();

			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Touch();
			test();
			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Change(System.ComponentModel.ListSortDirection.Descending);
			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestOrdering25()
		{
			IReadScalar<ObservableCollection<int>> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Ordering<int, int>(
				orderingValueSelectorExpression,
				comparerScalar).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(orderingValueSelectorExpression, testing.OrderingValueSelectorExpression);
			Assert.AreEqual(comparerScalar, testing.ComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestOrdering26()
		{
			IReadScalar<ObservableCollection<int>> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Ordering<int, int>(
				orderingValueSelectorExpression).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(orderingValueSelectorExpression, testing.OrderingValueSelectorExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			}

			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestOrdering27()
		{
			IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			System.ComponentModel.ListSortDirection sortDirection = System.ComponentModel.ListSortDirection.Ascending;
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Ordering<int, int>(
				orderingValueSelectorExpression,
				sortDirection,
				comparerScalar).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(orderingValueSelectorExpression, testing.OrderingValueSelectorExpression);
			Assert.AreEqual(sortDirection, testing.SortDirection);
			Assert.AreEqual(comparerScalar, testing.ComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestOrdering28()
		{
			IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			System.ComponentModel.ListSortDirection sortDirection = System.ComponentModel.ListSortDirection.Ascending;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Ordering<int, int>(
				orderingValueSelectorExpression,
				sortDirection).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(orderingValueSelectorExpression, testing.OrderingValueSelectorExpression);
			Assert.AreEqual(sortDirection, testing.SortDirection);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			}

			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestOrdering29()
		{
			IReadScalar<ObservableCollection<int>> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			System.ComponentModel.ListSortDirection sortDirection = System.ComponentModel.ListSortDirection.Ascending;
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Ordering<int, int>(
				orderingValueSelectorExpression,
				sortDirection,
				comparerScalar).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(orderingValueSelectorExpression, testing.OrderingValueSelectorExpression);
			Assert.AreEqual(sortDirection, testing.SortDirection);
			Assert.AreEqual(comparerScalar, testing.ComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestOrdering30()
		{
			IReadScalar<ObservableCollection<int>> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			System.ComponentModel.ListSortDirection sortDirection = System.ComponentModel.ListSortDirection.Ascending;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Ordering<int, int>(
				orderingValueSelectorExpression,
				sortDirection).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(orderingValueSelectorExpression, testing.OrderingValueSelectorExpression);
			Assert.AreEqual(sortDirection, testing.SortDirection);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			}

			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestOrdering31()
		{
			IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			Scalar<System.ComponentModel.ListSortDirection> sortDirectionScalar = getScalar<System.ComponentModel.ListSortDirection>(System.ComponentModel.ListSortDirection.Ascending);
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Ordering<int, int>(
				orderingValueSelectorExpression,
				sortDirectionScalar,
				comparer).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(orderingValueSelectorExpression, testing.OrderingValueSelectorExpression);
			Assert.AreEqual(sortDirectionScalar, testing.SortDirectionScalar);
			Assert.AreEqual(comparer, testing.Comparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			}

			test();

			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Touch();
			test();
			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Change(System.ComponentModel.ListSortDirection.Descending);
			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestOrdering32()
		{
			IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Ordering<int, int>(
				orderingValueSelectorExpression,
				comparer).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(orderingValueSelectorExpression, testing.OrderingValueSelectorExpression);
			Assert.AreEqual(comparer, testing.Comparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			}

			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestOrdering33()
		{
			IReadScalar<ObservableCollection<int>> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			Scalar<System.ComponentModel.ListSortDirection> sortDirectionScalar = getScalar<System.ComponentModel.ListSortDirection>(System.ComponentModel.ListSortDirection.Ascending);
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Ordering<int, int>(
				orderingValueSelectorExpression,
				sortDirectionScalar,
				comparer).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(orderingValueSelectorExpression, testing.OrderingValueSelectorExpression);
			Assert.AreEqual(sortDirectionScalar, testing.SortDirectionScalar);
			Assert.AreEqual(comparer, testing.Comparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			}

			test();

			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Touch();
			test();
			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Change(System.ComponentModel.ListSortDirection.Descending);
			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestOrdering34()
		{
			IReadScalar<ObservableCollection<int>> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Ordering<int, int>(
				orderingValueSelectorExpression,
				comparer).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(orderingValueSelectorExpression, testing.OrderingValueSelectorExpression);
			Assert.AreEqual(comparer, testing.Comparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			}

			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestOrdering35()
		{
			IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			System.ComponentModel.ListSortDirection sortDirection = System.ComponentModel.ListSortDirection.Ascending;
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Ordering<int, int>(
				orderingValueSelectorExpression,
				sortDirection,
				comparer).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(orderingValueSelectorExpression, testing.OrderingValueSelectorExpression);
			Assert.AreEqual(sortDirection, testing.SortDirection);
			Assert.AreEqual(comparer, testing.Comparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			}

			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestOrdering36()
		{
			IReadScalar<ObservableCollection<int>> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			System.ComponentModel.ListSortDirection sortDirection = System.ComponentModel.ListSortDirection.Ascending;
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Ordering<int, int>(
				orderingValueSelectorExpression,
				sortDirection,
				comparer).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(orderingValueSelectorExpression, testing.OrderingValueSelectorExpression);
			Assert.AreEqual(sortDirection, testing.SortDirection);
			Assert.AreEqual(comparer, testing.Comparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			}

			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		#endregion
		#region Paging

		
		[Test, Combinatorial]
		public void TestPaging01(
			[Values(1)] int pageSize,
			[Values(1)] int initialPage)
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source.Paging<Item>(
				pageSize,
				initialPage).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(pageSize, testing.PageSize);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestPaging02(
			[Values(1)] int pageSize)
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source.Paging<Item>(
				pageSize).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(pageSize, testing.PageSize);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestPaging03(
			[Values(1)] int pageSize,
			[Values(1)] int initialPage)
		{
			ObservableCollection<Item> source = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source.Paging<Item>(
				pageSize,
				initialPage).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(pageSize, testing.PageSize);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestPaging04(
			[Values(1)] int pageSize)
		{
			ObservableCollection<Item> source = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source.Paging<Item>(
				pageSize).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(pageSize, testing.PageSize);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestPaging05(
			[Values(1)] int pageSize,
			[Values(1)] int initialPage)
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Paging<Item>(
				pageSize,
				initialPage).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(pageSize, testing.PageSize);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestPaging06(
			[Values(1)] int pageSize)
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Paging<Item>(
				pageSize).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(pageSize, testing.PageSize);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestPaging07(
			[Values(1)] int pageSize,
			[Values(1)] int initialPage)
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Paging<Item>(
				pageSize,
				initialPage).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(pageSize, testing.PageSize);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestPaging08(
			[Values(1)] int pageSize)
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Paging<Item>(
				pageSize).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(pageSize, testing.PageSize);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestPaging09(
			[Values(1)] int initialPage)
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			Scalar<int> pageSizeScalar = getScalar<int>(2);
			OcConsumer consumer = new OcConsumer();
			var testing = source.Paging<Item>(
				pageSizeScalar,
				initialPage).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(pageSizeScalar, testing.PageSizeScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)pageSizeScalar).Touch();
			test();
			((Scalar<int>)pageSizeScalar).Change(1);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestPaging10()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			Scalar<int> pageSizeScalar = getScalar<int>(2);
			OcConsumer consumer = new OcConsumer();
			var testing = source.Paging<Item>(
				pageSizeScalar).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(pageSizeScalar, testing.PageSizeScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)pageSizeScalar).Touch();
			test();
			((Scalar<int>)pageSizeScalar).Change(1);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestPaging11(
			[Values(1)] int initialPage)
		{
			ObservableCollection<Item> source = getItems();
			Scalar<int> pageSizeScalar = getScalar<int>(2);
			OcConsumer consumer = new OcConsumer();
			var testing = source.Paging<Item>(
				pageSizeScalar,
				initialPage).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(pageSizeScalar, testing.PageSizeScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)pageSizeScalar).Touch();
			test();
			((Scalar<int>)pageSizeScalar).Change(1);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestPaging12()
		{
			ObservableCollection<Item> source = getItems();
			Scalar<int> pageSizeScalar = getScalar<int>(2);
			OcConsumer consumer = new OcConsumer();
			var testing = source.Paging<Item>(
				pageSizeScalar).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(pageSizeScalar, testing.PageSizeScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)pageSizeScalar).Touch();
			test();
			((Scalar<int>)pageSizeScalar).Change(1);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestPaging13(
			[Values(1)] int initialPage)
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<int> pageSizeScalar = getScalar<int>(2);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Paging<Item>(
				pageSizeScalar,
				initialPage).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(pageSizeScalar, testing.PageSizeScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)pageSizeScalar).Touch();
			test();
			((Scalar<int>)pageSizeScalar).Change(1);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestPaging14()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<int> pageSizeScalar = getScalar<int>(2);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Paging<Item>(
				pageSizeScalar).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(pageSizeScalar, testing.PageSizeScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)pageSizeScalar).Touch();
			test();
			((Scalar<int>)pageSizeScalar).Change(1);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestPaging15(
			[Values(1)] int initialPage)
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<int> pageSizeScalar = getScalar<int>(2);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Paging<Item>(
				pageSizeScalar,
				initialPage).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(pageSizeScalar, testing.PageSizeScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)pageSizeScalar).Touch();
			test();
			((Scalar<int>)pageSizeScalar).Change(1);
			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestPaging16()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<int> pageSizeScalar = getScalar<int>(2);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Paging<Item>(
				pageSizeScalar).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(pageSizeScalar, testing.PageSizeScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)pageSizeScalar).Touch();
			test();
			((Scalar<int>)pageSizeScalar).Change(1);
			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestPaging17()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			Scalar<int> pageSizeScalar = getScalar<int>(2);
			Scalar<int> currentPageScalar = getScalar<int>(1);
			OcConsumer consumer = new OcConsumer();
			var testing = source.Paging<Item>(
				pageSizeScalar,
				currentPageScalar).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(pageSizeScalar, testing.PageSizeScalar);
			Assert.AreEqual(currentPageScalar, testing.CurrentPageScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)pageSizeScalar).Touch();
			test();
			((Scalar<int>)pageSizeScalar).Change(1);
			test();

			((Scalar<int>)currentPageScalar).Touch();
			test();
			((Scalar<int>)currentPageScalar).Change(1);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestPaging18()
		{
			ObservableCollection<Item> source = getItems();
			Scalar<int> pageSizeScalar = getScalar<int>(2);
			Scalar<int> currentPageScalar = getScalar<int>(1);
			OcConsumer consumer = new OcConsumer();
			var testing = source.Paging<Item>(
				pageSizeScalar,
				currentPageScalar).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(pageSizeScalar, testing.PageSizeScalar);
			Assert.AreEqual(currentPageScalar, testing.CurrentPageScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)pageSizeScalar).Touch();
			test();
			((Scalar<int>)pageSizeScalar).Change(1);
			test();

			((Scalar<int>)currentPageScalar).Touch();
			test();
			((Scalar<int>)currentPageScalar).Change(1);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestPaging19()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<int> pageSizeScalar = getScalar<int>(2);
			Scalar<int> currentPageScalar = getScalar<int>(1);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Paging<Item>(
				pageSizeScalar,
				currentPageScalar).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(pageSizeScalar, testing.PageSizeScalar);
			Assert.AreEqual(currentPageScalar, testing.CurrentPageScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)pageSizeScalar).Touch();
			test();
			((Scalar<int>)pageSizeScalar).Change(1);
			test();

			((Scalar<int>)currentPageScalar).Touch();
			test();
			((Scalar<int>)currentPageScalar).Change(1);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestPaging20()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<int> pageSizeScalar = getScalar<int>(2);
			Scalar<int> currentPageScalar = getScalar<int>(1);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Paging<Item>(
				pageSizeScalar,
				currentPageScalar).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(pageSizeScalar, testing.PageSizeScalar);
			Assert.AreEqual(currentPageScalar, testing.CurrentPageScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)pageSizeScalar).Touch();
			test();
			((Scalar<int>)pageSizeScalar).Change(1);
			test();

			((Scalar<int>)currentPageScalar).Touch();
			test();
			((Scalar<int>)currentPageScalar).Change(1);
			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestPaging21(
			[Values(1)] int pageSize)
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			Scalar<int> currentPageScalar = getScalar<int>(1);
			OcConsumer consumer = new OcConsumer();
			var testing = source.Paging<Item>(
				pageSize,
				currentPageScalar).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(pageSize, testing.PageSize);
			Assert.AreEqual(currentPageScalar, testing.CurrentPageScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)currentPageScalar).Touch();
			test();
			((Scalar<int>)currentPageScalar).Change(1);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestPaging22(
			[Values(1)] int pageSize)
		{
			ObservableCollection<Item> source = getItems();
			Scalar<int> currentPageScalar = getScalar<int>(1);
			OcConsumer consumer = new OcConsumer();
			var testing = source.Paging<Item>(
				pageSize,
				currentPageScalar).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(pageSize, testing.PageSize);
			Assert.AreEqual(currentPageScalar, testing.CurrentPageScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)currentPageScalar).Touch();
			test();
			((Scalar<int>)currentPageScalar).Change(1);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestPaging23(
			[Values(1)] int pageSize)
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<int> currentPageScalar = getScalar<int>(1);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Paging<Item>(
				pageSize,
				currentPageScalar).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(pageSize, testing.PageSize);
			Assert.AreEqual(currentPageScalar, testing.CurrentPageScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)currentPageScalar).Touch();
			test();
			((Scalar<int>)currentPageScalar).Change(1);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestPaging24(
			[Values(1)] int pageSize)
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<int> currentPageScalar = getScalar<int>(1);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Paging<Item>(
				pageSize,
				currentPageScalar).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(pageSize, testing.PageSize);
			Assert.AreEqual(currentPageScalar, testing.CurrentPageScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)currentPageScalar).Touch();
			test();
			((Scalar<int>)currentPageScalar).Change(1);
			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		#endregion
		#region PredicateGroupJoining

		
		[Test, Combinatorial]
		public void TestPredicateGroupJoining01()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> joinPredicateExpression = (i1, i2) => i1.Num == i2.Num;
			OcConsumer consumer = new OcConsumer();
			var testing = outerSourceScalar.PredicateGroupJoining<Item, Item>(
				innerSourceScalar,
				joinPredicateExpression).For(consumer);

			Assert.AreEqual(outerSourceScalar, testing.OuterSourceScalar);
			Assert.AreEqual(innerSourceScalar, testing.InnerSourceScalar);
			Assert.AreEqual(joinPredicateExpression, testing.JoinPredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestPredicateGroupJoining02()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<ObservableCollection<Item>> innerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> joinPredicateExpression = (i1, i2) => i1.Num == i2.Num;
			OcConsumer consumer = new OcConsumer();
			var testing = outerSourceScalar.PredicateGroupJoining<Item, Item>(
				innerSourceScalar,
				joinPredicateExpression).For(consumer);

			Assert.AreEqual(outerSourceScalar, testing.OuterSourceScalar);
			Assert.AreEqual(innerSourceScalar, testing.InnerSourceScalar);
			Assert.AreEqual(joinPredicateExpression, testing.JoinPredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestPredicateGroupJoining03()
		{
			Scalar<ObservableCollection<Item>> outerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> joinPredicateExpression = (i1, i2) => i1.Num == i2.Num;
			OcConsumer consumer = new OcConsumer();
			var testing = outerSourceScalar.PredicateGroupJoining<Item, Item>(
				innerSourceScalar,
				joinPredicateExpression).For(consumer);

			Assert.AreEqual(outerSourceScalar, testing.OuterSourceScalar);
			Assert.AreEqual(innerSourceScalar, testing.InnerSourceScalar);
			Assert.AreEqual(joinPredicateExpression, testing.JoinPredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestPredicateGroupJoining04()
		{
			Scalar<ObservableCollection<Item>> outerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<ObservableCollection<Item>> innerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> joinPredicateExpression = (i1, i2) => i1.Num == i2.Num;
			OcConsumer consumer = new OcConsumer();
			var testing = outerSourceScalar.PredicateGroupJoining<Item, Item>(
				innerSourceScalar,
				joinPredicateExpression).For(consumer);

			Assert.AreEqual(outerSourceScalar, testing.OuterSourceScalar);
			Assert.AreEqual(innerSourceScalar, testing.InnerSourceScalar);
			Assert.AreEqual(joinPredicateExpression, testing.JoinPredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestPredicateGroupJoining05()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> joinPredicateExpression = (i1, i2) => i1.Num == i2.Num;
			OcConsumer consumer = new OcConsumer();
			var testing = outerSourceScalar.PredicateGroupJoining<Item, Item>(
				innerSource,
				joinPredicateExpression).For(consumer);

			Assert.AreEqual(outerSourceScalar, testing.OuterSourceScalar);
			Assert.AreEqual(innerSource, testing.InnerSource);
			Assert.AreEqual(joinPredicateExpression, testing.JoinPredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestPredicateGroupJoining06()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			ObservableCollection<Item> innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> joinPredicateExpression = (i1, i2) => i1.Num == i2.Num;
			OcConsumer consumer = new OcConsumer();
			var testing = outerSourceScalar.PredicateGroupJoining<Item, Item>(
				innerSource,
				joinPredicateExpression).For(consumer);

			Assert.AreEqual(outerSourceScalar, testing.OuterSourceScalar);
			Assert.AreEqual(innerSource, testing.InnerSource);
			Assert.AreEqual(joinPredicateExpression, testing.JoinPredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestPredicateGroupJoining07()
		{
			Scalar<ObservableCollection<Item>> outerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> joinPredicateExpression = (i1, i2) => i1.Num == i2.Num;
			OcConsumer consumer = new OcConsumer();
			var testing = outerSourceScalar.PredicateGroupJoining<Item, Item>(
				innerSource,
				joinPredicateExpression).For(consumer);

			Assert.AreEqual(outerSourceScalar, testing.OuterSourceScalar);
			Assert.AreEqual(innerSource, testing.InnerSource);
			Assert.AreEqual(joinPredicateExpression, testing.JoinPredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestPredicateGroupJoining08()
		{
			Scalar<ObservableCollection<Item>> outerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			ObservableCollection<Item> innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> joinPredicateExpression = (i1, i2) => i1.Num == i2.Num;
			OcConsumer consumer = new OcConsumer();
			var testing = outerSourceScalar.PredicateGroupJoining<Item, Item>(
				innerSource,
				joinPredicateExpression).For(consumer);

			Assert.AreEqual(outerSourceScalar, testing.OuterSourceScalar);
			Assert.AreEqual(innerSource, testing.InnerSource);
			Assert.AreEqual(joinPredicateExpression, testing.JoinPredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestPredicateGroupJoining09()
		{
			System.Collections.Specialized.INotifyCollectionChanged outerSource = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> joinPredicateExpression = (i1, i2) => i1.Num == i2.Num;
			OcConsumer consumer = new OcConsumer();
			var testing = outerSource.PredicateGroupJoining<Item, Item>(
				innerSourceScalar,
				joinPredicateExpression).For(consumer);

			Assert.AreEqual(outerSource, testing.OuterSource);
			Assert.AreEqual(innerSourceScalar, testing.InnerSourceScalar);
			Assert.AreEqual(joinPredicateExpression, testing.JoinPredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestPredicateGroupJoining10()
		{
			System.Collections.Specialized.INotifyCollectionChanged outerSource = getItems();
			Scalar<ObservableCollection<Item>> innerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> joinPredicateExpression = (i1, i2) => i1.Num == i2.Num;
			OcConsumer consumer = new OcConsumer();
			var testing = outerSource.PredicateGroupJoining<Item, Item>(
				innerSourceScalar,
				joinPredicateExpression).For(consumer);

			Assert.AreEqual(outerSource, testing.OuterSource);
			Assert.AreEqual(innerSourceScalar, testing.InnerSourceScalar);
			Assert.AreEqual(joinPredicateExpression, testing.JoinPredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestPredicateGroupJoining11()
		{
			ObservableCollection<Item> outerSource = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> joinPredicateExpression = (i1, i2) => i1.Num == i2.Num;
			OcConsumer consumer = new OcConsumer();
			var testing = outerSource.PredicateGroupJoining<Item, Item>(
				innerSourceScalar,
				joinPredicateExpression).For(consumer);

			Assert.AreEqual(outerSource, testing.OuterSource);
			Assert.AreEqual(innerSourceScalar, testing.InnerSourceScalar);
			Assert.AreEqual(joinPredicateExpression, testing.JoinPredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestPredicateGroupJoining12()
		{
			ObservableCollection<Item> outerSource = getItems();
			Scalar<ObservableCollection<Item>> innerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> joinPredicateExpression = (i1, i2) => i1.Num == i2.Num;
			OcConsumer consumer = new OcConsumer();
			var testing = outerSource.PredicateGroupJoining<Item, Item>(
				innerSourceScalar,
				joinPredicateExpression).For(consumer);

			Assert.AreEqual(outerSource, testing.OuterSource);
			Assert.AreEqual(innerSourceScalar, testing.InnerSourceScalar);
			Assert.AreEqual(joinPredicateExpression, testing.JoinPredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestPredicateGroupJoining13()
		{
			System.Collections.Specialized.INotifyCollectionChanged outerSource = getItems();
			System.Collections.Specialized.INotifyCollectionChanged innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> joinPredicateExpression = (i1, i2) => i1.Num == i2.Num;
			OcConsumer consumer = new OcConsumer();
			var testing = outerSource.PredicateGroupJoining<Item, Item>(
				innerSource,
				joinPredicateExpression).For(consumer);

			Assert.AreEqual(outerSource, testing.OuterSource);
			Assert.AreEqual(innerSource, testing.InnerSource);
			Assert.AreEqual(joinPredicateExpression, testing.JoinPredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestPredicateGroupJoining14()
		{
			System.Collections.Specialized.INotifyCollectionChanged outerSource = getItems();
			ObservableCollection<Item> innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> joinPredicateExpression = (i1, i2) => i1.Num == i2.Num;
			OcConsumer consumer = new OcConsumer();
			var testing = outerSource.PredicateGroupJoining<Item, Item>(
				innerSource,
				joinPredicateExpression).For(consumer);

			Assert.AreEqual(outerSource, testing.OuterSource);
			Assert.AreEqual(innerSource, testing.InnerSource);
			Assert.AreEqual(joinPredicateExpression, testing.JoinPredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestPredicateGroupJoining15()
		{
			ObservableCollection<Item> outerSource = getItems();
			System.Collections.Specialized.INotifyCollectionChanged innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> joinPredicateExpression = (i1, i2) => i1.Num == i2.Num;
			OcConsumer consumer = new OcConsumer();
			var testing = outerSource.PredicateGroupJoining<Item, Item>(
				innerSource,
				joinPredicateExpression).For(consumer);

			Assert.AreEqual(outerSource, testing.OuterSource);
			Assert.AreEqual(innerSource, testing.InnerSource);
			Assert.AreEqual(joinPredicateExpression, testing.JoinPredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestPredicateGroupJoining16()
		{
			ObservableCollection<Item> outerSource = getItems();
			ObservableCollection<Item> innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> joinPredicateExpression = (i1, i2) => i1.Num == i2.Num;
			OcConsumer consumer = new OcConsumer();
			var testing = outerSource.PredicateGroupJoining<Item, Item>(
				innerSource,
				joinPredicateExpression).For(consumer);

			Assert.AreEqual(outerSource, testing.OuterSource);
			Assert.AreEqual(innerSource, testing.InnerSource);
			Assert.AreEqual(joinPredicateExpression, testing.JoinPredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		#endregion
		#region Prepending

		
		[Test, Combinatorial]
		public void TestPrepending01()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<Item> itemScalar = getScalar<Item>(new QuickTests.Item(1, true));
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Prepending<Item>(
				itemScalar).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(itemScalar, testing.ItemScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Item>)itemScalar).Touch();
			test();
			((Scalar<Item>)itemScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestPrepending02()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<Item> itemScalar = getScalar<Item>(new QuickTests.Item(1, true));
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Prepending<Item>(
				itemScalar).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(itemScalar, testing.ItemScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Item>)itemScalar).Touch();
			test();
			((Scalar<Item>)itemScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestPrepending03()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			Scalar<Item> itemScalar = getScalar<Item>(new QuickTests.Item(1, true));
			OcConsumer consumer = new OcConsumer();
			var testing = source.Prepending<Item>(
				itemScalar).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(itemScalar, testing.ItemScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Item>)itemScalar).Touch();
			test();
			((Scalar<Item>)itemScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestPrepending04()
		{
			ObservableCollection<Item> source = getItems();
			Scalar<Item> itemScalar = getScalar<Item>(new QuickTests.Item(1, true));
			OcConsumer consumer = new OcConsumer();
			var testing = source.Prepending<Item>(
				itemScalar).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(itemScalar, testing.ItemScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Item>)itemScalar).Touch();
			test();
			((Scalar<Item>)itemScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestPrepending05()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			Item item = new QuickTests.Item(1, true);
			OcConsumer consumer = new OcConsumer();
			var testing = source.Prepending<Item>(
				item).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(item, testing.Item);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestPrepending06()
		{
			ObservableCollection<Item> source = getItems();
			Item item = new QuickTests.Item(1, true);
			OcConsumer consumer = new OcConsumer();
			var testing = source.Prepending<Item>(
				item).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(item, testing.Item);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestPrepending07()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Item item = new QuickTests.Item(1, true);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Prepending<Item>(
				item).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(item, testing.Item);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestPrepending08()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Item item = new QuickTests.Item(1, true);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Prepending<Item>(
				item).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(item, testing.Item);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		#endregion
		#region Reversing

		
		[Test, Combinatorial]
		public void TestReversing01()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Reversing<Item>().For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestReversing02()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Reversing<Item>().For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestReversing03()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source.Reversing<Item>().For(consumer);

			Assert.AreEqual(source, testing.Source);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestReversing04()
		{
			ObservableCollection<Item> source = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source.Reversing<Item>().For(consumer);

			Assert.AreEqual(source, testing.Source);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		#endregion
		#region ScalarPausing

		
		[Test, Combinatorial]
		public void TestScalarPausing01(
			[Values(false, true)] bool initialIsPaused,
			[Values(1, 1)] int? lastChangesToApplyOnResumeCount)
		{
			Scalar<int> scalar = getScalar<int>(0);
			OcConsumer consumer = new OcConsumer();
			var testing = scalar.ScalarPausing<int>(
				initialIsPaused,
				lastChangesToApplyOnResumeCount).For(consumer);

			Assert.AreEqual(scalar, testing.Scalar);
			Assert.AreEqual(initialIsPaused, testing.InitialIsPaused);
			Assert.AreEqual(lastChangesToApplyOnResumeCount, testing.LastChangesToApplyOnResumeCount);

			void test()
			{
				testing.ValidateConsistency();

				IList listSource;
				((Scalar<int>)scalar).Change(1);
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestScalarPausing02(
			[Values(false, true)] bool initialIsPaused)
		{
			Scalar<int> scalar = getScalar<int>(0);
			OcConsumer consumer = new OcConsumer();
			var testing = scalar.ScalarPausing<int>(
				initialIsPaused).For(consumer);

			Assert.AreEqual(scalar, testing.Scalar);
			Assert.AreEqual(initialIsPaused, testing.InitialIsPaused);

			void test()
			{
				testing.ValidateConsistency();

				IList listSource;
				((Scalar<int>)scalar).Change(1);
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestScalarPausing03(
			[Values(1, 1)] int? lastChangesToApplyOnResumeCount)
		{
			Scalar<int> scalar = getScalar<int>(0);
			OcConsumer consumer = new OcConsumer();
			var testing = scalar.ScalarPausing<int>(
				lastChangesToApplyOnResumeCount).For(consumer);

			Assert.AreEqual(scalar, testing.Scalar);
			Assert.AreEqual(lastChangesToApplyOnResumeCount, testing.LastChangesToApplyOnResumeCount);

			void test()
			{
				testing.ValidateConsistency();

				IList listSource;
				((Scalar<int>)scalar).Change(1);
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestScalarPausing04()
		{
			Scalar<int> scalar = getScalar<int>(0);
			OcConsumer consumer = new OcConsumer();
			var testing = scalar.ScalarPausing<int>().For(consumer);

			Assert.AreEqual(scalar, testing.Scalar);

			void test()
			{
				testing.ValidateConsistency();

				IList listSource;
				((Scalar<int>)scalar).Change(1);
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestScalarPausing05(
			[Values(1, 1)] int? lastChangesToApplyOnResumeCount)
		{
			Scalar<int> scalar = getScalar<int>(0);
			Scalar<bool> isPausedScalar = getScalar<bool>(true);
			OcConsumer consumer = new OcConsumer();
			var testing = scalar.ScalarPausing<int>(
				isPausedScalar,
				lastChangesToApplyOnResumeCount).For(consumer);

			Assert.AreEqual(scalar, testing.Scalar);
			Assert.AreEqual(isPausedScalar, testing.IsPausedScalar);
			Assert.AreEqual(lastChangesToApplyOnResumeCount, testing.LastChangesToApplyOnResumeCount);

			void test()
			{
				testing.ValidateConsistency();

				IList listSource;
				((Scalar<int>)scalar).Change(1);
			}

			test();

			((Scalar<bool>)isPausedScalar).Touch();
			test();
			((Scalar<bool>)isPausedScalar).Change(false);
			test();
			((Scalar<bool>)isPausedScalar).Change(true);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestScalarPausing06()
		{
			Scalar<int> scalar = getScalar<int>(0);
			Scalar<bool> isPausedScalar = getScalar<bool>(true);
			OcConsumer consumer = new OcConsumer();
			var testing = scalar.ScalarPausing<int>(
				isPausedScalar).For(consumer);

			Assert.AreEqual(scalar, testing.Scalar);
			Assert.AreEqual(isPausedScalar, testing.IsPausedScalar);

			void test()
			{
				testing.ValidateConsistency();

				IList listSource;
				((Scalar<int>)scalar).Change(1);
			}

			test();

			((Scalar<bool>)isPausedScalar).Touch();
			test();
			((Scalar<bool>)isPausedScalar).Change(false);
			test();
			((Scalar<bool>)isPausedScalar).Change(true);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestScalarPausing07()
		{
			Scalar<int> scalar = getScalar<int>(0);
			Scalar<bool> isPausedScalar = getScalar<bool>(true);
			Scalar<int?> lastChangesToApplyOnResumeCountScalar = getScalar<int?>(null);
			OcConsumer consumer = new OcConsumer();
			var testing = scalar.ScalarPausing<int>(
				isPausedScalar,
				lastChangesToApplyOnResumeCountScalar).For(consumer);

			Assert.AreEqual(scalar, testing.Scalar);
			Assert.AreEqual(isPausedScalar, testing.IsPausedScalar);
			Assert.AreEqual(lastChangesToApplyOnResumeCountScalar, testing.LastChangesToApplyOnResumeCountScalar);

			void test()
			{
				testing.ValidateConsistency();

				IList listSource;
				((Scalar<int>)scalar).Change(1);
			}

			test();

			((Scalar<bool>)isPausedScalar).Touch();
			test();
			((Scalar<bool>)isPausedScalar).Change(false);
			test();
			((Scalar<bool>)isPausedScalar).Change(true);
			test();

			((Scalar<int?>)lastChangesToApplyOnResumeCountScalar).Touch();
			test();
			((Scalar<int?>)lastChangesToApplyOnResumeCountScalar).Change(1);
			test();
			((Scalar<int?>)lastChangesToApplyOnResumeCountScalar).Change(1);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestScalarPausing08(
			[Values(false, true)] bool initialIsPaused)
		{
			Scalar<int> scalar = getScalar<int>(0);
			Scalar<int?> lastChangesToApplyOnResumeCountScalar = getScalar<int?>(null);
			OcConsumer consumer = new OcConsumer();
			var testing = scalar.ScalarPausing<int>(
				initialIsPaused,
				lastChangesToApplyOnResumeCountScalar).For(consumer);

			Assert.AreEqual(scalar, testing.Scalar);
			Assert.AreEqual(initialIsPaused, testing.InitialIsPaused);
			Assert.AreEqual(lastChangesToApplyOnResumeCountScalar, testing.LastChangesToApplyOnResumeCountScalar);

			void test()
			{
				testing.ValidateConsistency();

				IList listSource;
				((Scalar<int>)scalar).Change(1);
			}

			test();

			((Scalar<int?>)lastChangesToApplyOnResumeCountScalar).Touch();
			test();
			((Scalar<int?>)lastChangesToApplyOnResumeCountScalar).Change(1);
			test();
			((Scalar<int?>)lastChangesToApplyOnResumeCountScalar).Change(1);
			test();
			consumer.Dispose();
		}
		#endregion
		#region Selecting

		
		[Test, Combinatorial]
		public void TestSelecting01()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, object>> selectorExpression = i => i.Num;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Selecting<Item, object>(
				selectorExpression).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(selectorExpression, testing.SelectorExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestSelecting02()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, object>> selectorExpression = i => i.Num;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Selecting<Item, object>(
				selectorExpression).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(selectorExpression, testing.SelectorExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestSelecting03()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, object>> selectorExpression = i => i.Num;
			OcConsumer consumer = new OcConsumer();
			var testing = source.Selecting<Item, object>(
				selectorExpression).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(selectorExpression, testing.SelectorExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestSelecting04()
		{
			ObservableCollection<Item> source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, object>> selectorExpression = i => i.Num;
			OcConsumer consumer = new OcConsumer();
			var testing = source.Selecting<Item, object>(
				selectorExpression).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(selectorExpression, testing.SelectorExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		#endregion
		#region SelectingMany

		
		[Test, Combinatorial]
		public void TestSelectingMany01()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, System.Collections.Specialized.INotifyCollectionChanged>> selectorExpression = i => i.Items;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.SelectingMany<Item, object>(
				selectorExpression).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(selectorExpression, testing.SelectorExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestSelectingMany02()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, System.Collections.Specialized.INotifyCollectionChanged>> selectorExpression = i => i.Items;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.SelectingMany<Item, object>(
				selectorExpression).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(selectorExpression, testing.SelectorExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestSelectingMany03()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, System.Collections.Specialized.INotifyCollectionChanged>> selectorExpression = i => i.Items;
			OcConsumer consumer = new OcConsumer();
			var testing = source.SelectingMany<Item, object>(
				selectorExpression).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(selectorExpression, testing.SelectorExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestSelectingMany04()
		{
			ObservableCollection<Item> source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, System.Collections.Specialized.INotifyCollectionChanged>> selectorExpression = i => i.Items;
			OcConsumer consumer = new OcConsumer();
			var testing = source.SelectingMany<Item, object>(
				selectorExpression).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(selectorExpression, testing.SelectorExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestSelectingMany05()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int, System.Collections.Specialized.INotifyCollectionChanged>> selectorWithIndexExpression = (i, ind) => i.Items;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.SelectingMany<Item, object>(
				selectorWithIndexExpression).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(selectorWithIndexExpression, testing.SelectorWithIndexExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestSelectingMany06()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int, System.Collections.Specialized.INotifyCollectionChanged>> selectorWithIndexExpression = (i, ind) => i.Items;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.SelectingMany<Item, object>(
				selectorWithIndexExpression).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(selectorWithIndexExpression, testing.SelectorWithIndexExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestSelectingMany07()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int, System.Collections.Specialized.INotifyCollectionChanged>> selectorWithIndexExpression = (i, ind) => i.Items;
			OcConsumer consumer = new OcConsumer();
			var testing = source.SelectingMany<Item, object>(
				selectorWithIndexExpression).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(selectorWithIndexExpression, testing.SelectorWithIndexExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestSelectingMany08()
		{
			ObservableCollection<Item> source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int, System.Collections.Specialized.INotifyCollectionChanged>> selectorWithIndexExpression = (i, ind) => i.Items;
			OcConsumer consumer = new OcConsumer();
			var testing = source.SelectingMany<Item, object>(
				selectorWithIndexExpression).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(selectorWithIndexExpression, testing.SelectorWithIndexExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		#endregion
		#region SequenceComputing

		
		[Test, Combinatorial]
		public void TestSequenceComputing01()
		{
			Scalar<int> countScalar = getScalar<int>(3);
			OcConsumer consumer = new OcConsumer();
			var testing = countScalar.SequenceComputing().For(consumer);

			Assert.AreEqual(countScalar, testing.CountScalar);

			void test()
			{
				testing.ValidateConsistency();

				IList listSource;
				((Scalar<int>)countScalar).Change(4);
			}

			test();
			consumer.Dispose();
		}
		#endregion
		#region Skipping

		
		[Test, Combinatorial]
		public void TestSkipping01(
			[Values(1)] int initialCapacity)
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<int> skippingCountScalar = getScalar<int>(0);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Skipping<Item>(
				skippingCountScalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(skippingCountScalar, testing.SkippingCountScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)skippingCountScalar).Touch();
			test();
			((Scalar<int>)skippingCountScalar).Change(1);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestSkipping02()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<int> skippingCountScalar = getScalar<int>(0);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Skipping<Item>(
				skippingCountScalar).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(skippingCountScalar, testing.SkippingCountScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)skippingCountScalar).Touch();
			test();
			((Scalar<int>)skippingCountScalar).Change(1);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestSkipping03(
			[Values(1)] int initialCapacity)
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<int> skippingCountScalar = getScalar<int>(0);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Skipping<Item>(
				skippingCountScalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(skippingCountScalar, testing.SkippingCountScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)skippingCountScalar).Touch();
			test();
			((Scalar<int>)skippingCountScalar).Change(1);
			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestSkipping04()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<int> skippingCountScalar = getScalar<int>(0);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Skipping<Item>(
				skippingCountScalar).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(skippingCountScalar, testing.SkippingCountScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)skippingCountScalar).Touch();
			test();
			((Scalar<int>)skippingCountScalar).Change(1);
			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestSkipping05(
			[Values(1)] int initialCapacity)
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			Scalar<int> skippingCountScalar = getScalar<int>(0);
			OcConsumer consumer = new OcConsumer();
			var testing = source.Skipping<Item>(
				skippingCountScalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(skippingCountScalar, testing.SkippingCountScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)skippingCountScalar).Touch();
			test();
			((Scalar<int>)skippingCountScalar).Change(1);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestSkipping06()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			Scalar<int> skippingCountScalar = getScalar<int>(0);
			OcConsumer consumer = new OcConsumer();
			var testing = source.Skipping<Item>(
				skippingCountScalar).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(skippingCountScalar, testing.SkippingCountScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)skippingCountScalar).Touch();
			test();
			((Scalar<int>)skippingCountScalar).Change(1);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestSkipping07(
			[Values(1)] int initialCapacity)
		{
			ObservableCollection<Item> source = getItems();
			Scalar<int> skippingCountScalar = getScalar<int>(0);
			OcConsumer consumer = new OcConsumer();
			var testing = source.Skipping<Item>(
				skippingCountScalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(skippingCountScalar, testing.SkippingCountScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)skippingCountScalar).Touch();
			test();
			((Scalar<int>)skippingCountScalar).Change(1);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestSkipping08()
		{
			ObservableCollection<Item> source = getItems();
			Scalar<int> skippingCountScalar = getScalar<int>(0);
			OcConsumer consumer = new OcConsumer();
			var testing = source.Skipping<Item>(
				skippingCountScalar).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(skippingCountScalar, testing.SkippingCountScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)skippingCountScalar).Touch();
			test();
			((Scalar<int>)skippingCountScalar).Change(1);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestSkipping09(
			[Values(1)] int skippingCount,
			[Values(1)] int initialCapacity)
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Skipping<Item>(
				skippingCount,
				initialCapacity).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(skippingCount, testing.SkippingCount);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestSkipping10(
			[Values(1)] int skippingCount)
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Skipping<Item>(
				skippingCount).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(skippingCount, testing.SkippingCount);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestSkipping11(
			[Values(1)] int skippingCount,
			[Values(1)] int initialCapacity)
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Skipping<Item>(
				skippingCount,
				initialCapacity).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(skippingCount, testing.SkippingCount);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestSkipping12(
			[Values(1)] int skippingCount)
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Skipping<Item>(
				skippingCount).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(skippingCount, testing.SkippingCount);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestSkipping13(
			[Values(1)] int skippingCount,
			[Values(1)] int initialCapacity)
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source.Skipping<Item>(
				skippingCount,
				initialCapacity).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(skippingCount, testing.SkippingCount);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestSkipping14(
			[Values(1)] int skippingCount)
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source.Skipping<Item>(
				skippingCount).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(skippingCount, testing.SkippingCount);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestSkipping15(
			[Values(1)] int skippingCount,
			[Values(1)] int initialCapacity)
		{
			ObservableCollection<Item> source = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source.Skipping<Item>(
				skippingCount,
				initialCapacity).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(skippingCount, testing.SkippingCount);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestSkipping16(
			[Values(1)] int skippingCount)
		{
			ObservableCollection<Item> source = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source.Skipping<Item>(
				skippingCount).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(skippingCount, testing.SkippingCount);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		#endregion
		#region SkippingWhile

		
		[Test, Combinatorial]
		public void TestSkippingWhile01(
			[Values(1)] int initialCapacity)
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int, bool>> indexedPredicateExpression = (i, ind) => i.Active;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.SkippingWhile<Item>(
				indexedPredicateExpression,
				initialCapacity).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(indexedPredicateExpression, testing.IndexedPredicateExpression);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestSkippingWhile02()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int, bool>> indexedPredicateExpression = (i, ind) => i.Active;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.SkippingWhile<Item>(
				indexedPredicateExpression).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(indexedPredicateExpression, testing.IndexedPredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestSkippingWhile03(
			[Values(1)] int initialCapacity)
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int, bool>> indexedPredicateExpression = (i, ind) => i.Active;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.SkippingWhile<Item>(
				indexedPredicateExpression,
				initialCapacity).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(indexedPredicateExpression, testing.IndexedPredicateExpression);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestSkippingWhile04()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int, bool>> indexedPredicateExpression = (i, ind) => i.Active;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.SkippingWhile<Item>(
				indexedPredicateExpression).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(indexedPredicateExpression, testing.IndexedPredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestSkippingWhile05(
			[Values(1)] int initialCapacity)
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int, bool>> indexedPredicateExpression = (i, ind) => i.Active;
			OcConsumer consumer = new OcConsumer();
			var testing = source.SkippingWhile<Item>(
				indexedPredicateExpression,
				initialCapacity).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(indexedPredicateExpression, testing.IndexedPredicateExpression);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestSkippingWhile06()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int, bool>> indexedPredicateExpression = (i, ind) => i.Active;
			OcConsumer consumer = new OcConsumer();
			var testing = source.SkippingWhile<Item>(
				indexedPredicateExpression).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(indexedPredicateExpression, testing.IndexedPredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestSkippingWhile07(
			[Values(1)] int initialCapacity)
		{
			ObservableCollection<Item> source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int, bool>> indexedPredicateExpression = (i, ind) => i.Active;
			OcConsumer consumer = new OcConsumer();
			var testing = source.SkippingWhile<Item>(
				indexedPredicateExpression,
				initialCapacity).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(indexedPredicateExpression, testing.IndexedPredicateExpression);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestSkippingWhile08()
		{
			ObservableCollection<Item> source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int, bool>> indexedPredicateExpression = (i, ind) => i.Active;
			OcConsumer consumer = new OcConsumer();
			var testing = source.SkippingWhile<Item>(
				indexedPredicateExpression).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(indexedPredicateExpression, testing.IndexedPredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestSkippingWhile09(
			[Values(1)] int initialCapacity)
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.SkippingWhile<Item>(
				predicateExpression,
				initialCapacity).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(predicateExpression, testing.PredicateExpression);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestSkippingWhile10()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.SkippingWhile<Item>(
				predicateExpression).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(predicateExpression, testing.PredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestSkippingWhile11(
			[Values(1)] int initialCapacity)
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.SkippingWhile<Item>(
				predicateExpression,
				initialCapacity).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(predicateExpression, testing.PredicateExpression);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestSkippingWhile12()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.SkippingWhile<Item>(
				predicateExpression).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(predicateExpression, testing.PredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestSkippingWhile13(
			[Values(1)] int initialCapacity)
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			OcConsumer consumer = new OcConsumer();
			var testing = source.SkippingWhile<Item>(
				predicateExpression,
				initialCapacity).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(predicateExpression, testing.PredicateExpression);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestSkippingWhile14()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			OcConsumer consumer = new OcConsumer();
			var testing = source.SkippingWhile<Item>(
				predicateExpression).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(predicateExpression, testing.PredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestSkippingWhile15(
			[Values(1)] int initialCapacity)
		{
			ObservableCollection<Item> source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			OcConsumer consumer = new OcConsumer();
			var testing = source.SkippingWhile<Item>(
				predicateExpression,
				initialCapacity).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(predicateExpression, testing.PredicateExpression);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestSkippingWhile16()
		{
			ObservableCollection<Item> source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			OcConsumer consumer = new OcConsumer();
			var testing = source.SkippingWhile<Item>(
				predicateExpression).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(predicateExpression, testing.PredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		#endregion
		#region StringsConcatenating

		
		[Test, Combinatorial]
		public void TestStringsConcatenating01()
		{
			IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<Selecting<Item, string>>(getItems().Selecting(i => i.Num.ToString()));
			Scalar<string> separatorScalar = getScalar<string>("&");
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.StringsConcatenating(
				separatorScalar).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(separatorScalar, testing.SeparatorScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, string>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, string>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				((Scalar<Selecting<Item, string>>)sourceScalar).Change(null);
			}

			test();

			((Scalar<string>)separatorScalar).Touch();
			test();
			((Scalar<string>)separatorScalar).Change("&&&");
			test();
			((Scalar<string>)separatorScalar).Change("&&");
			test();

			((Scalar<Selecting<Item, string>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, string>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestStringsConcatenating02()
		{
			IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<Selecting<Item, string>>(getItems().Selecting(i => i.Num.ToString()));
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.StringsConcatenating().For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, string>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, string>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				((Scalar<Selecting<Item, string>>)sourceScalar).Change(null);
			}

			test();

			((Scalar<Selecting<Item, string>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, string>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestStringsConcatenating03()
		{
			Selecting<Item, string> source = getItems().Selecting(i => i.Num.ToString());
			Scalar<string> separatorScalar = getScalar<string>("&");
			OcConsumer consumer = new OcConsumer();
			var testing = source.StringsConcatenating(
				separatorScalar).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(separatorScalar, testing.SeparatorScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, string>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, string>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<string>)separatorScalar).Touch();
			test();
			((Scalar<string>)separatorScalar).Change("&&&");
			test();
			((Scalar<string>)separatorScalar).Change("&&");
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestStringsConcatenating04()
		{
			Selecting<Item, string> source = getItems().Selecting(i => i.Num.ToString());
			OcConsumer consumer = new OcConsumer();
			var testing = source.StringsConcatenating().For(consumer);

			Assert.AreEqual(source, testing.Source);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, string>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, string>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestStringsConcatenating05()
		{
			Selecting<Item, string> source = getItems().Selecting(i => i.Num.ToString());
			string separator = "&";
			OcConsumer consumer = new OcConsumer();
			var testing = source.StringsConcatenating(
				separator).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(separator, testing.Separator);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, string>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, string>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestStringsConcatenating06()
		{
			IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<Selecting<Item, string>>(getItems().Selecting(i => i.Num.ToString()));
			string separator = "&";
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.StringsConcatenating(
				separator).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(separator, testing.Separator);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, string>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, string>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				((Scalar<Selecting<Item, string>>)sourceScalar).Change(null);
			}

			test();

			((Scalar<Selecting<Item, string>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, string>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		#endregion
		#region Summarizing

		
		[Test, Combinatorial]
		public void TestSummarizing01()
		{
			IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Summarizing<int>().For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			}

			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestSummarizing02()
		{
			IReadScalar<ObservableCollection<int>> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Summarizing<int>().For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			}

			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestSummarizing03()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			OcConsumer consumer = new OcConsumer();
			var testing = source.Summarizing<int>().For(consumer);

			Assert.AreEqual(source, testing.Source);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestSummarizing04()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			OcConsumer consumer = new OcConsumer();
			var testing = source.Summarizing<int>().For(consumer);

			Assert.AreEqual(source, testing.Source);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		#endregion
		#region Taking

		
		[Test, Combinatorial]
		public void TestTaking01(
			[Values(1)] int initialCapacity)
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<int> startIndexScalar = getScalar<int>(0);
			Scalar<int> countScalar = getScalar<int>(3);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Taking<Item>(
				startIndexScalar,
				countScalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(startIndexScalar, testing.StartIndexScalar);
			Assert.AreEqual(countScalar, testing.CountScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)startIndexScalar).Touch();
			test();
			((Scalar<int>)startIndexScalar).Change(1);
			test();

			((Scalar<int>)countScalar).Touch();
			test();
			((Scalar<int>)countScalar).Change(4);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestTaking02()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<int> startIndexScalar = getScalar<int>(0);
			Scalar<int> countScalar = getScalar<int>(3);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Taking<Item>(
				startIndexScalar,
				countScalar).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(startIndexScalar, testing.StartIndexScalar);
			Assert.AreEqual(countScalar, testing.CountScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)startIndexScalar).Touch();
			test();
			((Scalar<int>)startIndexScalar).Change(1);
			test();

			((Scalar<int>)countScalar).Touch();
			test();
			((Scalar<int>)countScalar).Change(4);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestTaking03(
			[Values(1)] int initialCapacity)
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<int> startIndexScalar = getScalar<int>(0);
			Scalar<int> countScalar = getScalar<int>(3);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Taking<Item>(
				startIndexScalar,
				countScalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(startIndexScalar, testing.StartIndexScalar);
			Assert.AreEqual(countScalar, testing.CountScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)startIndexScalar).Touch();
			test();
			((Scalar<int>)startIndexScalar).Change(1);
			test();

			((Scalar<int>)countScalar).Touch();
			test();
			((Scalar<int>)countScalar).Change(4);
			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestTaking04()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<int> startIndexScalar = getScalar<int>(0);
			Scalar<int> countScalar = getScalar<int>(3);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Taking<Item>(
				startIndexScalar,
				countScalar).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(startIndexScalar, testing.StartIndexScalar);
			Assert.AreEqual(countScalar, testing.CountScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)startIndexScalar).Touch();
			test();
			((Scalar<int>)startIndexScalar).Change(1);
			test();

			((Scalar<int>)countScalar).Touch();
			test();
			((Scalar<int>)countScalar).Change(4);
			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestTaking05(
			[Values(4)] int count)
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<int> startIndexScalar = getScalar<int>(0);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Taking<Item>(
				startIndexScalar,
				count).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(startIndexScalar, testing.StartIndexScalar);
			Assert.AreEqual(count, testing.Count);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)startIndexScalar).Touch();
			test();
			((Scalar<int>)startIndexScalar).Change(1);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestTaking06(
			[Values(4)] int count)
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<int> startIndexScalar = getScalar<int>(0);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Taking<Item>(
				startIndexScalar,
				count).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(startIndexScalar, testing.StartIndexScalar);
			Assert.AreEqual(count, testing.Count);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)startIndexScalar).Touch();
			test();
			((Scalar<int>)startIndexScalar).Change(1);
			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestTaking07(
			[Values(1)] int startIndex,
			[Values(1)] int initialCapacity)
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<int> countScalar = getScalar<int>(3);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Taking<Item>(
				startIndex,
				countScalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(startIndex, testing.StartIndex);
			Assert.AreEqual(countScalar, testing.CountScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)countScalar).Touch();
			test();
			((Scalar<int>)countScalar).Change(4);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestTaking08(
			[Values(1)] int startIndex)
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<int> countScalar = getScalar<int>(3);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Taking<Item>(
				startIndex,
				countScalar).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(startIndex, testing.StartIndex);
			Assert.AreEqual(countScalar, testing.CountScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)countScalar).Touch();
			test();
			((Scalar<int>)countScalar).Change(4);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestTaking09(
			[Values(1)] int startIndex,
			[Values(1)] int initialCapacity)
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<int> countScalar = getScalar<int>(3);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Taking<Item>(
				startIndex,
				countScalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(startIndex, testing.StartIndex);
			Assert.AreEqual(countScalar, testing.CountScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)countScalar).Touch();
			test();
			((Scalar<int>)countScalar).Change(4);
			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestTaking10(
			[Values(1)] int startIndex)
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<int> countScalar = getScalar<int>(3);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Taking<Item>(
				startIndex,
				countScalar).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(startIndex, testing.StartIndex);
			Assert.AreEqual(countScalar, testing.CountScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)countScalar).Touch();
			test();
			((Scalar<int>)countScalar).Change(4);
			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestTaking11(
			[Values(1)] int startIndex,
			[Values(4)] int count)
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Taking<Item>(
				startIndex,
				count).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(startIndex, testing.StartIndex);
			Assert.AreEqual(count, testing.Count);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestTaking12(
			[Values(1)] int startIndex,
			[Values(4)] int count)
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Taking<Item>(
				startIndex,
				count).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(startIndex, testing.StartIndex);
			Assert.AreEqual(count, testing.Count);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestTaking13(
			[Values(1)] int initialCapacity)
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			Scalar<int> startIndexScalar = getScalar<int>(0);
			Scalar<int> countScalar = getScalar<int>(3);
			OcConsumer consumer = new OcConsumer();
			var testing = source.Taking<Item>(
				startIndexScalar,
				countScalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(startIndexScalar, testing.StartIndexScalar);
			Assert.AreEqual(countScalar, testing.CountScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)startIndexScalar).Touch();
			test();
			((Scalar<int>)startIndexScalar).Change(1);
			test();

			((Scalar<int>)countScalar).Touch();
			test();
			((Scalar<int>)countScalar).Change(4);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestTaking14()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			Scalar<int> startIndexScalar = getScalar<int>(0);
			Scalar<int> countScalar = getScalar<int>(3);
			OcConsumer consumer = new OcConsumer();
			var testing = source.Taking<Item>(
				startIndexScalar,
				countScalar).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(startIndexScalar, testing.StartIndexScalar);
			Assert.AreEqual(countScalar, testing.CountScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)startIndexScalar).Touch();
			test();
			((Scalar<int>)startIndexScalar).Change(1);
			test();

			((Scalar<int>)countScalar).Touch();
			test();
			((Scalar<int>)countScalar).Change(4);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestTaking15(
			[Values(1)] int initialCapacity)
		{
			ObservableCollection<Item> source = getItems();
			Scalar<int> startIndexScalar = getScalar<int>(0);
			Scalar<int> countScalar = getScalar<int>(3);
			OcConsumer consumer = new OcConsumer();
			var testing = source.Taking<Item>(
				startIndexScalar,
				countScalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(startIndexScalar, testing.StartIndexScalar);
			Assert.AreEqual(countScalar, testing.CountScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)startIndexScalar).Touch();
			test();
			((Scalar<int>)startIndexScalar).Change(1);
			test();

			((Scalar<int>)countScalar).Touch();
			test();
			((Scalar<int>)countScalar).Change(4);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestTaking16()
		{
			ObservableCollection<Item> source = getItems();
			Scalar<int> startIndexScalar = getScalar<int>(0);
			Scalar<int> countScalar = getScalar<int>(3);
			OcConsumer consumer = new OcConsumer();
			var testing = source.Taking<Item>(
				startIndexScalar,
				countScalar).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(startIndexScalar, testing.StartIndexScalar);
			Assert.AreEqual(countScalar, testing.CountScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)startIndexScalar).Touch();
			test();
			((Scalar<int>)startIndexScalar).Change(1);
			test();

			((Scalar<int>)countScalar).Touch();
			test();
			((Scalar<int>)countScalar).Change(4);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestTaking17(
			[Values(4)] int count)
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			Scalar<int> startIndexScalar = getScalar<int>(0);
			OcConsumer consumer = new OcConsumer();
			var testing = source.Taking<Item>(
				startIndexScalar,
				count).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(startIndexScalar, testing.StartIndexScalar);
			Assert.AreEqual(count, testing.Count);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)startIndexScalar).Touch();
			test();
			((Scalar<int>)startIndexScalar).Change(1);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestTaking18(
			[Values(4)] int count)
		{
			ObservableCollection<Item> source = getItems();
			Scalar<int> startIndexScalar = getScalar<int>(0);
			OcConsumer consumer = new OcConsumer();
			var testing = source.Taking<Item>(
				startIndexScalar,
				count).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(startIndexScalar, testing.StartIndexScalar);
			Assert.AreEqual(count, testing.Count);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)startIndexScalar).Touch();
			test();
			((Scalar<int>)startIndexScalar).Change(1);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestTaking19(
			[Values(1)] int startIndex,
			[Values(1)] int initialCapacity)
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			Scalar<int> countScalar = getScalar<int>(3);
			OcConsumer consumer = new OcConsumer();
			var testing = source.Taking<Item>(
				startIndex,
				countScalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(startIndex, testing.StartIndex);
			Assert.AreEqual(countScalar, testing.CountScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)countScalar).Touch();
			test();
			((Scalar<int>)countScalar).Change(4);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestTaking20(
			[Values(1)] int startIndex)
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			Scalar<int> countScalar = getScalar<int>(3);
			OcConsumer consumer = new OcConsumer();
			var testing = source.Taking<Item>(
				startIndex,
				countScalar).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(startIndex, testing.StartIndex);
			Assert.AreEqual(countScalar, testing.CountScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)countScalar).Touch();
			test();
			((Scalar<int>)countScalar).Change(4);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestTaking21(
			[Values(1)] int startIndex,
			[Values(1)] int initialCapacity)
		{
			ObservableCollection<Item> source = getItems();
			Scalar<int> countScalar = getScalar<int>(3);
			OcConsumer consumer = new OcConsumer();
			var testing = source.Taking<Item>(
				startIndex,
				countScalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(startIndex, testing.StartIndex);
			Assert.AreEqual(countScalar, testing.CountScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)countScalar).Touch();
			test();
			((Scalar<int>)countScalar).Change(4);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestTaking22(
			[Values(1)] int startIndex)
		{
			ObservableCollection<Item> source = getItems();
			Scalar<int> countScalar = getScalar<int>(3);
			OcConsumer consumer = new OcConsumer();
			var testing = source.Taking<Item>(
				startIndex,
				countScalar).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(startIndex, testing.StartIndex);
			Assert.AreEqual(countScalar, testing.CountScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)countScalar).Touch();
			test();
			((Scalar<int>)countScalar).Change(4);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestTaking23(
			[Values(1)] int startIndex,
			[Values(4)] int count)
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source.Taking<Item>(
				startIndex,
				count).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(startIndex, testing.StartIndex);
			Assert.AreEqual(count, testing.Count);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestTaking24(
			[Values(1)] int startIndex,
			[Values(4)] int count)
		{
			ObservableCollection<Item> source = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source.Taking<Item>(
				startIndex,
				count).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(startIndex, testing.StartIndex);
			Assert.AreEqual(count, testing.Count);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		#endregion
		#region TakingWhile

		
		[Test, Combinatorial]
		public void TestTakingWhile01(
			[Values(1)] int initialCapacity)
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int, bool>> indexedPredicateExpression = (i, ind) => i.Active;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.TakingWhile<Item>(
				indexedPredicateExpression,
				initialCapacity).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(indexedPredicateExpression, testing.IndexedPredicateExpression);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestTakingWhile02()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int, bool>> indexedPredicateExpression = (i, ind) => i.Active;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.TakingWhile<Item>(
				indexedPredicateExpression).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(indexedPredicateExpression, testing.IndexedPredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestTakingWhile03(
			[Values(1)] int initialCapacity)
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int, bool>> indexedPredicateExpression = (i, ind) => i.Active;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.TakingWhile<Item>(
				indexedPredicateExpression,
				initialCapacity).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(indexedPredicateExpression, testing.IndexedPredicateExpression);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestTakingWhile04()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int, bool>> indexedPredicateExpression = (i, ind) => i.Active;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.TakingWhile<Item>(
				indexedPredicateExpression).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(indexedPredicateExpression, testing.IndexedPredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestTakingWhile05(
			[Values(1)] int initialCapacity)
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int, bool>> indexedPredicateExpression = (i, ind) => i.Active;
			OcConsumer consumer = new OcConsumer();
			var testing = source.TakingWhile<Item>(
				indexedPredicateExpression,
				initialCapacity).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(indexedPredicateExpression, testing.IndexedPredicateExpression);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestTakingWhile06()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int, bool>> indexedPredicateExpression = (i, ind) => i.Active;
			OcConsumer consumer = new OcConsumer();
			var testing = source.TakingWhile<Item>(
				indexedPredicateExpression).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(indexedPredicateExpression, testing.IndexedPredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestTakingWhile07(
			[Values(1)] int initialCapacity)
		{
			ObservableCollection<Item> source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int, bool>> indexedPredicateExpression = (i, ind) => i.Active;
			OcConsumer consumer = new OcConsumer();
			var testing = source.TakingWhile<Item>(
				indexedPredicateExpression,
				initialCapacity).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(indexedPredicateExpression, testing.IndexedPredicateExpression);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestTakingWhile08()
		{
			ObservableCollection<Item> source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int, bool>> indexedPredicateExpression = (i, ind) => i.Active;
			OcConsumer consumer = new OcConsumer();
			var testing = source.TakingWhile<Item>(
				indexedPredicateExpression).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(indexedPredicateExpression, testing.IndexedPredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestTakingWhile09(
			[Values(1)] int initialCapacity)
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.TakingWhile<Item>(
				predicateExpression,
				initialCapacity).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(predicateExpression, testing.PredicateExpression);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestTakingWhile10()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.TakingWhile<Item>(
				predicateExpression).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(predicateExpression, testing.PredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestTakingWhile11(
			[Values(1)] int initialCapacity)
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.TakingWhile<Item>(
				predicateExpression,
				initialCapacity).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(predicateExpression, testing.PredicateExpression);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestTakingWhile12()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.TakingWhile<Item>(
				predicateExpression).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(predicateExpression, testing.PredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestTakingWhile13(
			[Values(1)] int initialCapacity)
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			OcConsumer consumer = new OcConsumer();
			var testing = source.TakingWhile<Item>(
				predicateExpression,
				initialCapacity).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(predicateExpression, testing.PredicateExpression);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestTakingWhile14()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			OcConsumer consumer = new OcConsumer();
			var testing = source.TakingWhile<Item>(
				predicateExpression).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(predicateExpression, testing.PredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestTakingWhile15(
			[Values(1)] int initialCapacity)
		{
			ObservableCollection<Item> source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			OcConsumer consumer = new OcConsumer();
			var testing = source.TakingWhile<Item>(
				predicateExpression,
				initialCapacity).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(predicateExpression, testing.PredicateExpression);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestTakingWhile16()
		{
			ObservableCollection<Item> source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			OcConsumer consumer = new OcConsumer();
			var testing = source.TakingWhile<Item>(
				predicateExpression).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(predicateExpression, testing.PredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		#endregion
		#region ThenOrdering

		
		[Test, Combinatorial]
		public void TestThenOrdering01()
		{
			ObservableComputations.IOrdering<int> source = getItems().Selecting(i => i.Num).Ordering(i => i);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			Scalar<System.ComponentModel.ListSortDirection> sortDirectionScalar = getScalar<System.ComponentModel.ListSortDirection>(System.ComponentModel.ListSortDirection.Ascending);
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source.ThenOrdering<int, int>(
				orderingValueSelectorExpression,
				sortDirectionScalar,
				comparerScalar).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(orderingValueSelectorExpression, testing.OrderingValueSelectorExpression);
			Assert.AreEqual(sortDirectionScalar, testing.SortDirectionScalar);
			Assert.AreEqual(comparerScalar, testing.ComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableComputations.IOrdering<int>)source).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableComputations.IOrdering<int>)source).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Touch();
			test();
			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Change(System.ComponentModel.ListSortDirection.Descending);
			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestThenOrdering02()
		{
			ObservableComputations.IOrdering<int> source = getItems().Selecting(i => i.Num).Ordering(i => i);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			Scalar<System.ComponentModel.ListSortDirection> sortDirectionScalar = getScalar<System.ComponentModel.ListSortDirection>(System.ComponentModel.ListSortDirection.Ascending);
			OcConsumer consumer = new OcConsumer();
			var testing = source.ThenOrdering<int, int>(
				orderingValueSelectorExpression,
				sortDirectionScalar).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(orderingValueSelectorExpression, testing.OrderingValueSelectorExpression);
			Assert.AreEqual(sortDirectionScalar, testing.SortDirectionScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableComputations.IOrdering<int>)source).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableComputations.IOrdering<int>)source).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Touch();
			test();
			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Change(System.ComponentModel.ListSortDirection.Descending);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestThenOrdering03()
		{
			ObservableComputations.IOrdering<int> source = getItems().Selecting(i => i.Num).Ordering(i => i);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source.ThenOrdering<int, int>(
				orderingValueSelectorExpression,
				comparerScalar).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(orderingValueSelectorExpression, testing.OrderingValueSelectorExpression);
			Assert.AreEqual(comparerScalar, testing.ComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableComputations.IOrdering<int>)source).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableComputations.IOrdering<int>)source).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestThenOrdering04()
		{
			ObservableComputations.IOrdering<int> source = getItems().Selecting(i => i.Num).Ordering(i => i);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			OcConsumer consumer = new OcConsumer();
			var testing = source.ThenOrdering<int, int>(
				orderingValueSelectorExpression).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(orderingValueSelectorExpression, testing.OrderingValueSelectorExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableComputations.IOrdering<int>)source).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableComputations.IOrdering<int>)source).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestThenOrdering05()
		{
			ObservableComputations.IOrdering<int> source = getItems().Selecting(i => i.Num).Ordering(i => i);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			System.ComponentModel.ListSortDirection sortDirection = System.ComponentModel.ListSortDirection.Ascending;
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source.ThenOrdering<int, int>(
				orderingValueSelectorExpression,
				sortDirection,
				comparerScalar).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(orderingValueSelectorExpression, testing.OrderingValueSelectorExpression);
			Assert.AreEqual(sortDirection, testing.SortDirection);
			Assert.AreEqual(comparerScalar, testing.ComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableComputations.IOrdering<int>)source).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableComputations.IOrdering<int>)source).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestThenOrdering06()
		{
			ObservableComputations.IOrdering<int> source = getItems().Selecting(i => i.Num).Ordering(i => i);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			System.ComponentModel.ListSortDirection sortDirection = System.ComponentModel.ListSortDirection.Ascending;
			OcConsumer consumer = new OcConsumer();
			var testing = source.ThenOrdering<int, int>(
				orderingValueSelectorExpression,
				sortDirection).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(orderingValueSelectorExpression, testing.OrderingValueSelectorExpression);
			Assert.AreEqual(sortDirection, testing.SortDirection);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableComputations.IOrdering<int>)source).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableComputations.IOrdering<int>)source).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestThenOrdering07()
		{
			ObservableComputations.IOrdering<int> source = getItems().Selecting(i => i.Num).Ordering(i => i);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			Scalar<System.ComponentModel.ListSortDirection> sortDirectionScalar = getScalar<System.ComponentModel.ListSortDirection>(System.ComponentModel.ListSortDirection.Ascending);
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source.ThenOrdering<int, int>(
				orderingValueSelectorExpression,
				sortDirectionScalar,
				comparer).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(orderingValueSelectorExpression, testing.OrderingValueSelectorExpression);
			Assert.AreEqual(sortDirectionScalar, testing.SortDirectionScalar);
			Assert.AreEqual(comparer, testing.Comparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableComputations.IOrdering<int>)source).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableComputations.IOrdering<int>)source).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Touch();
			test();
			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Change(System.ComponentModel.ListSortDirection.Descending);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestThenOrdering08()
		{
			ObservableComputations.IOrdering<int> source = getItems().Selecting(i => i.Num).Ordering(i => i);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source.ThenOrdering<int, int>(
				orderingValueSelectorExpression,
				comparer).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(orderingValueSelectorExpression, testing.OrderingValueSelectorExpression);
			Assert.AreEqual(comparer, testing.Comparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableComputations.IOrdering<int>)source).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableComputations.IOrdering<int>)source).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestThenOrdering09()
		{
			ObservableComputations.IOrdering<int> source = getItems().Selecting(i => i.Num).Ordering(i => i);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			System.ComponentModel.ListSortDirection sortDirection = System.ComponentModel.ListSortDirection.Ascending;
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source.ThenOrdering<int, int>(
				orderingValueSelectorExpression,
				sortDirection,
				comparer).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(orderingValueSelectorExpression, testing.OrderingValueSelectorExpression);
			Assert.AreEqual(sortDirection, testing.SortDirection);
			Assert.AreEqual(comparer, testing.Comparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableComputations.IOrdering<int>)source).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableComputations.IOrdering<int>)source).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestThenOrdering10()
		{
			Scalar<ObservableComputations.IOrdering<int>> sourceScalar = getScalar<ObservableComputations.IOrdering<int>>(getItems().Selecting(i => i.Num).Ordering(i => i));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			Scalar<System.ComponentModel.ListSortDirection> sortDirectionScalar = getScalar<System.ComponentModel.ListSortDirection>(System.ComponentModel.ListSortDirection.Ascending);
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.ThenOrdering<int, int>(
				orderingValueSelectorExpression,
				sortDirectionScalar,
				comparerScalar).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(orderingValueSelectorExpression, testing.OrderingValueSelectorExpression);
			Assert.AreEqual(sortDirectionScalar, testing.SortDirectionScalar);
			Assert.AreEqual(comparerScalar, testing.ComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableComputations.IOrdering<int>)sourceScalar.Value).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableComputations.IOrdering<int>)sourceScalar.Value).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Touch();
			test();
			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Change(System.ComponentModel.ListSortDirection.Descending);
			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();

			((Scalar<ObservableComputations.IOrdering<int>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableComputations.IOrdering<int>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestThenOrdering11()
		{
			Scalar<ObservableComputations.IOrdering<int>> sourceScalar = getScalar<ObservableComputations.IOrdering<int>>(getItems().Selecting(i => i.Num).Ordering(i => i));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			Scalar<System.ComponentModel.ListSortDirection> sortDirectionScalar = getScalar<System.ComponentModel.ListSortDirection>(System.ComponentModel.ListSortDirection.Ascending);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.ThenOrdering<int, int>(
				orderingValueSelectorExpression,
				sortDirectionScalar).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(orderingValueSelectorExpression, testing.OrderingValueSelectorExpression);
			Assert.AreEqual(sortDirectionScalar, testing.SortDirectionScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableComputations.IOrdering<int>)sourceScalar.Value).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableComputations.IOrdering<int>)sourceScalar.Value).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Touch();
			test();
			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Change(System.ComponentModel.ListSortDirection.Descending);
			test();

			((Scalar<ObservableComputations.IOrdering<int>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableComputations.IOrdering<int>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestThenOrdering12()
		{
			Scalar<ObservableComputations.IOrdering<int>> sourceScalar = getScalar<ObservableComputations.IOrdering<int>>(getItems().Selecting(i => i.Num).Ordering(i => i));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.ThenOrdering<int, int>(
				orderingValueSelectorExpression,
				comparerScalar).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(orderingValueSelectorExpression, testing.OrderingValueSelectorExpression);
			Assert.AreEqual(comparerScalar, testing.ComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableComputations.IOrdering<int>)sourceScalar.Value).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableComputations.IOrdering<int>)sourceScalar.Value).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();

			((Scalar<ObservableComputations.IOrdering<int>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableComputations.IOrdering<int>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestThenOrdering13()
		{
			Scalar<ObservableComputations.IOrdering<int>> sourceScalar = getScalar<ObservableComputations.IOrdering<int>>(getItems().Selecting(i => i.Num).Ordering(i => i));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.ThenOrdering<int, int>(
				orderingValueSelectorExpression).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(orderingValueSelectorExpression, testing.OrderingValueSelectorExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableComputations.IOrdering<int>)sourceScalar.Value).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableComputations.IOrdering<int>)sourceScalar.Value).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableComputations.IOrdering<int>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableComputations.IOrdering<int>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestThenOrdering14()
		{
			Scalar<ObservableComputations.IOrdering<int>> sourceScalar = getScalar<ObservableComputations.IOrdering<int>>(getItems().Selecting(i => i.Num).Ordering(i => i));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			System.ComponentModel.ListSortDirection sortDirection = System.ComponentModel.ListSortDirection.Ascending;
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.ThenOrdering<int, int>(
				orderingValueSelectorExpression,
				sortDirection,
				comparerScalar).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(orderingValueSelectorExpression, testing.OrderingValueSelectorExpression);
			Assert.AreEqual(sortDirection, testing.SortDirection);
			Assert.AreEqual(comparerScalar, testing.ComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableComputations.IOrdering<int>)sourceScalar.Value).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableComputations.IOrdering<int>)sourceScalar.Value).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();

			((Scalar<ObservableComputations.IOrdering<int>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableComputations.IOrdering<int>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestThenOrdering15()
		{
			Scalar<ObservableComputations.IOrdering<int>> sourceScalar = getScalar<ObservableComputations.IOrdering<int>>(getItems().Selecting(i => i.Num).Ordering(i => i));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			System.ComponentModel.ListSortDirection sortDirection = System.ComponentModel.ListSortDirection.Ascending;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.ThenOrdering<int, int>(
				orderingValueSelectorExpression,
				sortDirection).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(orderingValueSelectorExpression, testing.OrderingValueSelectorExpression);
			Assert.AreEqual(sortDirection, testing.SortDirection);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableComputations.IOrdering<int>)sourceScalar.Value).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableComputations.IOrdering<int>)sourceScalar.Value).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableComputations.IOrdering<int>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableComputations.IOrdering<int>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestThenOrdering16()
		{
			Scalar<ObservableComputations.IOrdering<int>> sourceScalar = getScalar<ObservableComputations.IOrdering<int>>(getItems().Selecting(i => i.Num).Ordering(i => i));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			Scalar<System.ComponentModel.ListSortDirection> sortDirectionScalar = getScalar<System.ComponentModel.ListSortDirection>(System.ComponentModel.ListSortDirection.Ascending);
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.ThenOrdering<int, int>(
				orderingValueSelectorExpression,
				sortDirectionScalar,
				comparer).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(orderingValueSelectorExpression, testing.OrderingValueSelectorExpression);
			Assert.AreEqual(sortDirectionScalar, testing.SortDirectionScalar);
			Assert.AreEqual(comparer, testing.Comparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableComputations.IOrdering<int>)sourceScalar.Value).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableComputations.IOrdering<int>)sourceScalar.Value).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Touch();
			test();
			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Change(System.ComponentModel.ListSortDirection.Descending);
			test();

			((Scalar<ObservableComputations.IOrdering<int>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableComputations.IOrdering<int>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestThenOrdering17()
		{
			Scalar<ObservableComputations.IOrdering<int>> sourceScalar = getScalar<ObservableComputations.IOrdering<int>>(getItems().Selecting(i => i.Num).Ordering(i => i));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.ThenOrdering<int, int>(
				orderingValueSelectorExpression,
				comparer).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(orderingValueSelectorExpression, testing.OrderingValueSelectorExpression);
			Assert.AreEqual(comparer, testing.Comparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableComputations.IOrdering<int>)sourceScalar.Value).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableComputations.IOrdering<int>)sourceScalar.Value).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableComputations.IOrdering<int>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableComputations.IOrdering<int>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestThenOrdering18()
		{
			Scalar<ObservableComputations.IOrdering<int>> sourceScalar = getScalar<ObservableComputations.IOrdering<int>>(getItems().Selecting(i => i.Num).Ordering(i => i));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			System.ComponentModel.ListSortDirection sortDirection = System.ComponentModel.ListSortDirection.Ascending;
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.ThenOrdering<int, int>(
				orderingValueSelectorExpression,
				sortDirection,
				comparer).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(orderingValueSelectorExpression, testing.OrderingValueSelectorExpression);
			Assert.AreEqual(sortDirection, testing.SortDirection);
			Assert.AreEqual(comparer, testing.Comparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableComputations.IOrdering<int>)sourceScalar.Value).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableComputations.IOrdering<int>)sourceScalar.Value).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableComputations.IOrdering<int>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableComputations.IOrdering<int>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		#endregion
		#region Uniting

		
		[Test, Combinatorial]
		public void TestUniting01(
			[Values(1)] int initialCapacity)
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getCollectionsOfItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Uniting<Item>(
				equalityComparerScalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<ObservableCollection<Item>>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				
				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true)}));
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Move(0, 1);
					testing.ValidateConsistency();
				}


				IList listSource;
				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true), new Item(2, true), new Item(3, true), new Item(4, true), new Item(5, true)}));
					sourceScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(6, true), new Item(7, true), new Item(8, true), new Item(8, true), new Item(10, true)}));
					testing.ValidateConsistency();
				}

				((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting02()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getCollectionsOfItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Uniting<Item>(
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<ObservableCollection<Item>>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				
				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true)}));
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Move(0, 1);
					testing.ValidateConsistency();
				}


				IList listSource;
				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true), new Item(2, true), new Item(3, true), new Item(4, true), new Item(5, true)}));
					sourceScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(6, true), new Item(7, true), new Item(8, true), new Item(8, true), new Item(10, true)}));
					testing.ValidateConsistency();
				}

				((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting03(
			[Values(1)] int initialCapacity)
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getCollectionsOfItems());
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Uniting<Item>(
				initialCapacity).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<ObservableCollection<Item>>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				
				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true)}));
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Move(0, 1);
					testing.ValidateConsistency();
				}


				IList listSource;
				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true), new Item(2, true), new Item(3, true), new Item(4, true), new Item(5, true)}));
					sourceScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(6, true), new Item(7, true), new Item(8, true), new Item(8, true), new Item(10, true)}));
					testing.ValidateConsistency();
				}

				((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting04()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getCollectionsOfItems());
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Uniting<Item>().For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<ObservableCollection<Item>>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				
				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true)}));
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Move(0, 1);
					testing.ValidateConsistency();
				}


				IList listSource;
				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true), new Item(2, true), new Item(3, true), new Item(4, true), new Item(5, true)}));
					sourceScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(6, true), new Item(7, true), new Item(8, true), new Item(8, true), new Item(10, true)}));
					testing.ValidateConsistency();
				}

				((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting05(
			[Values(1)] int initialCapacity)
		{
			Scalar<ObservableCollection<ObservableCollection<Item>>> sourceScalar = getScalar<ObservableCollection<ObservableCollection<Item>>>(getCollectionsOfItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Uniting<Item>(
				equalityComparerScalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<ObservableCollection<Item>>)((ObservableCollection<ObservableCollection<Item>>)sourceScalar.Value));
				
				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true)}));
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Move(0, 1);
					testing.ValidateConsistency();
				}


				IList listSource;
				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true), new Item(2, true), new Item(3, true), new Item(4, true), new Item(5, true)}));
					sourceScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(6, true), new Item(7, true), new Item(8, true), new Item(8, true), new Item(10, true)}));
					testing.ValidateConsistency();
				}

				((Scalar<ObservableCollection<ObservableCollection<Item>>>)sourceScalar).Change(null);
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<ObservableCollection<ObservableCollection<Item>>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<ObservableCollection<Item>>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting06()
		{
			Scalar<ObservableCollection<ObservableCollection<Item>>> sourceScalar = getScalar<ObservableCollection<ObservableCollection<Item>>>(getCollectionsOfItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Uniting<Item>(
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<ObservableCollection<Item>>)((ObservableCollection<ObservableCollection<Item>>)sourceScalar.Value));
				
				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true)}));
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Move(0, 1);
					testing.ValidateConsistency();
				}


				IList listSource;
				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true), new Item(2, true), new Item(3, true), new Item(4, true), new Item(5, true)}));
					sourceScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(6, true), new Item(7, true), new Item(8, true), new Item(8, true), new Item(10, true)}));
					testing.ValidateConsistency();
				}

				((Scalar<ObservableCollection<ObservableCollection<Item>>>)sourceScalar).Change(null);
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<ObservableCollection<ObservableCollection<Item>>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<ObservableCollection<Item>>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting07(
			[Values(1)] int initialCapacity)
		{
			Scalar<ObservableCollection<ObservableCollection<Item>>> sourceScalar = getScalar<ObservableCollection<ObservableCollection<Item>>>(getCollectionsOfItems());
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Uniting<Item>(
				initialCapacity).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<ObservableCollection<Item>>)((ObservableCollection<ObservableCollection<Item>>)sourceScalar.Value));
				
				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true)}));
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Move(0, 1);
					testing.ValidateConsistency();
				}


				IList listSource;
				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true), new Item(2, true), new Item(3, true), new Item(4, true), new Item(5, true)}));
					sourceScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(6, true), new Item(7, true), new Item(8, true), new Item(8, true), new Item(10, true)}));
					testing.ValidateConsistency();
				}

				((Scalar<ObservableCollection<ObservableCollection<Item>>>)sourceScalar).Change(null);
			}

			test();

			((Scalar<ObservableCollection<ObservableCollection<Item>>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<ObservableCollection<Item>>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting08()
		{
			Scalar<ObservableCollection<ObservableCollection<Item>>> sourceScalar = getScalar<ObservableCollection<ObservableCollection<Item>>>(getCollectionsOfItems());
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Uniting<Item>().For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<ObservableCollection<Item>>)((ObservableCollection<ObservableCollection<Item>>)sourceScalar.Value));
				
				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true)}));
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Move(0, 1);
					testing.ValidateConsistency();
				}


				IList listSource;
				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true), new Item(2, true), new Item(3, true), new Item(4, true), new Item(5, true)}));
					sourceScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(6, true), new Item(7, true), new Item(8, true), new Item(8, true), new Item(10, true)}));
					testing.ValidateConsistency();
				}

				((Scalar<ObservableCollection<ObservableCollection<Item>>>)sourceScalar).Change(null);
			}

			test();

			((Scalar<ObservableCollection<ObservableCollection<Item>>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<ObservableCollection<Item>>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting09(
			[Values(1)] int initialCapacity)
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getCollectionsOfItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source.Uniting<Item>(
				equalityComparerScalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<ObservableCollection<Item>>)((System.Collections.Specialized.INotifyCollectionChanged)source));
				
				if (sourceValue != null)
				{
					sourceValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true)}));
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Move(0, 1);
					testing.ValidateConsistency();
				}


				IList listSource;
				if (sourceValue != null)
				{
					sourceValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true), new Item(2, true), new Item(3, true), new Item(4, true), new Item(5, true)}));
					sourceValue.Insert(0, new ObservableCollection<Item>(new []{new Item(6, true), new Item(7, true), new Item(8, true), new Item(8, true), new Item(10, true)}));
					testing.ValidateConsistency();
				}

			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting10()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getCollectionsOfItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source.Uniting<Item>(
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<ObservableCollection<Item>>)((System.Collections.Specialized.INotifyCollectionChanged)source));
				
				if (sourceValue != null)
				{
					sourceValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true)}));
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Move(0, 1);
					testing.ValidateConsistency();
				}


				IList listSource;
				if (sourceValue != null)
				{
					sourceValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true), new Item(2, true), new Item(3, true), new Item(4, true), new Item(5, true)}));
					sourceValue.Insert(0, new ObservableCollection<Item>(new []{new Item(6, true), new Item(7, true), new Item(8, true), new Item(8, true), new Item(10, true)}));
					testing.ValidateConsistency();
				}

			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting11(
			[Values(1)] int initialCapacity)
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getCollectionsOfItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source.Uniting<Item>(
				initialCapacity).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<ObservableCollection<Item>>)((System.Collections.Specialized.INotifyCollectionChanged)source));
				
				if (sourceValue != null)
				{
					sourceValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true)}));
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Move(0, 1);
					testing.ValidateConsistency();
				}


				IList listSource;
				if (sourceValue != null)
				{
					sourceValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true), new Item(2, true), new Item(3, true), new Item(4, true), new Item(5, true)}));
					sourceValue.Insert(0, new ObservableCollection<Item>(new []{new Item(6, true), new Item(7, true), new Item(8, true), new Item(8, true), new Item(10, true)}));
					testing.ValidateConsistency();
				}

			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting12()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getCollectionsOfItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source.Uniting<Item>().For(consumer);

			Assert.AreEqual(source, testing.Source);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<ObservableCollection<Item>>)((System.Collections.Specialized.INotifyCollectionChanged)source));
				
				if (sourceValue != null)
				{
					sourceValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true)}));
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Move(0, 1);
					testing.ValidateConsistency();
				}


				IList listSource;
				if (sourceValue != null)
				{
					sourceValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true), new Item(2, true), new Item(3, true), new Item(4, true), new Item(5, true)}));
					sourceValue.Insert(0, new ObservableCollection<Item>(new []{new Item(6, true), new Item(7, true), new Item(8, true), new Item(8, true), new Item(10, true)}));
					testing.ValidateConsistency();
				}

			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting13(
			[Values(1)] int initialCapacity)
		{
			ObservableCollection<ObservableCollection<Item>> source = getCollectionsOfItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source.Uniting<Item>(
				equalityComparerScalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<ObservableCollection<Item>>)((ObservableCollection<ObservableCollection<Item>>)source));
				
				if (sourceValue != null)
				{
					sourceValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true)}));
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Move(0, 1);
					testing.ValidateConsistency();
				}


				IList listSource;
				if (sourceValue != null)
				{
					sourceValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true), new Item(2, true), new Item(3, true), new Item(4, true), new Item(5, true)}));
					sourceValue.Insert(0, new ObservableCollection<Item>(new []{new Item(6, true), new Item(7, true), new Item(8, true), new Item(8, true), new Item(10, true)}));
					testing.ValidateConsistency();
				}

			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting14()
		{
			ObservableCollection<ObservableCollection<Item>> source = getCollectionsOfItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source.Uniting<Item>(
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<ObservableCollection<Item>>)((ObservableCollection<ObservableCollection<Item>>)source));
				
				if (sourceValue != null)
				{
					sourceValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true)}));
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Move(0, 1);
					testing.ValidateConsistency();
				}


				IList listSource;
				if (sourceValue != null)
				{
					sourceValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true), new Item(2, true), new Item(3, true), new Item(4, true), new Item(5, true)}));
					sourceValue.Insert(0, new ObservableCollection<Item>(new []{new Item(6, true), new Item(7, true), new Item(8, true), new Item(8, true), new Item(10, true)}));
					testing.ValidateConsistency();
				}

			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting15(
			[Values(1)] int initialCapacity)
		{
			ObservableCollection<ObservableCollection<Item>> source = getCollectionsOfItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source.Uniting<Item>(
				initialCapacity).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<ObservableCollection<Item>>)((ObservableCollection<ObservableCollection<Item>>)source));
				
				if (sourceValue != null)
				{
					sourceValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true)}));
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Move(0, 1);
					testing.ValidateConsistency();
				}


				IList listSource;
				if (sourceValue != null)
				{
					sourceValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true), new Item(2, true), new Item(3, true), new Item(4, true), new Item(5, true)}));
					sourceValue.Insert(0, new ObservableCollection<Item>(new []{new Item(6, true), new Item(7, true), new Item(8, true), new Item(8, true), new Item(10, true)}));
					testing.ValidateConsistency();
				}

			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting16()
		{
			ObservableCollection<ObservableCollection<Item>> source = getCollectionsOfItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source.Uniting<Item>().For(consumer);

			Assert.AreEqual(source, testing.Source);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<ObservableCollection<Item>>)((ObservableCollection<ObservableCollection<Item>>)source));
				
				if (sourceValue != null)
				{
					sourceValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true)}));
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Move(0, 1);
					testing.ValidateConsistency();
				}


				IList listSource;
				if (sourceValue != null)
				{
					sourceValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true), new Item(2, true), new Item(3, true), new Item(4, true), new Item(5, true)}));
					sourceValue.Insert(0, new ObservableCollection<Item>(new []{new Item(6, true), new Item(7, true), new Item(8, true), new Item(8, true), new Item(10, true)}));
					testing.ValidateConsistency();
				}

			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting17(
			[Values(1)] int initialCapacity)
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getCollectionsOfItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source.Uniting<Item>(
				equalityComparer,
				initialCapacity).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<ObservableCollection<Item>>)((System.Collections.Specialized.INotifyCollectionChanged)source));
				
				if (sourceValue != null)
				{
					sourceValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true)}));
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Move(0, 1);
					testing.ValidateConsistency();
				}


				IList listSource;
				if (sourceValue != null)
				{
					sourceValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true), new Item(2, true), new Item(3, true), new Item(4, true), new Item(5, true)}));
					sourceValue.Insert(0, new ObservableCollection<Item>(new []{new Item(6, true), new Item(7, true), new Item(8, true), new Item(8, true), new Item(10, true)}));
					testing.ValidateConsistency();
				}

			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting18()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getCollectionsOfItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source.Uniting<Item>(
				equalityComparer).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<ObservableCollection<Item>>)((System.Collections.Specialized.INotifyCollectionChanged)source));
				
				if (sourceValue != null)
				{
					sourceValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true)}));
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Move(0, 1);
					testing.ValidateConsistency();
				}


				IList listSource;
				if (sourceValue != null)
				{
					sourceValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true), new Item(2, true), new Item(3, true), new Item(4, true), new Item(5, true)}));
					sourceValue.Insert(0, new ObservableCollection<Item>(new []{new Item(6, true), new Item(7, true), new Item(8, true), new Item(8, true), new Item(10, true)}));
					testing.ValidateConsistency();
				}

			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting19(
			[Values(1)] int initialCapacity)
		{
			ObservableCollection<ObservableCollection<Item>> source = getCollectionsOfItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source.Uniting<Item>(
				equalityComparer,
				initialCapacity).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<ObservableCollection<Item>>)((ObservableCollection<ObservableCollection<Item>>)source));
				
				if (sourceValue != null)
				{
					sourceValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true)}));
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Move(0, 1);
					testing.ValidateConsistency();
				}


				IList listSource;
				if (sourceValue != null)
				{
					sourceValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true), new Item(2, true), new Item(3, true), new Item(4, true), new Item(5, true)}));
					sourceValue.Insert(0, new ObservableCollection<Item>(new []{new Item(6, true), new Item(7, true), new Item(8, true), new Item(8, true), new Item(10, true)}));
					testing.ValidateConsistency();
				}

			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting20()
		{
			ObservableCollection<ObservableCollection<Item>> source = getCollectionsOfItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source.Uniting<Item>(
				equalityComparer).For(consumer);

			Assert.AreEqual(source, testing.Source);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<ObservableCollection<Item>>)((ObservableCollection<ObservableCollection<Item>>)source));
				
				if (sourceValue != null)
				{
					sourceValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true)}));
					testing.ValidateConsistency();
					sourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceValue.Move(0, 1);
					testing.ValidateConsistency();
				}


				IList listSource;
				if (sourceValue != null)
				{
					sourceValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true), new Item(2, true), new Item(3, true), new Item(4, true), new Item(5, true)}));
					sourceValue.Insert(0, new ObservableCollection<Item>(new []{new Item(6, true), new Item(7, true), new Item(8, true), new Item(8, true), new Item(10, true)}));
					testing.ValidateConsistency();
				}

			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting21(
			[Values(1)] int initialCapacity)
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getCollectionsOfItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Uniting<Item>(
				equalityComparer,
				initialCapacity).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<ObservableCollection<Item>>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				
				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true)}));
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Move(0, 1);
					testing.ValidateConsistency();
				}


				IList listSource;
				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true), new Item(2, true), new Item(3, true), new Item(4, true), new Item(5, true)}));
					sourceScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(6, true), new Item(7, true), new Item(8, true), new Item(8, true), new Item(10, true)}));
					testing.ValidateConsistency();
				}

				((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting22()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getCollectionsOfItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Uniting<Item>(
				equalityComparer).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<ObservableCollection<Item>>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				
				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true)}));
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Move(0, 1);
					testing.ValidateConsistency();
				}


				IList listSource;
				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true), new Item(2, true), new Item(3, true), new Item(4, true), new Item(5, true)}));
					sourceScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(6, true), new Item(7, true), new Item(8, true), new Item(8, true), new Item(10, true)}));
					testing.ValidateConsistency();
				}

				((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting23(
			[Values(1)] int initialCapacity)
		{
			Scalar<ObservableCollection<ObservableCollection<Item>>> sourceScalar = getScalar<ObservableCollection<ObservableCollection<Item>>>(getCollectionsOfItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Uniting<Item>(
				equalityComparer,
				initialCapacity).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<ObservableCollection<Item>>)((ObservableCollection<ObservableCollection<Item>>)sourceScalar.Value));
				
				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true)}));
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Move(0, 1);
					testing.ValidateConsistency();
				}


				IList listSource;
				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true), new Item(2, true), new Item(3, true), new Item(4, true), new Item(5, true)}));
					sourceScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(6, true), new Item(7, true), new Item(8, true), new Item(8, true), new Item(10, true)}));
					testing.ValidateConsistency();
				}

				((Scalar<ObservableCollection<ObservableCollection<Item>>>)sourceScalar).Change(null);
			}

			test();

			((Scalar<ObservableCollection<ObservableCollection<Item>>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<ObservableCollection<Item>>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting24()
		{
			Scalar<ObservableCollection<ObservableCollection<Item>>> sourceScalar = getScalar<ObservableCollection<ObservableCollection<Item>>>(getCollectionsOfItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = sourceScalar.Uniting<Item>(
				equalityComparer).For(consumer);

			Assert.AreEqual(sourceScalar, testing.SourceScalar);
			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<ObservableCollection<Item>>)((ObservableCollection<ObservableCollection<Item>>)sourceScalar.Value));
				
				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true)}));
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourceScalarValue.Move(0, 1);
					testing.ValidateConsistency();
				}


				IList listSource;
				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true), new Item(2, true), new Item(3, true), new Item(4, true), new Item(5, true)}));
					sourceScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(6, true), new Item(7, true), new Item(8, true), new Item(8, true), new Item(10, true)}));
					testing.ValidateConsistency();
				}

				((Scalar<ObservableCollection<ObservableCollection<Item>>>)sourceScalar).Change(null);
			}

			test();

			((Scalar<ObservableCollection<ObservableCollection<Item>>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<ObservableCollection<Item>>>)sourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting25(
			[Values(1)] int initialCapacity)
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Uniting<Item>(
				source2,
				equalityComparer,
				initialCapacity).For(consumer);

			Assert.AreEqual(equalityComparer, testing.EqualityComparer);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting26()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Uniting<Item>(
				source2,
				equalityComparer).For(consumer);

			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting27(
			[Values(1)] int initialCapacity)
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Uniting<Item>(
				source2,
				initialCapacity).For(consumer);

			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting28()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Uniting<Item>(
				source2).For(consumer);


			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting29(
			[Values(1)] int initialCapacity)
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Uniting<Item>(
				source2,
				equalityComparer,
				initialCapacity).For(consumer);

			Assert.AreEqual(equalityComparer, testing.EqualityComparer);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting30()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Uniting<Item>(
				source2,
				equalityComparer).For(consumer);

			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting31(
			[Values(1)] int initialCapacity)
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Uniting<Item>(
				source2,
				initialCapacity).For(consumer);

			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting32()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Uniting<Item>(
				source2).For(consumer);


			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting33(
			[Values(1)] int initialCapacity)
		{
			ObservableCollection<Item> source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Uniting<Item>(
				source2,
				equalityComparer,
				initialCapacity).For(consumer);

			Assert.AreEqual(equalityComparer, testing.EqualityComparer);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting34()
		{
			ObservableCollection<Item> source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Uniting<Item>(
				source2,
				equalityComparer).For(consumer);

			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting35(
			[Values(1)] int initialCapacity)
		{
			ObservableCollection<Item> source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Uniting<Item>(
				source2,
				initialCapacity).For(consumer);

			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting36()
		{
			ObservableCollection<Item> source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Uniting<Item>(
				source2).For(consumer);


			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting37(
			[Values(1)] int initialCapacity)
		{
			ObservableCollection<Item> source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Uniting<Item>(
				source2,
				equalityComparer,
				initialCapacity).For(consumer);

			Assert.AreEqual(equalityComparer, testing.EqualityComparer);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting38()
		{
			ObservableCollection<Item> source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Uniting<Item>(
				source2,
				equalityComparer).For(consumer);

			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting39(
			[Values(1)] int initialCapacity)
		{
			ObservableCollection<Item> source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Uniting<Item>(
				source2,
				initialCapacity).For(consumer);

			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting40()
		{
			ObservableCollection<Item> source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Uniting<Item>(
				source2).For(consumer);


			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting41(
			[Values(1)] int initialCapacity)
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Uniting<Item>(
				source2,
				equalityComparer,
				initialCapacity).For(consumer);

			Assert.AreEqual(equalityComparer, testing.EqualityComparer);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting42()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Uniting<Item>(
				source2,
				equalityComparer).For(consumer);

			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting43(
			[Values(1)] int initialCapacity)
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Uniting<Item>(
				source2,
				initialCapacity).For(consumer);

			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting44()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Uniting<Item>(
				source2).For(consumer);


			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting45(
			[Values(1)] int initialCapacity)
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			ObservableCollection<Item> source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Uniting<Item>(
				source2,
				equalityComparer,
				initialCapacity).For(consumer);

			Assert.AreEqual(equalityComparer, testing.EqualityComparer);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting46()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			ObservableCollection<Item> source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Uniting<Item>(
				source2,
				equalityComparer).For(consumer);

			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting47(
			[Values(1)] int initialCapacity)
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			ObservableCollection<Item> source2 = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Uniting<Item>(
				source2,
				initialCapacity).For(consumer);

			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting48()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			ObservableCollection<Item> source2 = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Uniting<Item>(
				source2).For(consumer);


			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting49(
			[Values(1)] int initialCapacity)
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Uniting<Item>(
				source2,
				equalityComparer,
				initialCapacity).For(consumer);

			Assert.AreEqual(equalityComparer, testing.EqualityComparer);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting50()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Uniting<Item>(
				source2,
				equalityComparer).For(consumer);

			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting51(
			[Values(1)] int initialCapacity)
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Uniting<Item>(
				source2,
				initialCapacity).For(consumer);

			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting52()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Uniting<Item>(
				source2).For(consumer);


			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting53(
			[Values(1)] int initialCapacity)
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			ObservableCollection<Item> source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Uniting<Item>(
				source2,
				equalityComparer,
				initialCapacity).For(consumer);

			Assert.AreEqual(equalityComparer, testing.EqualityComparer);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting54()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			ObservableCollection<Item> source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Uniting<Item>(
				source2,
				equalityComparer).For(consumer);

			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting55(
			[Values(1)] int initialCapacity)
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			ObservableCollection<Item> source2 = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Uniting<Item>(
				source2,
				initialCapacity).For(consumer);

			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting56()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			ObservableCollection<Item> source2 = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Uniting<Item>(
				source2).For(consumer);


			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting57(
			[Values(1)] int initialCapacity)
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Uniting<Item>(
				source2Scalar,
				equalityComparer,
				initialCapacity).For(consumer);

			Assert.AreEqual(equalityComparer, testing.EqualityComparer);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting58()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Uniting<Item>(
				source2Scalar,
				equalityComparer).For(consumer);

			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting59(
			[Values(1)] int initialCapacity)
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Uniting<Item>(
				source2Scalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting60()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Uniting<Item>(
				source2Scalar).For(consumer);


			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting61(
			[Values(1)] int initialCapacity)
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Uniting<Item>(
				source2Scalar,
				equalityComparer,
				initialCapacity).For(consumer);

			Assert.AreEqual(equalityComparer, testing.EqualityComparer);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting62()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Uniting<Item>(
				source2Scalar,
				equalityComparer).For(consumer);

			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting63(
			[Values(1)] int initialCapacity)
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Uniting<Item>(
				source2Scalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting64()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Uniting<Item>(
				source2Scalar).For(consumer);


			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting65(
			[Values(1)] int initialCapacity)
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Uniting<Item>(
				source2Scalar,
				equalityComparer,
				initialCapacity).For(consumer);

			Assert.AreEqual(equalityComparer, testing.EqualityComparer);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting66()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Uniting<Item>(
				source2Scalar,
				equalityComparer).For(consumer);

			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting67(
			[Values(1)] int initialCapacity)
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Uniting<Item>(
				source2Scalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting68()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Uniting<Item>(
				source2Scalar).For(consumer);


			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting69(
			[Values(1)] int initialCapacity)
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Uniting<Item>(
				source2Scalar,
				equalityComparer,
				initialCapacity).For(consumer);

			Assert.AreEqual(equalityComparer, testing.EqualityComparer);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting70()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Uniting<Item>(
				source2Scalar,
				equalityComparer).For(consumer);

			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting71(
			[Values(1)] int initialCapacity)
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Uniting<Item>(
				source2Scalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting72()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Uniting<Item>(
				source2Scalar).For(consumer);


			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting73(
			[Values(1)] int initialCapacity)
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Uniting<Item>(
				source2Scalar,
				equalityComparer,
				initialCapacity).For(consumer);

			Assert.AreEqual(equalityComparer, testing.EqualityComparer);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting74()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Uniting<Item>(
				source2Scalar,
				equalityComparer).For(consumer);

			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting75(
			[Values(1)] int initialCapacity)
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Uniting<Item>(
				source2Scalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting76()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Uniting<Item>(
				source2Scalar).For(consumer);


			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting77(
			[Values(1)] int initialCapacity)
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Uniting<Item>(
				source2Scalar,
				equalityComparer,
				initialCapacity).For(consumer);

			Assert.AreEqual(equalityComparer, testing.EqualityComparer);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting78()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Uniting<Item>(
				source2Scalar,
				equalityComparer).For(consumer);

			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting79(
			[Values(1)] int initialCapacity)
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Uniting<Item>(
				source2Scalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting80()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Uniting<Item>(
				source2Scalar).For(consumer);


			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting81(
			[Values(1)] int initialCapacity)
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Uniting<Item>(
				source2Scalar,
				equalityComparer,
				initialCapacity).For(consumer);

			Assert.AreEqual(equalityComparer, testing.EqualityComparer);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting82()
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Uniting<Item>(
				source2Scalar,
				equalityComparer).For(consumer);

			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting83(
			[Values(1)] int initialCapacity)
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Uniting<Item>(
				source2Scalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting84()
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Uniting<Item>(
				source2Scalar).For(consumer);


			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting85(
			[Values(1)] int initialCapacity)
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Uniting<Item>(
				source2Scalar,
				equalityComparer,
				initialCapacity).For(consumer);

			Assert.AreEqual(equalityComparer, testing.EqualityComparer);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting86()
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Uniting<Item>(
				source2Scalar,
				equalityComparer).For(consumer);

			Assert.AreEqual(equalityComparer, testing.EqualityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting87(
			[Values(1)] int initialCapacity)
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Uniting<Item>(
				source2Scalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting88()
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Uniting<Item>(
				source2Scalar).For(consumer);


			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting89(
			[Values(1)] int initialCapacity)
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Uniting<Item>(
				source2,
				equalityComparerScalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting90()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Uniting<Item>(
				source2,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting91(
			[Values(1)] int initialCapacity)
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Uniting<Item>(
				source2,
				equalityComparerScalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting92()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Uniting<Item>(
				source2,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting93(
			[Values(1)] int initialCapacity)
		{
			ObservableCollection<Item> source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Uniting<Item>(
				source2,
				equalityComparerScalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting94()
		{
			ObservableCollection<Item> source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Uniting<Item>(
				source2,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting95(
			[Values(1)] int initialCapacity)
		{
			ObservableCollection<Item> source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Uniting<Item>(
				source2,
				equalityComparerScalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting96()
		{
			ObservableCollection<Item> source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Uniting<Item>(
				source2,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting97(
			[Values(1)] int initialCapacity)
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Uniting<Item>(
				source2,
				equalityComparerScalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting98()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Uniting<Item>(
				source2,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting99(
			[Values(1)] int initialCapacity)
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			ObservableCollection<Item> source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Uniting<Item>(
				source2,
				equalityComparerScalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting100()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			ObservableCollection<Item> source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Uniting<Item>(
				source2,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting101(
			[Values(1)] int initialCapacity)
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Uniting<Item>(
				source2,
				equalityComparerScalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting102()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Uniting<Item>(
				source2,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting103(
			[Values(1)] int initialCapacity)
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			ObservableCollection<Item> source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Uniting<Item>(
				source2,
				equalityComparerScalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting104()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			ObservableCollection<Item> source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Uniting<Item>(
				source2,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(1);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting105(
			[Values(1)] int initialCapacity)
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Uniting<Item>(
				source2Scalar,
				equalityComparerScalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting106()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Uniting<Item>(
				source2Scalar,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting107(
			[Values(1)] int initialCapacity)
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Uniting<Item>(
				source2Scalar,
				equalityComparerScalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting108()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Uniting<Item>(
				source2Scalar,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting109(
			[Values(1)] int initialCapacity)
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Uniting<Item>(
				source2Scalar,
				equalityComparerScalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting110()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Uniting<Item>(
				source2Scalar,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting111(
			[Values(1)] int initialCapacity)
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Uniting<Item>(
				source2Scalar,
				equalityComparerScalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting112()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1Scalar.Uniting<Item>(
				source2Scalar,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting113(
			[Values(1)] int initialCapacity)
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Uniting<Item>(
				source2Scalar,
				equalityComparerScalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting114()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Uniting<Item>(
				source2Scalar,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting115(
			[Values(1)] int initialCapacity)
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Uniting<Item>(
				source2Scalar,
				equalityComparerScalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting116()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Uniting<Item>(
				source2Scalar,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting117(
			[Values(1)] int initialCapacity)
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Uniting<Item>(
				source2Scalar,
				equalityComparerScalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting118()
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Uniting<Item>(
				source2Scalar,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting119(
			[Values(1)] int initialCapacity)
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Uniting<Item>(
				source2Scalar,
				equalityComparerScalar,
				initialCapacity).For(consumer);

			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);
			Assert.AreEqual(initialCapacity, testing.InitialCapacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestUniting120()
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			OcConsumer consumer = new OcConsumer();
			var testing = source1.Uniting<Item>(
				source2Scalar,
				equalityComparerScalar).For(consumer);

			Assert.AreEqual(equalityComparerScalar, testing.EqualityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(1);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
			consumer.Dispose();
		}
		#endregion
		#region Zipping

		
		[Test, Combinatorial]
		public void TestZipping01()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> leftSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged rightSource = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = leftSourceScalar.Zipping<Item, Item>(
				rightSource).For(consumer);

			Assert.AreEqual(leftSourceScalar, testing.LeftSourceScalar);
			Assert.AreEqual(rightSource, testing.RightSource);

			void test()
			{
				testing.ValidateConsistency();
				var leftSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)leftSourceScalar.Value));

				if (leftSourceScalarValue != null)
				{		
					leftSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					leftSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					leftSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					leftSourceScalarValue[2].Active = !leftSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					leftSourceScalarValue[2].Num = leftSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					leftSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					leftSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					leftSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var rightSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)rightSource));

				if (rightSourceValue != null)
				{		
					rightSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					rightSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					rightSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					rightSourceValue[2].Active = !rightSourceValue[2].Active;
					testing.ValidateConsistency();
					rightSourceValue[2].Num = rightSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					rightSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					rightSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					rightSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)leftSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)leftSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestZipping02()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> leftSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			ObservableCollection<Item> rightSource = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = leftSourceScalar.Zipping<Item, Item>(
				rightSource).For(consumer);

			Assert.AreEqual(leftSourceScalar, testing.LeftSourceScalar);
			Assert.AreEqual(rightSource, testing.RightSource);

			void test()
			{
				testing.ValidateConsistency();
				var leftSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)leftSourceScalar.Value));

				if (leftSourceScalarValue != null)
				{		
					leftSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					leftSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					leftSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					leftSourceScalarValue[2].Active = !leftSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					leftSourceScalarValue[2].Num = leftSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					leftSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					leftSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					leftSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var rightSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)rightSource));

				if (rightSourceValue != null)
				{		
					rightSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					rightSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					rightSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					rightSourceValue[2].Active = !rightSourceValue[2].Active;
					testing.ValidateConsistency();
					rightSourceValue[2].Num = rightSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					rightSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					rightSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					rightSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)leftSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)leftSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestZipping03()
		{
			Scalar<ObservableCollection<Item>> leftSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged rightSource = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = leftSourceScalar.Zipping<Item, Item>(
				rightSource).For(consumer);

			Assert.AreEqual(leftSourceScalar, testing.LeftSourceScalar);
			Assert.AreEqual(rightSource, testing.RightSource);

			void test()
			{
				testing.ValidateConsistency();
				var leftSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)leftSourceScalar.Value));

				if (leftSourceScalarValue != null)
				{		
					leftSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					leftSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					leftSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					leftSourceScalarValue[2].Active = !leftSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					leftSourceScalarValue[2].Num = leftSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					leftSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					leftSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					leftSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var rightSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)rightSource));

				if (rightSourceValue != null)
				{		
					rightSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					rightSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					rightSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					rightSourceValue[2].Active = !rightSourceValue[2].Active;
					testing.ValidateConsistency();
					rightSourceValue[2].Num = rightSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					rightSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					rightSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					rightSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
			}

			test();

			((Scalar<ObservableCollection<Item>>)leftSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)leftSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestZipping04()
		{
			Scalar<ObservableCollection<Item>> leftSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			ObservableCollection<Item> rightSource = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = leftSourceScalar.Zipping<Item, Item>(
				rightSource).For(consumer);

			Assert.AreEqual(leftSourceScalar, testing.LeftSourceScalar);
			Assert.AreEqual(rightSource, testing.RightSource);

			void test()
			{
				testing.ValidateConsistency();
				var leftSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)leftSourceScalar.Value));

				if (leftSourceScalarValue != null)
				{		
					leftSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					leftSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					leftSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					leftSourceScalarValue[2].Active = !leftSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					leftSourceScalarValue[2].Num = leftSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					leftSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					leftSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					leftSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var rightSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)rightSource));

				if (rightSourceValue != null)
				{		
					rightSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					rightSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					rightSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					rightSourceValue[2].Active = !rightSourceValue[2].Active;
					testing.ValidateConsistency();
					rightSourceValue[2].Num = rightSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					rightSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					rightSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					rightSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
			}

			test();

			((Scalar<ObservableCollection<Item>>)leftSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)leftSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestZipping05()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> leftSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> rightSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = leftSourceScalar.Zipping<Item, Item>(
				rightSourceScalar).For(consumer);

			Assert.AreEqual(leftSourceScalar, testing.LeftSourceScalar);
			Assert.AreEqual(rightSourceScalar, testing.RightSourceScalar);

			void test()
			{
				testing.ValidateConsistency();
				var leftSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)leftSourceScalar.Value));

				if (leftSourceScalarValue != null)
				{		
					leftSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					leftSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					leftSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					leftSourceScalarValue[2].Active = !leftSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					leftSourceScalarValue[2].Num = leftSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					leftSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					leftSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					leftSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var rightSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)rightSourceScalar.Value));

				if (rightSourceScalarValue != null)
				{		
					rightSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					rightSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					rightSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					rightSourceScalarValue[2].Active = !rightSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					rightSourceScalarValue[2].Num = rightSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					rightSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					rightSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					rightSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)leftSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)leftSourceScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)rightSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)rightSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestZipping06()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> leftSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<ObservableCollection<Item>> rightSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = leftSourceScalar.Zipping<Item, Item>(
				rightSourceScalar).For(consumer);

			Assert.AreEqual(leftSourceScalar, testing.LeftSourceScalar);
			Assert.AreEqual(rightSourceScalar, testing.RightSourceScalar);

			void test()
			{
				testing.ValidateConsistency();
				var leftSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)leftSourceScalar.Value));

				if (leftSourceScalarValue != null)
				{		
					leftSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					leftSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					leftSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					leftSourceScalarValue[2].Active = !leftSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					leftSourceScalarValue[2].Num = leftSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					leftSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					leftSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					leftSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var rightSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)rightSourceScalar.Value));

				if (rightSourceScalarValue != null)
				{		
					rightSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					rightSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					rightSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					rightSourceScalarValue[2].Active = !rightSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					rightSourceScalarValue[2].Num = rightSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					rightSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					rightSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					rightSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)leftSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)leftSourceScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)rightSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)rightSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestZipping07()
		{
			Scalar<ObservableCollection<Item>> leftSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> rightSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = leftSourceScalar.Zipping<Item, Item>(
				rightSourceScalar).For(consumer);

			Assert.AreEqual(leftSourceScalar, testing.LeftSourceScalar);
			Assert.AreEqual(rightSourceScalar, testing.RightSourceScalar);

			void test()
			{
				testing.ValidateConsistency();
				var leftSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)leftSourceScalar.Value));

				if (leftSourceScalarValue != null)
				{		
					leftSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					leftSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					leftSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					leftSourceScalarValue[2].Active = !leftSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					leftSourceScalarValue[2].Num = leftSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					leftSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					leftSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					leftSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var rightSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)rightSourceScalar.Value));

				if (rightSourceScalarValue != null)
				{		
					rightSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					rightSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					rightSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					rightSourceScalarValue[2].Active = !rightSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					rightSourceScalarValue[2].Num = rightSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					rightSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					rightSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					rightSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
			}

			test();

			((Scalar<ObservableCollection<Item>>)leftSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)leftSourceScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)rightSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)rightSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestZipping08()
		{
			Scalar<ObservableCollection<Item>> leftSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<ObservableCollection<Item>> rightSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = leftSourceScalar.Zipping<Item, Item>(
				rightSourceScalar).For(consumer);

			Assert.AreEqual(leftSourceScalar, testing.LeftSourceScalar);
			Assert.AreEqual(rightSourceScalar, testing.RightSourceScalar);

			void test()
			{
				testing.ValidateConsistency();
				var leftSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)leftSourceScalar.Value));

				if (leftSourceScalarValue != null)
				{		
					leftSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					leftSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					leftSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					leftSourceScalarValue[2].Active = !leftSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					leftSourceScalarValue[2].Num = leftSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					leftSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					leftSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					leftSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var rightSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)rightSourceScalar.Value));

				if (rightSourceScalarValue != null)
				{		
					rightSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					rightSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					rightSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					rightSourceScalarValue[2].Active = !rightSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					rightSourceScalarValue[2].Num = rightSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					rightSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					rightSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					rightSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
			}

			test();

			((Scalar<ObservableCollection<Item>>)leftSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)leftSourceScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)rightSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)rightSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestZipping09()
		{
			System.Collections.Specialized.INotifyCollectionChanged leftSource = getItems();
			System.Collections.Specialized.INotifyCollectionChanged rightSource = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = leftSource.Zipping<Item, Item>(
				rightSource).For(consumer);

			Assert.AreEqual(leftSource, testing.LeftSource);
			Assert.AreEqual(rightSource, testing.RightSource);

			void test()
			{
				testing.ValidateConsistency();
				var leftSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)leftSource));

				if (leftSourceValue != null)
				{		
					leftSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					leftSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					leftSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					leftSourceValue[2].Active = !leftSourceValue[2].Active;
					testing.ValidateConsistency();
					leftSourceValue[2].Num = leftSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					leftSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					leftSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					leftSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var rightSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)rightSource));

				if (rightSourceValue != null)
				{		
					rightSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					rightSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					rightSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					rightSourceValue[2].Active = !rightSourceValue[2].Active;
					testing.ValidateConsistency();
					rightSourceValue[2].Num = rightSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					rightSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					rightSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					rightSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestZipping10()
		{
			System.Collections.Specialized.INotifyCollectionChanged leftSource = getItems();
			ObservableCollection<Item> rightSource = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = leftSource.Zipping<Item, Item>(
				rightSource).For(consumer);

			Assert.AreEqual(leftSource, testing.LeftSource);
			Assert.AreEqual(rightSource, testing.RightSource);

			void test()
			{
				testing.ValidateConsistency();
				var leftSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)leftSource));

				if (leftSourceValue != null)
				{		
					leftSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					leftSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					leftSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					leftSourceValue[2].Active = !leftSourceValue[2].Active;
					testing.ValidateConsistency();
					leftSourceValue[2].Num = leftSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					leftSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					leftSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					leftSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var rightSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)rightSource));

				if (rightSourceValue != null)
				{		
					rightSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					rightSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					rightSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					rightSourceValue[2].Active = !rightSourceValue[2].Active;
					testing.ValidateConsistency();
					rightSourceValue[2].Num = rightSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					rightSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					rightSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					rightSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestZipping11()
		{
			ObservableCollection<Item> leftSource = getItems();
			System.Collections.Specialized.INotifyCollectionChanged rightSource = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = leftSource.Zipping<Item, Item>(
				rightSource).For(consumer);

			Assert.AreEqual(leftSource, testing.LeftSource);
			Assert.AreEqual(rightSource, testing.RightSource);

			void test()
			{
				testing.ValidateConsistency();
				var leftSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)leftSource));

				if (leftSourceValue != null)
				{		
					leftSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					leftSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					leftSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					leftSourceValue[2].Active = !leftSourceValue[2].Active;
					testing.ValidateConsistency();
					leftSourceValue[2].Num = leftSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					leftSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					leftSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					leftSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var rightSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)rightSource));

				if (rightSourceValue != null)
				{		
					rightSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					rightSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					rightSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					rightSourceValue[2].Active = !rightSourceValue[2].Active;
					testing.ValidateConsistency();
					rightSourceValue[2].Num = rightSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					rightSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					rightSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					rightSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestZipping12()
		{
			ObservableCollection<Item> leftSource = getItems();
			ObservableCollection<Item> rightSource = getItems();
			OcConsumer consumer = new OcConsumer();
			var testing = leftSource.Zipping<Item, Item>(
				rightSource).For(consumer);

			Assert.AreEqual(leftSource, testing.LeftSource);
			Assert.AreEqual(rightSource, testing.RightSource);

			void test()
			{
				testing.ValidateConsistency();
				var leftSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)leftSource));

				if (leftSourceValue != null)
				{		
					leftSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					leftSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					leftSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					leftSourceValue[2].Active = !leftSourceValue[2].Active;
					testing.ValidateConsistency();
					leftSourceValue[2].Num = leftSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					leftSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					leftSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					leftSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var rightSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)rightSource));

				if (rightSourceValue != null)
				{		
					rightSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					rightSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					rightSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					rightSourceValue[2].Active = !rightSourceValue[2].Active;
					testing.ValidateConsistency();
					rightSourceValue[2].Num = rightSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					rightSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					rightSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					rightSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
			}

			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestZipping13()
		{
			System.Collections.Specialized.INotifyCollectionChanged leftSource = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> rightSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = leftSource.Zipping<Item, Item>(
				rightSourceScalar).For(consumer);

			Assert.AreEqual(leftSource, testing.LeftSource);
			Assert.AreEqual(rightSourceScalar, testing.RightSourceScalar);

			void test()
			{
				testing.ValidateConsistency();
				var leftSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)leftSource));

				if (leftSourceValue != null)
				{		
					leftSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					leftSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					leftSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					leftSourceValue[2].Active = !leftSourceValue[2].Active;
					testing.ValidateConsistency();
					leftSourceValue[2].Num = leftSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					leftSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					leftSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					leftSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var rightSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)rightSourceScalar.Value));

				if (rightSourceScalarValue != null)
				{		
					rightSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					rightSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					rightSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					rightSourceScalarValue[2].Active = !rightSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					rightSourceScalarValue[2].Num = rightSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					rightSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					rightSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					rightSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)rightSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)rightSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestZipping14()
		{
			System.Collections.Specialized.INotifyCollectionChanged leftSource = getItems();
			Scalar<ObservableCollection<Item>> rightSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = leftSource.Zipping<Item, Item>(
				rightSourceScalar).For(consumer);

			Assert.AreEqual(leftSource, testing.LeftSource);
			Assert.AreEqual(rightSourceScalar, testing.RightSourceScalar);

			void test()
			{
				testing.ValidateConsistency();
				var leftSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)leftSource));

				if (leftSourceValue != null)
				{		
					leftSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					leftSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					leftSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					leftSourceValue[2].Active = !leftSourceValue[2].Active;
					testing.ValidateConsistency();
					leftSourceValue[2].Num = leftSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					leftSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					leftSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					leftSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var rightSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)rightSourceScalar.Value));

				if (rightSourceScalarValue != null)
				{		
					rightSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					rightSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					rightSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					rightSourceScalarValue[2].Active = !rightSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					rightSourceScalarValue[2].Num = rightSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					rightSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					rightSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					rightSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
			}

			test();

			((Scalar<ObservableCollection<Item>>)rightSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)rightSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestZipping15()
		{
			ObservableCollection<Item> leftSource = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> rightSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = leftSource.Zipping<Item, Item>(
				rightSourceScalar).For(consumer);

			Assert.AreEqual(leftSource, testing.LeftSource);
			Assert.AreEqual(rightSourceScalar, testing.RightSourceScalar);

			void test()
			{
				testing.ValidateConsistency();
				var leftSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)leftSource));

				if (leftSourceValue != null)
				{		
					leftSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					leftSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					leftSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					leftSourceValue[2].Active = !leftSourceValue[2].Active;
					testing.ValidateConsistency();
					leftSourceValue[2].Num = leftSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					leftSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					leftSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					leftSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var rightSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)rightSourceScalar.Value));

				if (rightSourceScalarValue != null)
				{		
					rightSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					rightSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					rightSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					rightSourceScalarValue[2].Active = !rightSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					rightSourceScalarValue[2].Num = rightSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					rightSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					rightSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					rightSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)rightSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)rightSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		
		[Test, Combinatorial]
		public void TestZipping16()
		{
			ObservableCollection<Item> leftSource = getItems();
			Scalar<ObservableCollection<Item>> rightSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			OcConsumer consumer = new OcConsumer();
			var testing = leftSource.Zipping<Item, Item>(
				rightSourceScalar).For(consumer);

			Assert.AreEqual(leftSource, testing.LeftSource);
			Assert.AreEqual(rightSourceScalar, testing.RightSourceScalar);

			void test()
			{
				testing.ValidateConsistency();
				var leftSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)leftSource));

				if (leftSourceValue != null)
				{		
					leftSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					leftSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					leftSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					leftSourceValue[2].Active = !leftSourceValue[2].Active;
					testing.ValidateConsistency();
					leftSourceValue[2].Num = leftSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					leftSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					leftSourceValue.RemoveAt(1);
					testing.ValidateConsistency();
					leftSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					leftSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var rightSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)rightSourceScalar.Value));

				if (rightSourceScalarValue != null)
				{		
					rightSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					rightSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					rightSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					rightSourceScalarValue[2].Active = !rightSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					rightSourceScalarValue[2].Num = rightSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					rightSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					rightSourceScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					rightSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					rightSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
			}

			test();

			((Scalar<ObservableCollection<Item>>)rightSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)rightSourceScalar).Change(null);
			test();
			consumer.Dispose();
		}
		#endregion
	}
}
