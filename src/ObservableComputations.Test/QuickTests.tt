<#@ template  debug="true" hostSpecific="true" #>
<#@ output extension="generated.cs" #>
<#@ Assembly Name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="System.Text.RegularExpressions" #> 
<#@ output extension=".generated.cs"#>
<#@ include file=".\..\ObservableComputations\ExtensionMethods.ttinclude" #>
using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Collections.ObjectModel;
using NUnit.Framework;
using ObservableComputations;
using ObservableComputations.ExtentionMethods;

namespace ObservableComputations.Test
{
	[TestFixture]
	public partial class QuickTests
	{
<#
	foreach (var extentionMethodGroup in 
        GetExtentionMethods().Where(em => 
            em.Name != "Using" 
            && em.Name != "Computing"
            && em.Name != "Differing"
            && em.Name != "PreviousTracking"
            && em.Name != "WeakPreviousTracking"
            && em.Name != "PropertyAccessing"
            && em.Name != "CollectionDispatching"
            && em.Name != "ScalarDispatching"
            && em.Name != "ConcurrentDictionaring"
            && !em.Arguments.Any(ema => IsComputingArgument(ema)))
        .GroupBy(em => em.Name).OrderBy(emg => emg.Key))
	{

#>
		#region <#=extentionMethodGroup.Key#>

<#

		int testNum = 0;
		foreach (ExtentionMethod extentionMethod in extentionMethodGroup)
		{
			testNum++;
#>
		
		[Test]
		public void Test<#=extentionMethod.Name#><#=testNum.ToString("00")#>()
		{
<#
			List<(string, string, string, string, string)> arguments = new List<(string, string, string, string, string)>();
			var signatureArguments = extentionMethod.Arguments.Where(a => a.DefaultValue == null);
			foreach (ExtentionMethodArgument argument in signatureArguments )
			{
				(string, string, string, string) argumentValue = getArgumentValue(argument.Type, argument.Name, extentionMethod.Name);
				arguments.Add((argumentValue.Item3, argument.Name, argumentValue.Item1, argumentValue.Item2, argumentValue.Item4));
			}

			foreach (var argument in arguments)
			{
#>
			<#=argument.Item1#> <#=argument.Item2#> = <#=argument.Item3#>;
<#
			}

			string genericParamsValues = getTestType(extentionMethod.GenericParameters, extentionMethod.Name);
#>
			
			var testing = <#=arguments.First().Item2#>.<#=extentionMethod.Name#><#=genericParamsValues#>(<#=arguments.Count == 1 ? ");" : ""#>
<#
			int index = 0;
			foreach (var argument in arguments.Skip(1))
			{
#>
				<#=argument.Item2#><#=index == arguments.Count() - 2 ? ");" : ","#>
<#
					index++;
			}
#>

			void test()
			{
				testing.ValidateConsistency();
<#
			foreach (var argument in arguments.Where(a => (a.Item2.Contains("source") || a.Item2.Contains("innerSource") || a.Item2.Contains("outerSource")) && !a.Item2.Contains("sources")))
			{
				string scalarValueAccessor = argument.Item1.Contains("Scalar") ? ".Value" : "";
#>
				var <#=argument.Item2#>Value = ((ObservableCollection<Item>)((<#=argument.Item5#>)<#=argument.Item2#><#=scalarValueAccessor#>)<#=argument.Item4#>);

				if (<#=argument.Item2#>Value != null)
				{		
					<#=argument.Item2#>Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					<#=argument.Item2#>Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					<#=argument.Item2#>Value.RemoveAt(3);
					testing.ValidateConsistency();
					<#=argument.Item2#>Value.Move(1, 3);
					testing.ValidateConsistency();
					<#=argument.Item2#>Value[2].Active = !<#=argument.Item2#>Value[2].Active;
					testing.ValidateConsistency();
					<#=argument.Item2#>Value[2].Num = <#=argument.Item2#>Value[2].Num + 1;
					testing.ValidateConsistency();
					<#=argument.Item2#>Value.RemoveAt(0);
					testing.ValidateConsistency();
					<#=argument.Item2#>Value.RemoveAt(0);
					testing.ValidateConsistency();
					<#=argument.Item2#>Value.RemoveAt(0);
					testing.ValidateConsistency();
					<#=argument.Item2#>Value.RemoveAt(0);
					testing.ValidateConsistency();
					<#=argument.Item2#>Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					<#=argument.Item2#>Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
<#
			}

			var sourcesArgument = arguments.Where(a => a.Item2.Contains("sources"));
			if (sourcesArgument.Count() != 0)
			{
				string scalarValueAccessor = sourcesArgument.First().Item1.Contains("Scalar") ? ".Value" : "";
#>
				var <#=sourcesArgument.First().Item2#>Value = ((ObservableCollection<ObservableCollection<Item>>)((<#=sourcesArgument.First().Item5#>)<#=sourcesArgument.First().Item2#><#=scalarValueAccessor#>)<#=sourcesArgument.First().Item4#>);
				
				if (<#=sourcesArgument.First().Item2#>Value != null)
				{
					<#=sourcesArgument.First().Item2#>Value.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true)}));
					testing.ValidateConsistency();
					<#=sourcesArgument.First().Item2#>Value.RemoveAt(1);
					testing.ValidateConsistency();
					<#=sourcesArgument.First().Item2#>Value.Move(0, 1);
					testing.ValidateConsistency();
				}

<#
			}

#>

				IList listSource;
<#

			foreach (var argument in arguments.Where(a => (a.Item2.Contains("source") || a.Item2.Contains("innerSource") || a.Item2.Contains("outerSource"))))
			{
				string scalarValueAccessor = argument.Item1.Contains("Scalar") ? ".Value" : "";
#>
				listSource = ((IList)((<#=argument.Item5#>)<#=argument.Item2#><#=scalarValueAccessor#>)<#=argument.Item4#>);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

<#
			}




			foreach (var argument in arguments.Where(a => (a.Item2.Contains("source") || a.Item2.Contains("innerSource") || a.Item2.Contains("outerSource")) && !a.Item2.Contains("sources")))
			{
				string scalarValueAccessor = argument.Item1.Contains("Scalar") ? ".Value" : "";
#>
				if (<#=argument.Item2#>Value != null)
				{
					<#=argument.Item2#>Value.Insert(0, new QuickTests.Item(1, true));
					<#=argument.Item2#>Value.Insert(1, new QuickTests.Item(2, true));
					<#=argument.Item2#>Value.Insert(2, new QuickTests.Item(3, true));
					<#=argument.Item2#>Value.Insert(3, new QuickTests.Item(3, true));
					<#=argument.Item2#>Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
<#
			}

			if (sourcesArgument.Count() != 0)
			{
				string scalarValueAccessor = sourcesArgument.First().Item1.Contains("Scalar") ? ".Value" : "";
#>
				if (<#=sourcesArgument.First().Item2#>Value != null)
				{
					<#=sourcesArgument.First().Item2#>Value.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true), new Item(2, true), new Item(3, true), new Item(4, true), new Item(5, true)}));
					<#=sourcesArgument.First().Item2#>Value.Insert(0, new ObservableCollection<Item>(new []{new Item(6, true), new Item(7, true), new Item(8, true), new Item(8, true), new Item(10, true)}));
					testing.ValidateConsistency();
				}

<#
			}
#>
			}

			test();
<#


			var scalarArguments = arguments.Where(a => a.Item2.ToUpper().Contains("SCALAR"));
			var scalarSourceArguments = scalarArguments.Where(a => a.Item2.ToUpper().Contains("SOURCE"));
			var scalarNotSourceArguments = scalarArguments.Where(a => !a.Item2.ToUpper().Contains("SOURCE"));

			foreach (var argument in scalarNotSourceArguments.Concat(scalarSourceArguments))
			{
#>

			((Scalar<<#=argument.Item5#>>)<#=argument.Item2#>).Touch();
			test();
<#				
				IEnumerable<string> scalarAlternativeValues = getScalarAlternativeValues(argument.Item5, argument.Item2, extentionMethod.Name);

				foreach (var scalarAlternativeValue in scalarAlternativeValues)
				{
#>
			((Scalar<<#=argument.Item5#>>)<#=argument.Item2#>).Change(<#=scalarAlternativeValue#>);
			test();
<#	
				}
			}
#>
		}
<#
		}
#>
		#endregion
<#
    }
#>
	}
}
<#+
	private string FirstCharToLower(string name)
	{
		return name[0].ToString().ToLower() + name.Substring(1, name.Length - 1);
	}

	private string getTestType(string type, string extentionMethodName)
	{
		type = type.Replace("TSourceItem, TResult, TResult", "int, int, int");
		if (extentionMethodName == "Aggregating") type = type.Replace("TSourceItem, TResult", "int, int");
		if (extentionMethodName == "Maximazing" 
			|| extentionMethodName == "Minimazing"
			|| extentionMethodName == "Summarizing"
			|| extentionMethodName == "Averaging"
			|| extentionMethodName == "Ordering"
			|| extentionMethodName == "ThenOrdering") 
			type = type.Replace("TSourceItem", "int");
		type = type.Replace("TSourceItem1", "Item");
		type = type.Replace("TSourceItem2", "Item");
		type = type.Replace("TOuterSourceItem", "Item");
		type = type.Replace("TInnerSourceItem", "Item");
		type = type.Replace("TLeftSourceItem", "Item");
		type = type.Replace("TRightSourceItem", "Item");
		type = type.Replace("TSourceItem", "Item");
		type = type.Replace("TResultItem", "object");
		type = type.Replace("TKey", "int");
		type = type.Replace("TValue", "int");
		type = type.Replace("TOrderingValue", "int");
		if (extentionMethodName == "Averaging") 
			type = type.Replace("TResult", "double");
		else
			type = type.Replace("TResult", "int");
		type = type.Replace("ObservableComputations.IReadScalar", "Scalar");
		return type;
	}

	private string iReadScalarToScalar(string type)
	{
		type = type.Replace("IReadScalar", "Scalar");
		return type;
	}

	private (string, string, string, string) getArgumentValue(string type, string argumentName, string extentionMethodName)
	{
		string checkingType = type;
		string result = null;
		string sourceAccessor = "";
		string variableType = null;

		bool scalar = false;
		Regex regex = new Regex(@"ObservableComputations\.IReadScalar<(?<scalarType>.+)>");
		MatchCollection matchCollection = regex.Matches(type);
		if (matchCollection.Count > 0)
		{
			checkingType = matchCollection[0].Groups["scalarType"].Value;
			scalar = true;
		}

		switch (checkingType)
		{
			case "System.Collections.Specialized.INotifyCollectionChanged":
				if (extentionMethodName == "Aggregating" 
					|| extentionMethodName == "Maximazing"
					|| extentionMethodName == "Minimazing"
					|| extentionMethodName == "Summarizing"
					|| extentionMethodName == "Averaging"
					|| extentionMethodName == "Ordering")
				{
					result = "getItems().Selecting(i => i.Num)";
					variableType = "Selecting<Item, int>";
					sourceAccessor = "?.Source";
				}
				else if (extentionMethodName == "StringsConcatenating")
				{
					result = "getItems().Selecting(i => i.Num.ToString())";
					variableType = "Selecting<Item, string>";
					sourceAccessor = "?.Source";
				}
				else
				{
					result = argumentName.Contains("sources") ? "getCollectionsOfItems()" : "getItems()";
				}
				break;
			case "ObservableCollection<TSourceItem1>":
			case "ObservableCollection<TSourceItem2>":
			case "ObservableCollection<TOuterSourceItem>":
			case "ObservableCollection<TInnerSourceItem>":
			case "ObservableCollection<TLeftSourceItem>":
			case "ObservableCollection<TRightSourceItem>":
			case "ObservableCollection<TSourceItem>":
				if (extentionMethodName == "Aggregating"					
					|| extentionMethodName == "Maximazing"
					|| extentionMethodName == "Minimazing"
					|| extentionMethodName == "Summarizing"
					|| extentionMethodName == "Averaging"
					|| extentionMethodName == "Ordering")
				{
					result = "getItems().Selecting(i => i.Num)";
					variableType = "Selecting<Item, int>";
					sourceAccessor = "?.Source";
					checkingType = "ObservableCollection<int>";
				}
				else if (extentionMethodName == "StringsConcatenating")
				{
					result = "getItems().Selecting(i => i.Num.ToString())";
					variableType = "Selecting<Item, string>";
					sourceAccessor = "?.Source";
					checkingType = "ObservableCollection<string>";
				}
				else
				{
					result = "getItems()";
				}
				break;
			case "ObservableCollection<ObservableCollection<TSourceItem>>":
				result = "getCollectionsOfItems()";
				break;
			case "TSourceItem":
				if (extentionMethodName == "Maximazing"
					|| extentionMethodName == "Minimazing")
					result = "0";
				else if (extentionMethodName == "FirstComputing"
					|| extentionMethodName == "LastComputing")
					result = "null";
				else
					result = "new QuickTests.Item(1, true)";
				break;
			case "System.Linq.Expressions.Expression<System.Func<TSourceItem, TKey>>":
			case "System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TKey>>":
			case "System.Linq.Expressions.Expression<System.Func<TInnerSourceItem, TKey>>":
			case "System.Linq.Expressions.Expression<System.Func<TLeftSourceItem, TKey>>":
			case "System.Linq.Expressions.Expression<System.Func<TRightSourceItem, TKey>>":
				result =  "i => i.Id";
				break;
			case "System.Linq.Expressions.Expression<System.Func<TSourceItem, TValue>>":
				result =  "i => i.Num";
				break;
			case "System.Collections.Generic.IEqualityComparer<TSourceItem>":
				result =  "EqualityComparer<Item>.Default";
				break;
			case "System.Collections.Generic.IEqualityComparer<TKey>":
				result =  "EqualityComparer<int>.Default";
				break;
			case "System.Linq.Expressions.Expression<System.Func<TSourceItem, bool>>":
				result =  "i => i.Active";
				break;
			case "System.Linq.Expressions.Expression<System.Func<TOuterSourceItem, TInnerSourceItem, bool>>":
				result =  "(i1, i2) => i1.Num == i2.Num";
				break;
			case "System.Linq.Expressions.Expression<System.Func<TSourceItem, TOrderingValue>>":
				result =  "i => i";
				break;
			case "System.ComponentModel.ListSortDirection":
				result =  "System.ComponentModel.ListSortDirection.Ascending";
				break;
			case "System.Collections.Generic.IComparer<TOrderingValue>":
				result =  "Comparer<int>.Default";
				break;
			case "System.Linq.Expressions.Expression<System.Func<TSourceItem, TResultItem>>":
				result =  "i => i.Num";
				break;
			case "int":
                if (argumentName == "pageSize") result = "2";
                else if (argumentName == "initialPage") result = "1";
				else result =  argumentName.Contains("count") ? "3" : "0";
				break;
			case "ObservableComputations.IOrdering<TSourceItem>":
				result =  "getItems().Selecting(i => i.Num).Ordering(i => i, 32)";
				sourceAccessor = ".GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source)";
				break;
			case "(System.Func<TSourceItem, TResult, TResult> aggregateFunc, System.Func<TSourceItem, TResult, TResult> deaggregateFunc)":
				result =  "((i, r) => i + r, (i, r) => r - i)";
				break;
			case "System.Linq.Expressions.Expression<System.Func<TSourceItem, int, bool>>":
				result =  "(i, ind) => i.Active";
				break;
			case "string":
				result =  @"""&""";
				break;
			case "System.Linq.Expressions.Expression<System.Func<TResult>>":
				result =  "() => 1";
				break;
			case "System.Collections.Generic.IComparer<TSourceItem>":
				result =  "Comparer<int>.Default";
				break;
			case "System.Linq.Expressions.Expression<System.Func<TSourceItem, System.Collections.Specialized.INotifyCollectionChanged>>":
				result =  "i => i.Items";
				break;
			case "System.Linq.Expressions.Expression<System.Func<TSourceItem, int, System.Collections.Specialized.INotifyCollectionChanged>>":
				result =  "(i, ind) => i.Items";
				break;
            case "ObservableComputations.IReadScalar<TResult>":             
                break;
			default:
				throw new Exception($"Unexpected type {type}");
		}

		string scalarType;
		if (variableType == null)
		{
			variableType = getTestType(type, extentionMethodName);
			scalarType = getTestType(checkingType, extentionMethodName);
			if (scalar) result = $"getScalar<{scalarType}>({result})";
		}
		else
		{
			if (scalar) result = $"getScalar<{variableType}>({result})";
			scalarType = variableType;
			variableType = scalar ? $"IReadScalar<{getTestType(checkingType, extentionMethodName)}>" : variableType;
		}

		return (result, sourceAccessor, variableType, scalarType);
	}

	private IEnumerable<string> getScalarAlternativeValues(string scalarType, string argumentName, string extentionMethodName)
	{
		List<string> result = new List<string>();

		switch (scalarType)
		{
			case "System.Collections.Specialized.INotifyCollectionChanged":
			case "ObservableCollection<Item>":
			case "ObservableCollection<ObservableCollection<Item>>":
				result.Add("null");
				break;
			case "Item":
				if (extentionMethodName == "Maximazing"
					|| extentionMethodName == "Minimazing")
					result.Add("1");
				else if (extentionMethodName == "FirstComputing"
					|| extentionMethodName == "LastComputing")
					result.Add("new QuickTests.Item(1, true)");
				else
					result.Add("null");
				break;
			case "System.Collections.Generic.IEqualityComparer<Item>":
				if (extentionMethodName != "ContainsComputing"
					&& extentionMethodName != "Excepting"
					&& extentionMethodName != "Intersecting") 
					result.Add("null");
				break;
			case "System.Collections.Generic.IEqualityComparer<int>":
				result.Add("null");
				break;
			case "System.ComponentModel.ListSortDirection":
				result.Add("System.ComponentModel.ListSortDirection.Descending");
				break;
			case "System.Collections.Generic.IComparer<int>":
				result.Add("null");
				break;
			case "int":
				result.Add(argumentName.Contains("count") ? "4" : "1");
				break;
			case "ObservableComputations.IOrdering<int>":
				result.Add("null");
				break;
			case "string":
				result.Add(@"""&&&""");
				result.Add(@"""&&""");
				break;
			case "System.Collections.Generic.IComparer<Item>":
				result.Add("null");
				break;
			case "Selecting<Item, int>":
				result.Add("null");
				break;
			case "Selecting<Item, string>":
				result.Add("null");
				break;
			default:
				throw new Exception($"Unexpected scalar type {scalarType}");
		}


		return result;
	}
#>
