 
 
 



using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Collections.ObjectModel;
using NUnit.Framework;
using IBCode.ObservableComputations.Common;
using IBCode.ObservableComputations.Common.Interface;

namespace IBCode.ObservableComputations.Test
{
	[TestFixture]
	public partial class QuickTests
	{
		#region Aggregating

		
		[Test]
		public void TestAggregating01()
		{
			IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			(System.Func<int, int, int> aggregateFunc, System.Func<int, int, int> deaggregateFunc) funcs = ((i, r) => i + r, (i, r) => r - i);
			
			var testing = sourceScalar.Aggregating<int, int>(
				funcs);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestAggregating02()
		{
			IReadScalar<ObservableCollection<int>> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			(System.Func<int, int, int> aggregateFunc, System.Func<int, int, int> deaggregateFunc) funcs = ((i, r) => i + r, (i, r) => r - i);
			
			var testing = sourceScalar.Aggregating<int, int>(
				funcs);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestAggregating03()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			(System.Func<int, int, int> aggregateFunc, System.Func<int, int, int> deaggregateFunc) funcs = ((i, r) => i + r, (i, r) => r - i);
			
			var testing = source.Aggregating<int, int>(
				funcs);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestAggregating04()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			(System.Func<int, int, int> aggregateFunc, System.Func<int, int, int> deaggregateFunc) funcs = ((i, r) => i + r, (i, r) => r - i);
			
			var testing = source.Aggregating<int, int>(
				funcs);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		#endregion
		#region AllComputing

		
		[Test]
		public void TestAllComputing01()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			
			var testing = sourceScalar.AllComputing<Item>(
				predicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestAllComputing02()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			
			var testing = sourceScalar.AllComputing<Item>(
				predicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestAllComputing03()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			
			var testing = source.AllComputing<Item>(
				predicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestAllComputing04()
		{
			ObservableCollection<Item> source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			
			var testing = source.AllComputing<Item>(
				predicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		#endregion
		#region AnyComputing

		
		[Test]
		public void TestAnyComputing01()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			
			var testing = sourceScalar.AnyComputing<Item>(
				predicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestAnyComputing02()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			
			var testing = sourceScalar.AnyComputing<Item>(
				predicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestAnyComputing03()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			
			var testing = source.AnyComputing<Item>(
				predicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestAnyComputing04()
		{
			ObservableCollection<Item> source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			
			var testing = source.AnyComputing<Item>(
				predicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		#endregion
		#region Appending

		
		[Test]
		public void TestAppending01()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			Item item = new QuickTests.Item(1, true);
			
			var testing = source.Appending<Item>(
				item);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestAppending02()
		{
			ObservableCollection<Item> source = getItems();
			Item item = new QuickTests.Item(1, true);
			
			var testing = source.Appending<Item>(
				item);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestAppending03()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			Scalar<Item> itemScalar = getScalar<Item>(new QuickTests.Item(1, true));
			
			var testing = source.Appending<Item>(
				itemScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Item>)itemScalar).Touch();
			test();
			((Scalar<Item>)itemScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestAppending04()
		{
			ObservableCollection<Item> source = getItems();
			Scalar<Item> itemScalar = getScalar<Item>(new QuickTests.Item(1, true));
			
			var testing = source.Appending<Item>(
				itemScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Item>)itemScalar).Touch();
			test();
			((Scalar<Item>)itemScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestAppending05()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Item item = new QuickTests.Item(1, true);
			
			var testing = sourceScalar.Appending<Item>(
				item);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestAppending06()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Item item = new QuickTests.Item(1, true);
			
			var testing = sourceScalar.Appending<Item>(
				item);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestAppending07()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<Item> itemScalar = getScalar<Item>(new QuickTests.Item(1, true));
			
			var testing = sourceScalar.Appending<Item>(
				itemScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Item>)itemScalar).Touch();
			test();
			((Scalar<Item>)itemScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestAppending08()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<Item> itemScalar = getScalar<Item>(new QuickTests.Item(1, true));
			
			var testing = sourceScalar.Appending<Item>(
				itemScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Item>)itemScalar).Touch();
			test();
			((Scalar<Item>)itemScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
		}
		#endregion
		#region Averaging

		
		[Test]
		public void TestAveraging01()
		{
			IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			
			var testing = sourceScalar.Averaging<int, double>();

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestAveraging02()
		{
			IReadScalar<ObservableCollection<int>> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			
			var testing = sourceScalar.Averaging<int, double>();

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestAveraging03()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			
			var testing = source.Averaging<int, double>();

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestAveraging04()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			
			var testing = source.Averaging<int, double>();

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		#endregion
		#region Casting

		
		[Test]
		public void TestCasting01()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			
			var testing = sourceScalar.Casting<object>();

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestCasting02()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			
			var testing = source.Casting<object>();

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		#endregion
		#region Concatenating

		
		[Test]
		public void TestConcatenating01()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourcesScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getCollectionsOfItems());
			
			var testing = sourcesScalar.Concatenating<Item>();

			void test()
			{
				testing.ValidateConsistency();
				var sourcesScalarValue = ((ObservableCollection<ObservableCollection<Item>>)((System.Collections.Specialized.INotifyCollectionChanged)sourcesScalar.Value));
				
				if (sourcesScalarValue != null)
				{
					sourcesScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true)}));
					testing.ValidateConsistency();
					sourcesScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourcesScalarValue.Move(0, 1);
					testing.ValidateConsistency();
				}


				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourcesScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourcesScalarValue != null)
				{
					sourcesScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true), new Item(2, true), new Item(3, true), new Item(4, true), new Item(5, true)}));
					sourcesScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(6, true), new Item(7, true), new Item(8, true), new Item(8, true), new Item(10, true)}));
					testing.ValidateConsistency();
				}

			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourcesScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourcesScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestConcatenating02()
		{
			Scalar<ObservableCollection<ObservableCollection<Item>>> sourcesScalar = getScalar<ObservableCollection<ObservableCollection<Item>>>(getCollectionsOfItems());
			
			var testing = sourcesScalar.Concatenating<Item>();

			void test()
			{
				testing.ValidateConsistency();
				var sourcesScalarValue = ((ObservableCollection<ObservableCollection<Item>>)((ObservableCollection<ObservableCollection<Item>>)sourcesScalar.Value));
				
				if (sourcesScalarValue != null)
				{
					sourcesScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true)}));
					testing.ValidateConsistency();
					sourcesScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourcesScalarValue.Move(0, 1);
					testing.ValidateConsistency();
				}


				IList listSource;
				listSource = ((IList)((ObservableCollection<ObservableCollection<Item>>)sourcesScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourcesScalarValue != null)
				{
					sourcesScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true), new Item(2, true), new Item(3, true), new Item(4, true), new Item(5, true)}));
					sourcesScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(6, true), new Item(7, true), new Item(8, true), new Item(8, true), new Item(10, true)}));
					testing.ValidateConsistency();
				}

			}

			test();

			((Scalar<ObservableCollection<ObservableCollection<Item>>>)sourcesScalar).Touch();
			test();
			((Scalar<ObservableCollection<ObservableCollection<Item>>>)sourcesScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestConcatenating03()
		{
			System.Collections.Specialized.INotifyCollectionChanged sources = getCollectionsOfItems();
			
			var testing = sources.Concatenating<Item>();

			void test()
			{
				testing.ValidateConsistency();
				var sourcesValue = ((ObservableCollection<ObservableCollection<Item>>)((System.Collections.Specialized.INotifyCollectionChanged)sources));
				
				if (sourcesValue != null)
				{
					sourcesValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true)}));
					testing.ValidateConsistency();
					sourcesValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourcesValue.Move(0, 1);
					testing.ValidateConsistency();
				}


				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sources));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourcesValue != null)
				{
					sourcesValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true), new Item(2, true), new Item(3, true), new Item(4, true), new Item(5, true)}));
					sourcesValue.Insert(0, new ObservableCollection<Item>(new []{new Item(6, true), new Item(7, true), new Item(8, true), new Item(8, true), new Item(10, true)}));
					testing.ValidateConsistency();
				}

			}

			test();
		}
		
		[Test]
		public void TestConcatenating04()
		{
			ObservableCollection<ObservableCollection<Item>> sources = getCollectionsOfItems();
			
			var testing = sources.Concatenating<Item>();

			void test()
			{
				testing.ValidateConsistency();
				var sourcesValue = ((ObservableCollection<ObservableCollection<Item>>)((ObservableCollection<ObservableCollection<Item>>)sources));
				
				if (sourcesValue != null)
				{
					sourcesValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true)}));
					testing.ValidateConsistency();
					sourcesValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourcesValue.Move(0, 1);
					testing.ValidateConsistency();
				}


				IList listSource;
				listSource = ((IList)((ObservableCollection<ObservableCollection<Item>>)sources));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourcesValue != null)
				{
					sourcesValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true), new Item(2, true), new Item(3, true), new Item(4, true), new Item(5, true)}));
					sourcesValue.Insert(0, new ObservableCollection<Item>(new []{new Item(6, true), new Item(7, true), new Item(8, true), new Item(8, true), new Item(10, true)}));
					testing.ValidateConsistency();
				}

			}

			test();
		}
		
		[Test]
		public void TestConcatenating05()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			
			var testing = source1.Concatenating<Item>(
				source2);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestConcatenating06()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			
			var testing = source1.Concatenating<Item>(
				source2);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestConcatenating07()
		{
			ObservableCollection<Item> source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			
			var testing = source1.Concatenating<Item>(
				source2);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestConcatenating08()
		{
			ObservableCollection<Item> source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			
			var testing = source1.Concatenating<Item>(
				source2);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestConcatenating09()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			
			var testing = source1Scalar.Concatenating<Item>(
				source2);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestConcatenating10()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			ObservableCollection<Item> source2 = getItems();
			
			var testing = source1Scalar.Concatenating<Item>(
				source2);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestConcatenating11()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			
			var testing = source1Scalar.Concatenating<Item>(
				source2);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestConcatenating12()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			ObservableCollection<Item> source2 = getItems();
			
			var testing = source1Scalar.Concatenating<Item>(
				source2);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestConcatenating13()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			
			var testing = source1Scalar.Concatenating<Item>(
				source2Scalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestConcatenating14()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			
			var testing = source1Scalar.Concatenating<Item>(
				source2Scalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestConcatenating15()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			
			var testing = source1Scalar.Concatenating<Item>(
				source2Scalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestConcatenating16()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			
			var testing = source1Scalar.Concatenating<Item>(
				source2Scalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestConcatenating17()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			
			var testing = source1.Concatenating<Item>(
				source2Scalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestConcatenating18()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			
			var testing = source1.Concatenating<Item>(
				source2Scalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestConcatenating19()
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			
			var testing = source1.Concatenating<Item>(
				source2Scalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestConcatenating20()
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			
			var testing = source1.Concatenating<Item>(
				source2Scalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		#endregion
		#region ContainsComputing

		
		[Test]
		public void TestContainsComputing01()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<Item> itemScalar = getScalar<Item>(new QuickTests.Item(1, true));
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			
			var testing = sourceScalar.ContainsComputing<Item>(
				itemScalar,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Item>)itemScalar).Touch();
			test();
			((Scalar<Item>)itemScalar).Change(null);
			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestContainsComputing02()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<Item> itemScalar = getScalar<Item>(new QuickTests.Item(1, true));
			
			var testing = sourceScalar.ContainsComputing<Item>(
				itemScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Item>)itemScalar).Touch();
			test();
			((Scalar<Item>)itemScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestContainsComputing03()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<Item> itemScalar = getScalar<Item>(new QuickTests.Item(1, true));
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			
			var testing = sourceScalar.ContainsComputing<Item>(
				itemScalar,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Item>)itemScalar).Touch();
			test();
			((Scalar<Item>)itemScalar).Change(null);
			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestContainsComputing04()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<Item> itemScalar = getScalar<Item>(new QuickTests.Item(1, true));
			
			var testing = sourceScalar.ContainsComputing<Item>(
				itemScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Item>)itemScalar).Touch();
			test();
			((Scalar<Item>)itemScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestContainsComputing05()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Item item = new QuickTests.Item(1, true);
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			
			var testing = sourceScalar.ContainsComputing<Item>(
				item,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestContainsComputing06()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Item item = new QuickTests.Item(1, true);
			
			var testing = sourceScalar.ContainsComputing<Item>(
				item);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestContainsComputing07()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Item item = new QuickTests.Item(1, true);
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			
			var testing = sourceScalar.ContainsComputing<Item>(
				item,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestContainsComputing08()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Item item = new QuickTests.Item(1, true);
			
			var testing = sourceScalar.ContainsComputing<Item>(
				item);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestContainsComputing09()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<Item> itemScalar = getScalar<Item>(new QuickTests.Item(1, true));
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			
			var testing = sourceScalar.ContainsComputing<Item>(
				itemScalar,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Item>)itemScalar).Touch();
			test();
			((Scalar<Item>)itemScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestContainsComputing10()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<Item> itemScalar = getScalar<Item>(new QuickTests.Item(1, true));
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			
			var testing = sourceScalar.ContainsComputing<Item>(
				itemScalar,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Item>)itemScalar).Touch();
			test();
			((Scalar<Item>)itemScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestContainsComputing11()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Item item = new QuickTests.Item(1, true);
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			
			var testing = sourceScalar.ContainsComputing<Item>(
				item,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestContainsComputing12()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Item item = new QuickTests.Item(1, true);
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			
			var testing = sourceScalar.ContainsComputing<Item>(
				item,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestContainsComputing13()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			Scalar<Item> itemScalar = getScalar<Item>(new QuickTests.Item(1, true));
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			
			var testing = source.ContainsComputing<Item>(
				itemScalar,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Item>)itemScalar).Touch();
			test();
			((Scalar<Item>)itemScalar).Change(null);
			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
		}
		
		[Test]
		public void TestContainsComputing14()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			Scalar<Item> itemScalar = getScalar<Item>(new QuickTests.Item(1, true));
			
			var testing = source.ContainsComputing<Item>(
				itemScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Item>)itemScalar).Touch();
			test();
			((Scalar<Item>)itemScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestContainsComputing15()
		{
			ObservableCollection<Item> source = getItems();
			Scalar<Item> itemScalar = getScalar<Item>(new QuickTests.Item(1, true));
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			
			var testing = source.ContainsComputing<Item>(
				itemScalar,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Item>)itemScalar).Touch();
			test();
			((Scalar<Item>)itemScalar).Change(null);
			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
		}
		
		[Test]
		public void TestContainsComputing16()
		{
			ObservableCollection<Item> source = getItems();
			Scalar<Item> itemScalar = getScalar<Item>(new QuickTests.Item(1, true));
			
			var testing = source.ContainsComputing<Item>(
				itemScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Item>)itemScalar).Touch();
			test();
			((Scalar<Item>)itemScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestContainsComputing17()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			Item item = new QuickTests.Item(1, true);
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			
			var testing = source.ContainsComputing<Item>(
				item,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
		}
		
		[Test]
		public void TestContainsComputing18()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			Item item = new QuickTests.Item(1, true);
			
			var testing = source.ContainsComputing<Item>(
				item);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestContainsComputing19()
		{
			ObservableCollection<Item> source = getItems();
			Item item = new QuickTests.Item(1, true);
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			
			var testing = source.ContainsComputing<Item>(
				item,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
		}
		
		[Test]
		public void TestContainsComputing20()
		{
			ObservableCollection<Item> source = getItems();
			Item item = new QuickTests.Item(1, true);
			
			var testing = source.ContainsComputing<Item>(
				item);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestContainsComputing21()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			Scalar<Item> itemScalar = getScalar<Item>(new QuickTests.Item(1, true));
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			
			var testing = source.ContainsComputing<Item>(
				itemScalar,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Item>)itemScalar).Touch();
			test();
			((Scalar<Item>)itemScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestContainsComputing22()
		{
			ObservableCollection<Item> source = getItems();
			Scalar<Item> itemScalar = getScalar<Item>(new QuickTests.Item(1, true));
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			
			var testing = source.ContainsComputing<Item>(
				itemScalar,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Item>)itemScalar).Touch();
			test();
			((Scalar<Item>)itemScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestContainsComputing23()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			Item item = new QuickTests.Item(1, true);
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			
			var testing = source.ContainsComputing<Item>(
				item,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestContainsComputing24()
		{
			ObservableCollection<Item> source = getItems();
			Item item = new QuickTests.Item(1, true);
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			
			var testing = source.ContainsComputing<Item>(
				item,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		#endregion
		#region Crossing

		
		[Test]
		public void TestCrossing01()
		{
			System.Collections.Specialized.INotifyCollectionChanged outerSource = getItems();
			System.Collections.Specialized.INotifyCollectionChanged innerSource = getItems();
			
			var testing = outerSource.Crossing<Item, Item>(
				innerSource);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestCrossing02()
		{
			System.Collections.Specialized.INotifyCollectionChanged outerSource = getItems();
			ObservableCollection<Item> innerSource = getItems();
			
			var testing = outerSource.Crossing<Item, Item>(
				innerSource);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestCrossing03()
		{
			ObservableCollection<Item> outerSource = getItems();
			System.Collections.Specialized.INotifyCollectionChanged innerSource = getItems();
			
			var testing = outerSource.Crossing<Item, Item>(
				innerSource);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestCrossing04()
		{
			ObservableCollection<Item> outerSource = getItems();
			ObservableCollection<Item> innerSource = getItems();
			
			var testing = outerSource.Crossing<Item, Item>(
				innerSource);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestCrossing05()
		{
			System.Collections.Specialized.INotifyCollectionChanged outerSource = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			
			var testing = outerSource.Crossing<Item, Item>(
				innerSourceScalar);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestCrossing06()
		{
			System.Collections.Specialized.INotifyCollectionChanged outerSource = getItems();
			Scalar<ObservableCollection<Item>> innerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			
			var testing = outerSource.Crossing<Item, Item>(
				innerSourceScalar);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestCrossing07()
		{
			ObservableCollection<Item> outerSource = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			
			var testing = outerSource.Crossing<Item, Item>(
				innerSourceScalar);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestCrossing08()
		{
			ObservableCollection<Item> outerSource = getItems();
			Scalar<ObservableCollection<Item>> innerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			
			var testing = outerSource.Crossing<Item, Item>(
				innerSourceScalar);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestCrossing09()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged innerSource = getItems();
			
			var testing = outerSourceScalar.Crossing<Item, Item>(
				innerSource);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestCrossing10()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			ObservableCollection<Item> innerSource = getItems();
			
			var testing = outerSourceScalar.Crossing<Item, Item>(
				innerSource);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestCrossing11()
		{
			Scalar<ObservableCollection<Item>> outerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged innerSource = getItems();
			
			var testing = outerSourceScalar.Crossing<Item, Item>(
				innerSource);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestCrossing12()
		{
			Scalar<ObservableCollection<Item>> outerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			ObservableCollection<Item> innerSource = getItems();
			
			var testing = outerSourceScalar.Crossing<Item, Item>(
				innerSource);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestCrossing13()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			
			var testing = outerSourceScalar.Crossing<Item, Item>(
				innerSourceScalar);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestCrossing14()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<ObservableCollection<Item>> innerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			
			var testing = outerSourceScalar.Crossing<Item, Item>(
				innerSourceScalar);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestCrossing15()
		{
			Scalar<ObservableCollection<Item>> outerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			
			var testing = outerSourceScalar.Crossing<Item, Item>(
				innerSourceScalar);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestCrossing16()
		{
			Scalar<ObservableCollection<Item>> outerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<ObservableCollection<Item>> innerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			
			var testing = outerSourceScalar.Crossing<Item, Item>(
				innerSourceScalar);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Change(null);
			test();
		}
		#endregion
		#region Dictionaring

		
		[Test]
		public void TestDictionaring01()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> valueSelectorExpression = i => i.Num;
			System.Collections.Generic.IEqualityComparer<int> comparer = EqualityComparer<int>.Default;
			int capacity = 0;
			
			var testing = sourceScalar.Dictionaring<Item, int, int>(
				keySelectorExpression,
				valueSelectorExpression,
				comparer,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestDictionaring02()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> valueSelectorExpression = i => i.Num;
			System.Collections.Generic.IEqualityComparer<int> comparer = EqualityComparer<int>.Default;
			
			var testing = sourceScalar.Dictionaring<Item, int, int>(
				keySelectorExpression,
				valueSelectorExpression,
				comparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestDictionaring03()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> valueSelectorExpression = i => i.Num;
			int capacity = 0;
			
			var testing = sourceScalar.Dictionaring<Item, int, int>(
				keySelectorExpression,
				valueSelectorExpression,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestDictionaring04()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> valueSelectorExpression = i => i.Num;
			
			var testing = sourceScalar.Dictionaring<Item, int, int>(
				keySelectorExpression,
				valueSelectorExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestDictionaring05()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> valueSelectorExpression = i => i.Num;
			System.Collections.Generic.IEqualityComparer<int> comparer = EqualityComparer<int>.Default;
			int capacity = 0;
			
			var testing = sourceScalar.Dictionaring<Item, int, int>(
				keySelectorExpression,
				valueSelectorExpression,
				comparer,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestDictionaring06()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> valueSelectorExpression = i => i.Num;
			System.Collections.Generic.IEqualityComparer<int> comparer = EqualityComparer<int>.Default;
			
			var testing = sourceScalar.Dictionaring<Item, int, int>(
				keySelectorExpression,
				valueSelectorExpression,
				comparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestDictionaring07()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> valueSelectorExpression = i => i.Num;
			int capacity = 0;
			
			var testing = sourceScalar.Dictionaring<Item, int, int>(
				keySelectorExpression,
				valueSelectorExpression,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestDictionaring08()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> valueSelectorExpression = i => i.Num;
			
			var testing = sourceScalar.Dictionaring<Item, int, int>(
				keySelectorExpression,
				valueSelectorExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestDictionaring09()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> valueSelectorExpression = i => i.Num;
			System.Collections.Generic.IEqualityComparer<int> comparer = EqualityComparer<int>.Default;
			int capacity = 0;
			
			var testing = source.Dictionaring<Item, int, int>(
				keySelectorExpression,
				valueSelectorExpression,
				comparer,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestDictionaring10()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> valueSelectorExpression = i => i.Num;
			System.Collections.Generic.IEqualityComparer<int> comparer = EqualityComparer<int>.Default;
			
			var testing = source.Dictionaring<Item, int, int>(
				keySelectorExpression,
				valueSelectorExpression,
				comparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestDictionaring11()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> valueSelectorExpression = i => i.Num;
			int capacity = 0;
			
			var testing = source.Dictionaring<Item, int, int>(
				keySelectorExpression,
				valueSelectorExpression,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestDictionaring12()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> valueSelectorExpression = i => i.Num;
			
			var testing = source.Dictionaring<Item, int, int>(
				keySelectorExpression,
				valueSelectorExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestDictionaring13()
		{
			ObservableCollection<Item> source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> valueSelectorExpression = i => i.Num;
			System.Collections.Generic.IEqualityComparer<int> comparer = EqualityComparer<int>.Default;
			int capacity = 0;
			
			var testing = source.Dictionaring<Item, int, int>(
				keySelectorExpression,
				valueSelectorExpression,
				comparer,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestDictionaring14()
		{
			ObservableCollection<Item> source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> valueSelectorExpression = i => i.Num;
			System.Collections.Generic.IEqualityComparer<int> comparer = EqualityComparer<int>.Default;
			
			var testing = source.Dictionaring<Item, int, int>(
				keySelectorExpression,
				valueSelectorExpression,
				comparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestDictionaring15()
		{
			ObservableCollection<Item> source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> valueSelectorExpression = i => i.Num;
			int capacity = 0;
			
			var testing = source.Dictionaring<Item, int, int>(
				keySelectorExpression,
				valueSelectorExpression,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestDictionaring16()
		{
			ObservableCollection<Item> source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> valueSelectorExpression = i => i.Num;
			
			var testing = source.Dictionaring<Item, int, int>(
				keySelectorExpression,
				valueSelectorExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		#endregion
		#region Distincting

		
		[Test]
		public void TestDistincting01()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			int capacity = 0;
			
			var testing = sourceScalar.Distincting<Item>(
				equalityComparerScalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestDistincting02()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			
			var testing = sourceScalar.Distincting<Item>(
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestDistincting03()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			int capacity = 0;
			
			var testing = sourceScalar.Distincting<Item>(
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestDistincting04()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			
			var testing = sourceScalar.Distincting<Item>();

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestDistincting05()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			int capacity = 0;
			
			var testing = sourceScalar.Distincting<Item>(
				equalityComparerScalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestDistincting06()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			
			var testing = sourceScalar.Distincting<Item>(
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestDistincting07()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			int capacity = 0;
			
			var testing = sourceScalar.Distincting<Item>(
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestDistincting08()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			
			var testing = sourceScalar.Distincting<Item>();

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestDistincting09()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			int capacity = 0;
			
			var testing = source.Distincting<Item>(
				equalityComparerScalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestDistincting10()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			
			var testing = source.Distincting<Item>(
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestDistincting11()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			int capacity = 0;
			
			var testing = source.Distincting<Item>(
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestDistincting12()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			
			var testing = source.Distincting<Item>();

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestDistincting13()
		{
			ObservableCollection<Item> source = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			int capacity = 0;
			
			var testing = source.Distincting<Item>(
				equalityComparerScalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestDistincting14()
		{
			ObservableCollection<Item> source = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			
			var testing = source.Distincting<Item>(
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestDistincting15()
		{
			ObservableCollection<Item> source = getItems();
			int capacity = 0;
			
			var testing = source.Distincting<Item>(
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestDistincting16()
		{
			ObservableCollection<Item> source = getItems();
			
			var testing = source.Distincting<Item>();

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestDistincting17()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			int capacity = 0;
			
			var testing = source.Distincting<Item>(
				equalityComparer,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestDistincting18()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			
			var testing = source.Distincting<Item>(
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestDistincting19()
		{
			ObservableCollection<Item> source = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			int capacity = 0;
			
			var testing = source.Distincting<Item>(
				equalityComparer,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestDistincting20()
		{
			ObservableCollection<Item> source = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			
			var testing = source.Distincting<Item>(
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestDistincting21()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			int capacity = 0;
			
			var testing = sourceScalar.Distincting<Item>(
				equalityComparer,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestDistincting22()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			
			var testing = sourceScalar.Distincting<Item>(
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestDistincting23()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			int capacity = 0;
			
			var testing = sourceScalar.Distincting<Item>(
				equalityComparer,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestDistincting24()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			
			var testing = sourceScalar.Distincting<Item>(
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
		}
		#endregion
		#region Excepting

		
		[Test]
		public void TestExcepting01()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			int capacity = 0;
			
			var testing = source1Scalar.Excepting<Item>(
				source2Scalar,
				equalityComparerScalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestExcepting02()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			
			var testing = source1Scalar.Excepting<Item>(
				source2Scalar,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestExcepting03()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			int capacity = 0;
			
			var testing = source1Scalar.Excepting<Item>(
				source2Scalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestExcepting04()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			
			var testing = source1Scalar.Excepting<Item>(
				source2Scalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestExcepting05()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			int capacity = 0;
			
			var testing = source1Scalar.Excepting<Item>(
				source2Scalar,
				equalityComparerScalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestExcepting06()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			
			var testing = source1Scalar.Excepting<Item>(
				source2Scalar,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestExcepting07()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			int capacity = 0;
			
			var testing = source1Scalar.Excepting<Item>(
				source2Scalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestExcepting08()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			
			var testing = source1Scalar.Excepting<Item>(
				source2Scalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestExcepting09()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			int capacity = 0;
			
			var testing = source1Scalar.Excepting<Item>(
				source2Scalar,
				equalityComparerScalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestExcepting10()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			
			var testing = source1Scalar.Excepting<Item>(
				source2Scalar,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestExcepting11()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			int capacity = 0;
			
			var testing = source1Scalar.Excepting<Item>(
				source2Scalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestExcepting12()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			
			var testing = source1Scalar.Excepting<Item>(
				source2Scalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestExcepting13()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			int capacity = 0;
			
			var testing = source1Scalar.Excepting<Item>(
				source2Scalar,
				equalityComparerScalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestExcepting14()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			
			var testing = source1Scalar.Excepting<Item>(
				source2Scalar,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestExcepting15()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			int capacity = 0;
			
			var testing = source1Scalar.Excepting<Item>(
				source2Scalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestExcepting16()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			
			var testing = source1Scalar.Excepting<Item>(
				source2Scalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestExcepting17()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			int capacity = 0;
			
			var testing = source1Scalar.Excepting<Item>(
				source2,
				equalityComparerScalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestExcepting18()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			
			var testing = source1Scalar.Excepting<Item>(
				source2,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestExcepting19()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			int capacity = 0;
			
			var testing = source1Scalar.Excepting<Item>(
				source2,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestExcepting20()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			
			var testing = source1Scalar.Excepting<Item>(
				source2);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestExcepting21()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			ObservableCollection<Item> source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			int capacity = 0;
			
			var testing = source1Scalar.Excepting<Item>(
				source2,
				equalityComparerScalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestExcepting22()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			ObservableCollection<Item> source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			
			var testing = source1Scalar.Excepting<Item>(
				source2,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestExcepting23()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			ObservableCollection<Item> source2 = getItems();
			int capacity = 0;
			
			var testing = source1Scalar.Excepting<Item>(
				source2,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestExcepting24()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			ObservableCollection<Item> source2 = getItems();
			
			var testing = source1Scalar.Excepting<Item>(
				source2);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestExcepting25()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			int capacity = 0;
			
			var testing = source1Scalar.Excepting<Item>(
				source2,
				equalityComparerScalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestExcepting26()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			
			var testing = source1Scalar.Excepting<Item>(
				source2,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestExcepting27()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			int capacity = 0;
			
			var testing = source1Scalar.Excepting<Item>(
				source2,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestExcepting28()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			
			var testing = source1Scalar.Excepting<Item>(
				source2);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestExcepting29()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			ObservableCollection<Item> source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			int capacity = 0;
			
			var testing = source1Scalar.Excepting<Item>(
				source2,
				equalityComparerScalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestExcepting30()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			ObservableCollection<Item> source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			
			var testing = source1Scalar.Excepting<Item>(
				source2,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestExcepting31()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			ObservableCollection<Item> source2 = getItems();
			int capacity = 0;
			
			var testing = source1Scalar.Excepting<Item>(
				source2,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestExcepting32()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			ObservableCollection<Item> source2 = getItems();
			
			var testing = source1Scalar.Excepting<Item>(
				source2);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestExcepting33()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			int capacity = 0;
			
			var testing = source1Scalar.Excepting<Item>(
				source2,
				equalityComparer,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestExcepting34()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			
			var testing = source1Scalar.Excepting<Item>(
				source2,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestExcepting35()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			ObservableCollection<Item> source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			int capacity = 0;
			
			var testing = source1Scalar.Excepting<Item>(
				source2,
				equalityComparer,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestExcepting36()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			ObservableCollection<Item> source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			
			var testing = source1Scalar.Excepting<Item>(
				source2,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestExcepting37()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			int capacity = 0;
			
			var testing = source1Scalar.Excepting<Item>(
				source2,
				equalityComparer,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestExcepting38()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			
			var testing = source1Scalar.Excepting<Item>(
				source2,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestExcepting39()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			ObservableCollection<Item> source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			int capacity = 0;
			
			var testing = source1Scalar.Excepting<Item>(
				source2,
				equalityComparer,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestExcepting40()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			ObservableCollection<Item> source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			
			var testing = source1Scalar.Excepting<Item>(
				source2,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestExcepting41()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			int capacity = 0;
			
			var testing = source1Scalar.Excepting<Item>(
				source2Scalar,
				equalityComparer,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestExcepting42()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			
			var testing = source1Scalar.Excepting<Item>(
				source2Scalar,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestExcepting43()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			int capacity = 0;
			
			var testing = source1Scalar.Excepting<Item>(
				source2Scalar,
				equalityComparer,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestExcepting44()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			
			var testing = source1Scalar.Excepting<Item>(
				source2Scalar,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestExcepting45()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			int capacity = 0;
			
			var testing = source1Scalar.Excepting<Item>(
				source2Scalar,
				equalityComparer,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestExcepting46()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			
			var testing = source1Scalar.Excepting<Item>(
				source2Scalar,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestExcepting47()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			int capacity = 0;
			
			var testing = source1Scalar.Excepting<Item>(
				source2Scalar,
				equalityComparer,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestExcepting48()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			
			var testing = source1Scalar.Excepting<Item>(
				source2Scalar,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestExcepting49()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			int capacity = 0;
			
			var testing = source1.Excepting<Item>(
				source2Scalar,
				equalityComparerScalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestExcepting50()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			
			var testing = source1.Excepting<Item>(
				source2Scalar,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestExcepting51()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			int capacity = 0;
			
			var testing = source1.Excepting<Item>(
				source2Scalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestExcepting52()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			
			var testing = source1.Excepting<Item>(
				source2Scalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestExcepting53()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			int capacity = 0;
			
			var testing = source1.Excepting<Item>(
				source2Scalar,
				equalityComparerScalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestExcepting54()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			
			var testing = source1.Excepting<Item>(
				source2Scalar,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestExcepting55()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			int capacity = 0;
			
			var testing = source1.Excepting<Item>(
				source2Scalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestExcepting56()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			
			var testing = source1.Excepting<Item>(
				source2Scalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestExcepting57()
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			int capacity = 0;
			
			var testing = source1.Excepting<Item>(
				source2Scalar,
				equalityComparerScalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestExcepting58()
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			
			var testing = source1.Excepting<Item>(
				source2Scalar,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestExcepting59()
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			int capacity = 0;
			
			var testing = source1.Excepting<Item>(
				source2Scalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestExcepting60()
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			
			var testing = source1.Excepting<Item>(
				source2Scalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestExcepting61()
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			int capacity = 0;
			
			var testing = source1.Excepting<Item>(
				source2Scalar,
				equalityComparerScalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestExcepting62()
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			
			var testing = source1.Excepting<Item>(
				source2Scalar,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestExcepting63()
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			int capacity = 0;
			
			var testing = source1.Excepting<Item>(
				source2Scalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestExcepting64()
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			
			var testing = source1.Excepting<Item>(
				source2Scalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestExcepting65()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			int capacity = 0;
			
			var testing = source1.Excepting<Item>(
				source2,
				equalityComparerScalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
		}
		
		[Test]
		public void TestExcepting66()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			
			var testing = source1.Excepting<Item>(
				source2,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
		}
		
		[Test]
		public void TestExcepting67()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			int capacity = 0;
			
			var testing = source1.Excepting<Item>(
				source2,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestExcepting68()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			
			var testing = source1.Excepting<Item>(
				source2);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestExcepting69()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			int capacity = 0;
			
			var testing = source1.Excepting<Item>(
				source2,
				equalityComparerScalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
		}
		
		[Test]
		public void TestExcepting70()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			
			var testing = source1.Excepting<Item>(
				source2,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
		}
		
		[Test]
		public void TestExcepting71()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			int capacity = 0;
			
			var testing = source1.Excepting<Item>(
				source2,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestExcepting72()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			
			var testing = source1.Excepting<Item>(
				source2);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestExcepting73()
		{
			ObservableCollection<Item> source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			int capacity = 0;
			
			var testing = source1.Excepting<Item>(
				source2,
				equalityComparerScalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
		}
		
		[Test]
		public void TestExcepting74()
		{
			ObservableCollection<Item> source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			
			var testing = source1.Excepting<Item>(
				source2,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
		}
		
		[Test]
		public void TestExcepting75()
		{
			ObservableCollection<Item> source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			int capacity = 0;
			
			var testing = source1.Excepting<Item>(
				source2,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestExcepting76()
		{
			ObservableCollection<Item> source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			
			var testing = source1.Excepting<Item>(
				source2);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestExcepting77()
		{
			ObservableCollection<Item> source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			int capacity = 0;
			
			var testing = source1.Excepting<Item>(
				source2,
				equalityComparerScalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
		}
		
		[Test]
		public void TestExcepting78()
		{
			ObservableCollection<Item> source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			
			var testing = source1.Excepting<Item>(
				source2,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
		}
		
		[Test]
		public void TestExcepting79()
		{
			ObservableCollection<Item> source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			int capacity = 0;
			
			var testing = source1.Excepting<Item>(
				source2,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestExcepting80()
		{
			ObservableCollection<Item> source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			
			var testing = source1.Excepting<Item>(
				source2);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestExcepting81()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			int capacity = 0;
			
			var testing = source1.Excepting<Item>(
				source2,
				equalityComparer,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestExcepting82()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			
			var testing = source1.Excepting<Item>(
				source2,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestExcepting83()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			int capacity = 0;
			
			var testing = source1.Excepting<Item>(
				source2,
				equalityComparer,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestExcepting84()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			
			var testing = source1.Excepting<Item>(
				source2,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestExcepting85()
		{
			ObservableCollection<Item> source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			int capacity = 0;
			
			var testing = source1.Excepting<Item>(
				source2,
				equalityComparer,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestExcepting86()
		{
			ObservableCollection<Item> source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			
			var testing = source1.Excepting<Item>(
				source2,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestExcepting87()
		{
			ObservableCollection<Item> source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			int capacity = 0;
			
			var testing = source1.Excepting<Item>(
				source2,
				equalityComparer,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestExcepting88()
		{
			ObservableCollection<Item> source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			
			var testing = source1.Excepting<Item>(
				source2,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestExcepting89()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			int capacity = 0;
			
			var testing = source1.Excepting<Item>(
				source2Scalar,
				equalityComparer,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestExcepting90()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			
			var testing = source1.Excepting<Item>(
				source2Scalar,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestExcepting91()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			int capacity = 0;
			
			var testing = source1.Excepting<Item>(
				source2Scalar,
				equalityComparer,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestExcepting92()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			
			var testing = source1.Excepting<Item>(
				source2Scalar,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestExcepting93()
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			int capacity = 0;
			
			var testing = source1.Excepting<Item>(
				source2Scalar,
				equalityComparer,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestExcepting94()
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			
			var testing = source1.Excepting<Item>(
				source2Scalar,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestExcepting95()
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			int capacity = 0;
			
			var testing = source1.Excepting<Item>(
				source2Scalar,
				equalityComparer,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestExcepting96()
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			
			var testing = source1.Excepting<Item>(
				source2Scalar,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		#endregion
		#region Filtering

		
		[Test]
		public void TestFiltering01()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			int capacity = 0;
			
			var testing = sourceScalar.Filtering<Item>(
				predicateExpression,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestFiltering02()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			
			var testing = sourceScalar.Filtering<Item>(
				predicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestFiltering03()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			int capacity = 0;
			
			var testing = sourceScalar.Filtering<Item>(
				predicateExpression,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestFiltering04()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			
			var testing = sourceScalar.Filtering<Item>(
				predicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestFiltering05()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			int capacity = 0;
			
			var testing = source.Filtering<Item>(
				predicateExpression,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestFiltering06()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			
			var testing = source.Filtering<Item>(
				predicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestFiltering07()
		{
			ObservableCollection<Item> source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			int capacity = 0;
			
			var testing = source.Filtering<Item>(
				predicateExpression,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestFiltering08()
		{
			ObservableCollection<Item> source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			
			var testing = source.Filtering<Item>(
				predicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		#endregion
		#region FirstComputing

		
		[Test]
		public void TestFirstComputing01()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<Item> defaultValueScalar = getScalar<Item>(null);
			
			var testing = sourceScalar.FirstComputing<Item>(
				defaultValueScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Item>)defaultValueScalar).Touch();
			test();
			((Scalar<Item>)defaultValueScalar).Change(new QuickTests.Item(1, true));
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestFirstComputing02()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			
			var testing = sourceScalar.FirstComputing<Item>();

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestFirstComputing03()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<Item> defaultValueScalar = getScalar<Item>(null);
			
			var testing = sourceScalar.FirstComputing<Item>(
				defaultValueScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Item>)defaultValueScalar).Touch();
			test();
			((Scalar<Item>)defaultValueScalar).Change(new QuickTests.Item(1, true));
			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestFirstComputing04()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			
			var testing = sourceScalar.FirstComputing<Item>();

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestFirstComputing05()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			Scalar<Item> defaultValueScalar = getScalar<Item>(null);
			
			var testing = source.FirstComputing<Item>(
				defaultValueScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Item>)defaultValueScalar).Touch();
			test();
			((Scalar<Item>)defaultValueScalar).Change(new QuickTests.Item(1, true));
			test();
		}
		
		[Test]
		public void TestFirstComputing06()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			
			var testing = source.FirstComputing<Item>();

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestFirstComputing07()
		{
			ObservableCollection<Item> source = getItems();
			Scalar<Item> defaultValueScalar = getScalar<Item>(null);
			
			var testing = source.FirstComputing<Item>(
				defaultValueScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Item>)defaultValueScalar).Touch();
			test();
			((Scalar<Item>)defaultValueScalar).Change(new QuickTests.Item(1, true));
			test();
		}
		
		[Test]
		public void TestFirstComputing08()
		{
			ObservableCollection<Item> source = getItems();
			
			var testing = source.FirstComputing<Item>();

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestFirstComputing09()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Item defaultValue = null;
			
			var testing = sourceScalar.FirstComputing<Item>(
				defaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestFirstComputing10()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Item defaultValue = null;
			
			var testing = sourceScalar.FirstComputing<Item>(
				defaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestFirstComputing11()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			Item defaultValue = null;
			
			var testing = source.FirstComputing<Item>(
				defaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestFirstComputing12()
		{
			ObservableCollection<Item> source = getItems();
			Item defaultValue = null;
			
			var testing = source.FirstComputing<Item>(
				defaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		#endregion
		#region Grouping

		
		[Test]
		public void TestGrouping01()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			Scalar<System.Collections.Generic.IEqualityComparer<int>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<int>>(EqualityComparer<int>.Default);
			int capacity = 0;
			
			var testing = sourceScalar.Grouping<Item, int>(
				keySelectorExpression,
				equalityComparerScalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestGrouping02()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			Scalar<System.Collections.Generic.IEqualityComparer<int>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<int>>(EqualityComparer<int>.Default);
			
			var testing = sourceScalar.Grouping<Item, int>(
				keySelectorExpression,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestGrouping03()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			int capacity = 0;
			
			var testing = sourceScalar.Grouping<Item, int>(
				keySelectorExpression,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestGrouping04()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			
			var testing = sourceScalar.Grouping<Item, int>(
				keySelectorExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestGrouping05()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			Scalar<System.Collections.Generic.IEqualityComparer<int>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<int>>(EqualityComparer<int>.Default);
			int capacity = 0;
			
			var testing = sourceScalar.Grouping<Item, int>(
				keySelectorExpression,
				equalityComparerScalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestGrouping06()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			Scalar<System.Collections.Generic.IEqualityComparer<int>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<int>>(EqualityComparer<int>.Default);
			
			var testing = sourceScalar.Grouping<Item, int>(
				keySelectorExpression,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestGrouping07()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			int capacity = 0;
			
			var testing = sourceScalar.Grouping<Item, int>(
				keySelectorExpression,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestGrouping08()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			
			var testing = sourceScalar.Grouping<Item, int>(
				keySelectorExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestGrouping09()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			Scalar<System.Collections.Generic.IEqualityComparer<int>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<int>>(EqualityComparer<int>.Default);
			int capacity = 0;
			
			var testing = source.Grouping<Item, int>(
				keySelectorExpression,
				equalityComparerScalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestGrouping10()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			Scalar<System.Collections.Generic.IEqualityComparer<int>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<int>>(EqualityComparer<int>.Default);
			
			var testing = source.Grouping<Item, int>(
				keySelectorExpression,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestGrouping11()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			int capacity = 0;
			
			var testing = source.Grouping<Item, int>(
				keySelectorExpression,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestGrouping12()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			
			var testing = source.Grouping<Item, int>(
				keySelectorExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestGrouping13()
		{
			ObservableCollection<Item> source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			Scalar<System.Collections.Generic.IEqualityComparer<int>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<int>>(EqualityComparer<int>.Default);
			int capacity = 0;
			
			var testing = source.Grouping<Item, int>(
				keySelectorExpression,
				equalityComparerScalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestGrouping14()
		{
			ObservableCollection<Item> source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			Scalar<System.Collections.Generic.IEqualityComparer<int>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<int>>(EqualityComparer<int>.Default);
			
			var testing = source.Grouping<Item, int>(
				keySelectorExpression,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestGrouping15()
		{
			ObservableCollection<Item> source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			int capacity = 0;
			
			var testing = source.Grouping<Item, int>(
				keySelectorExpression,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestGrouping16()
		{
			ObservableCollection<Item> source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			
			var testing = source.Grouping<Item, int>(
				keySelectorExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestGrouping17()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			System.Collections.Generic.IEqualityComparer<int> equalityComparer = EqualityComparer<int>.Default;
			int capacity = 0;
			
			var testing = sourceScalar.Grouping<Item, int>(
				keySelectorExpression,
				equalityComparer,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestGrouping18()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			System.Collections.Generic.IEqualityComparer<int> equalityComparer = EqualityComparer<int>.Default;
			
			var testing = sourceScalar.Grouping<Item, int>(
				keySelectorExpression,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestGrouping19()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			System.Collections.Generic.IEqualityComparer<int> equalityComparer = EqualityComparer<int>.Default;
			int capacity = 0;
			
			var testing = sourceScalar.Grouping<Item, int>(
				keySelectorExpression,
				equalityComparer,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestGrouping20()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			System.Collections.Generic.IEqualityComparer<int> equalityComparer = EqualityComparer<int>.Default;
			
			var testing = sourceScalar.Grouping<Item, int>(
				keySelectorExpression,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestGrouping21()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			System.Collections.Generic.IEqualityComparer<int> equalityComparer = EqualityComparer<int>.Default;
			int capacity = 0;
			
			var testing = source.Grouping<Item, int>(
				keySelectorExpression,
				equalityComparer,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestGrouping22()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			System.Collections.Generic.IEqualityComparer<int> equalityComparer = EqualityComparer<int>.Default;
			
			var testing = source.Grouping<Item, int>(
				keySelectorExpression,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestGrouping23()
		{
			ObservableCollection<Item> source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			System.Collections.Generic.IEqualityComparer<int> equalityComparer = EqualityComparer<int>.Default;
			int capacity = 0;
			
			var testing = source.Grouping<Item, int>(
				keySelectorExpression,
				equalityComparer,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestGrouping24()
		{
			ObservableCollection<Item> source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			System.Collections.Generic.IEqualityComparer<int> equalityComparer = EqualityComparer<int>.Default;
			
			var testing = source.Grouping<Item, int>(
				keySelectorExpression,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		#endregion
		#region GroupJoining

		
		[Test]
		public void TestGroupJoining01()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			Scalar<System.Collections.Generic.IEqualityComparer<int>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<int>>(EqualityComparer<int>.Default);
			
			var testing = outerSourceScalar.GroupJoining<Item, Item, int>(
				innerSourceScalar,
				outerKeySelector,
				innerKeySelector,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestGroupJoining02()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			
			var testing = outerSourceScalar.GroupJoining<Item, Item, int>(
				innerSourceScalar,
				outerKeySelector,
				innerKeySelector);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestGroupJoining03()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<ObservableCollection<Item>> innerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			Scalar<System.Collections.Generic.IEqualityComparer<int>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<int>>(EqualityComparer<int>.Default);
			
			var testing = outerSourceScalar.GroupJoining<Item, Item, int>(
				innerSourceScalar,
				outerKeySelector,
				innerKeySelector,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestGroupJoining04()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<ObservableCollection<Item>> innerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			
			var testing = outerSourceScalar.GroupJoining<Item, Item, int>(
				innerSourceScalar,
				outerKeySelector,
				innerKeySelector);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestGroupJoining05()
		{
			Scalar<ObservableCollection<Item>> outerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			Scalar<System.Collections.Generic.IEqualityComparer<int>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<int>>(EqualityComparer<int>.Default);
			
			var testing = outerSourceScalar.GroupJoining<Item, Item, int>(
				innerSourceScalar,
				outerKeySelector,
				innerKeySelector,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestGroupJoining06()
		{
			Scalar<ObservableCollection<Item>> outerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			
			var testing = outerSourceScalar.GroupJoining<Item, Item, int>(
				innerSourceScalar,
				outerKeySelector,
				innerKeySelector);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestGroupJoining07()
		{
			Scalar<ObservableCollection<Item>> outerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<ObservableCollection<Item>> innerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			Scalar<System.Collections.Generic.IEqualityComparer<int>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<int>>(EqualityComparer<int>.Default);
			
			var testing = outerSourceScalar.GroupJoining<Item, Item, int>(
				innerSourceScalar,
				outerKeySelector,
				innerKeySelector,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestGroupJoining08()
		{
			Scalar<ObservableCollection<Item>> outerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<ObservableCollection<Item>> innerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			
			var testing = outerSourceScalar.GroupJoining<Item, Item, int>(
				innerSourceScalar,
				outerKeySelector,
				innerKeySelector);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestGroupJoining09()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			Scalar<System.Collections.Generic.IEqualityComparer<int>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<int>>(EqualityComparer<int>.Default);
			
			var testing = outerSourceScalar.GroupJoining<Item, Item, int>(
				innerSource,
				outerKeySelector,
				innerKeySelector,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestGroupJoining10()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			
			var testing = outerSourceScalar.GroupJoining<Item, Item, int>(
				innerSource,
				outerKeySelector,
				innerKeySelector);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestGroupJoining11()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			ObservableCollection<Item> innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			Scalar<System.Collections.Generic.IEqualityComparer<int>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<int>>(EqualityComparer<int>.Default);
			
			var testing = outerSourceScalar.GroupJoining<Item, Item, int>(
				innerSource,
				outerKeySelector,
				innerKeySelector,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestGroupJoining12()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			ObservableCollection<Item> innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			
			var testing = outerSourceScalar.GroupJoining<Item, Item, int>(
				innerSource,
				outerKeySelector,
				innerKeySelector);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestGroupJoining13()
		{
			Scalar<ObservableCollection<Item>> outerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			Scalar<System.Collections.Generic.IEqualityComparer<int>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<int>>(EqualityComparer<int>.Default);
			
			var testing = outerSourceScalar.GroupJoining<Item, Item, int>(
				innerSource,
				outerKeySelector,
				innerKeySelector,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestGroupJoining14()
		{
			Scalar<ObservableCollection<Item>> outerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			
			var testing = outerSourceScalar.GroupJoining<Item, Item, int>(
				innerSource,
				outerKeySelector,
				innerKeySelector);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestGroupJoining15()
		{
			Scalar<ObservableCollection<Item>> outerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			ObservableCollection<Item> innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			Scalar<System.Collections.Generic.IEqualityComparer<int>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<int>>(EqualityComparer<int>.Default);
			
			var testing = outerSourceScalar.GroupJoining<Item, Item, int>(
				innerSource,
				outerKeySelector,
				innerKeySelector,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestGroupJoining16()
		{
			Scalar<ObservableCollection<Item>> outerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			ObservableCollection<Item> innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			
			var testing = outerSourceScalar.GroupJoining<Item, Item, int>(
				innerSource,
				outerKeySelector,
				innerKeySelector);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestGroupJoining17()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			System.Collections.Generic.IEqualityComparer<int> equalityComparer = EqualityComparer<int>.Default;
			
			var testing = outerSourceScalar.GroupJoining<Item, Item, int>(
				innerSource,
				outerKeySelector,
				innerKeySelector,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestGroupJoining18()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			ObservableCollection<Item> innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			System.Collections.Generic.IEqualityComparer<int> equalityComparer = EqualityComparer<int>.Default;
			
			var testing = outerSourceScalar.GroupJoining<Item, Item, int>(
				innerSource,
				outerKeySelector,
				innerKeySelector,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestGroupJoining19()
		{
			Scalar<ObservableCollection<Item>> outerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			System.Collections.Generic.IEqualityComparer<int> equalityComparer = EqualityComparer<int>.Default;
			
			var testing = outerSourceScalar.GroupJoining<Item, Item, int>(
				innerSource,
				outerKeySelector,
				innerKeySelector,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestGroupJoining20()
		{
			Scalar<ObservableCollection<Item>> outerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			ObservableCollection<Item> innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			System.Collections.Generic.IEqualityComparer<int> equalityComparer = EqualityComparer<int>.Default;
			
			var testing = outerSourceScalar.GroupJoining<Item, Item, int>(
				innerSource,
				outerKeySelector,
				innerKeySelector,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestGroupJoining21()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			System.Collections.Generic.IEqualityComparer<int> equalityComparer = EqualityComparer<int>.Default;
			
			var testing = outerSourceScalar.GroupJoining<Item, Item, int>(
				innerSourceScalar,
				outerKeySelector,
				innerKeySelector,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestGroupJoining22()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<ObservableCollection<Item>> innerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			System.Collections.Generic.IEqualityComparer<int> equalityComparer = EqualityComparer<int>.Default;
			
			var testing = outerSourceScalar.GroupJoining<Item, Item, int>(
				innerSourceScalar,
				outerKeySelector,
				innerKeySelector,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestGroupJoining23()
		{
			Scalar<ObservableCollection<Item>> outerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			System.Collections.Generic.IEqualityComparer<int> equalityComparer = EqualityComparer<int>.Default;
			
			var testing = outerSourceScalar.GroupJoining<Item, Item, int>(
				innerSourceScalar,
				outerKeySelector,
				innerKeySelector,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestGroupJoining24()
		{
			Scalar<ObservableCollection<Item>> outerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<ObservableCollection<Item>> innerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			System.Collections.Generic.IEqualityComparer<int> equalityComparer = EqualityComparer<int>.Default;
			
			var testing = outerSourceScalar.GroupJoining<Item, Item, int>(
				innerSourceScalar,
				outerKeySelector,
				innerKeySelector,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestGroupJoining25()
		{
			System.Collections.Specialized.INotifyCollectionChanged outerSource = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			Scalar<System.Collections.Generic.IEqualityComparer<int>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<int>>(EqualityComparer<int>.Default);
			
			var testing = outerSource.GroupJoining<Item, Item, int>(
				innerSourceScalar,
				outerKeySelector,
				innerKeySelector,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestGroupJoining26()
		{
			System.Collections.Specialized.INotifyCollectionChanged outerSource = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			
			var testing = outerSource.GroupJoining<Item, Item, int>(
				innerSourceScalar,
				outerKeySelector,
				innerKeySelector);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestGroupJoining27()
		{
			System.Collections.Specialized.INotifyCollectionChanged outerSource = getItems();
			Scalar<ObservableCollection<Item>> innerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			Scalar<System.Collections.Generic.IEqualityComparer<int>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<int>>(EqualityComparer<int>.Default);
			
			var testing = outerSource.GroupJoining<Item, Item, int>(
				innerSourceScalar,
				outerKeySelector,
				innerKeySelector,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestGroupJoining28()
		{
			System.Collections.Specialized.INotifyCollectionChanged outerSource = getItems();
			Scalar<ObservableCollection<Item>> innerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			
			var testing = outerSource.GroupJoining<Item, Item, int>(
				innerSourceScalar,
				outerKeySelector,
				innerKeySelector);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestGroupJoining29()
		{
			ObservableCollection<Item> outerSource = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			Scalar<System.Collections.Generic.IEqualityComparer<int>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<int>>(EqualityComparer<int>.Default);
			
			var testing = outerSource.GroupJoining<Item, Item, int>(
				innerSourceScalar,
				outerKeySelector,
				innerKeySelector,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestGroupJoining30()
		{
			ObservableCollection<Item> outerSource = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			
			var testing = outerSource.GroupJoining<Item, Item, int>(
				innerSourceScalar,
				outerKeySelector,
				innerKeySelector);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestGroupJoining31()
		{
			ObservableCollection<Item> outerSource = getItems();
			Scalar<ObservableCollection<Item>> innerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			Scalar<System.Collections.Generic.IEqualityComparer<int>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<int>>(EqualityComparer<int>.Default);
			
			var testing = outerSource.GroupJoining<Item, Item, int>(
				innerSourceScalar,
				outerKeySelector,
				innerKeySelector,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestGroupJoining32()
		{
			ObservableCollection<Item> outerSource = getItems();
			Scalar<ObservableCollection<Item>> innerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			
			var testing = outerSource.GroupJoining<Item, Item, int>(
				innerSourceScalar,
				outerKeySelector,
				innerKeySelector);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestGroupJoining33()
		{
			System.Collections.Specialized.INotifyCollectionChanged outerSource = getItems();
			System.Collections.Specialized.INotifyCollectionChanged innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			Scalar<System.Collections.Generic.IEqualityComparer<int>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<int>>(EqualityComparer<int>.Default);
			
			var testing = outerSource.GroupJoining<Item, Item, int>(
				innerSource,
				outerKeySelector,
				innerKeySelector,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestGroupJoining34()
		{
			System.Collections.Specialized.INotifyCollectionChanged outerSource = getItems();
			System.Collections.Specialized.INotifyCollectionChanged innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			
			var testing = outerSource.GroupJoining<Item, Item, int>(
				innerSource,
				outerKeySelector,
				innerKeySelector);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestGroupJoining35()
		{
			System.Collections.Specialized.INotifyCollectionChanged outerSource = getItems();
			ObservableCollection<Item> innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			Scalar<System.Collections.Generic.IEqualityComparer<int>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<int>>(EqualityComparer<int>.Default);
			
			var testing = outerSource.GroupJoining<Item, Item, int>(
				innerSource,
				outerKeySelector,
				innerKeySelector,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestGroupJoining36()
		{
			System.Collections.Specialized.INotifyCollectionChanged outerSource = getItems();
			ObservableCollection<Item> innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			
			var testing = outerSource.GroupJoining<Item, Item, int>(
				innerSource,
				outerKeySelector,
				innerKeySelector);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestGroupJoining37()
		{
			ObservableCollection<Item> outerSource = getItems();
			System.Collections.Specialized.INotifyCollectionChanged innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			Scalar<System.Collections.Generic.IEqualityComparer<int>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<int>>(EqualityComparer<int>.Default);
			
			var testing = outerSource.GroupJoining<Item, Item, int>(
				innerSource,
				outerKeySelector,
				innerKeySelector,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestGroupJoining38()
		{
			ObservableCollection<Item> outerSource = getItems();
			System.Collections.Specialized.INotifyCollectionChanged innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			
			var testing = outerSource.GroupJoining<Item, Item, int>(
				innerSource,
				outerKeySelector,
				innerKeySelector);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestGroupJoining39()
		{
			ObservableCollection<Item> outerSource = getItems();
			ObservableCollection<Item> innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			Scalar<System.Collections.Generic.IEqualityComparer<int>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<int>>(EqualityComparer<int>.Default);
			
			var testing = outerSource.GroupJoining<Item, Item, int>(
				innerSource,
				outerKeySelector,
				innerKeySelector,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<int>>)equalityComparerScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestGroupJoining40()
		{
			ObservableCollection<Item> outerSource = getItems();
			ObservableCollection<Item> innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			
			var testing = outerSource.GroupJoining<Item, Item, int>(
				innerSource,
				outerKeySelector,
				innerKeySelector);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestGroupJoining41()
		{
			System.Collections.Specialized.INotifyCollectionChanged outerSource = getItems();
			System.Collections.Specialized.INotifyCollectionChanged innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			System.Collections.Generic.IEqualityComparer<int> equalityComparer = EqualityComparer<int>.Default;
			
			var testing = outerSource.GroupJoining<Item, Item, int>(
				innerSource,
				outerKeySelector,
				innerKeySelector,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestGroupJoining42()
		{
			System.Collections.Specialized.INotifyCollectionChanged outerSource = getItems();
			ObservableCollection<Item> innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			System.Collections.Generic.IEqualityComparer<int> equalityComparer = EqualityComparer<int>.Default;
			
			var testing = outerSource.GroupJoining<Item, Item, int>(
				innerSource,
				outerKeySelector,
				innerKeySelector,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestGroupJoining43()
		{
			ObservableCollection<Item> outerSource = getItems();
			System.Collections.Specialized.INotifyCollectionChanged innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			System.Collections.Generic.IEqualityComparer<int> equalityComparer = EqualityComparer<int>.Default;
			
			var testing = outerSource.GroupJoining<Item, Item, int>(
				innerSource,
				outerKeySelector,
				innerKeySelector,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestGroupJoining44()
		{
			ObservableCollection<Item> outerSource = getItems();
			ObservableCollection<Item> innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			System.Collections.Generic.IEqualityComparer<int> equalityComparer = EqualityComparer<int>.Default;
			
			var testing = outerSource.GroupJoining<Item, Item, int>(
				innerSource,
				outerKeySelector,
				innerKeySelector,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestGroupJoining45()
		{
			System.Collections.Specialized.INotifyCollectionChanged outerSource = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			System.Collections.Generic.IEqualityComparer<int> equalityComparer = EqualityComparer<int>.Default;
			
			var testing = outerSource.GroupJoining<Item, Item, int>(
				innerSourceScalar,
				outerKeySelector,
				innerKeySelector,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestGroupJoining46()
		{
			System.Collections.Specialized.INotifyCollectionChanged outerSource = getItems();
			Scalar<ObservableCollection<Item>> innerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			System.Collections.Generic.IEqualityComparer<int> equalityComparer = EqualityComparer<int>.Default;
			
			var testing = outerSource.GroupJoining<Item, Item, int>(
				innerSourceScalar,
				outerKeySelector,
				innerKeySelector,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestGroupJoining47()
		{
			ObservableCollection<Item> outerSource = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			System.Collections.Generic.IEqualityComparer<int> equalityComparer = EqualityComparer<int>.Default;
			
			var testing = outerSource.GroupJoining<Item, Item, int>(
				innerSourceScalar,
				outerKeySelector,
				innerKeySelector,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestGroupJoining48()
		{
			ObservableCollection<Item> outerSource = getItems();
			Scalar<ObservableCollection<Item>> innerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> outerKeySelector = i => i.Id;
			System.Linq.Expressions.Expression<System.Func<Item, int>> innerKeySelector = i => i.Id;
			System.Collections.Generic.IEqualityComparer<int> equalityComparer = EqualityComparer<int>.Default;
			
			var testing = outerSource.GroupJoining<Item, Item, int>(
				innerSourceScalar,
				outerKeySelector,
				innerKeySelector,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Change(null);
			test();
		}
		#endregion
		#region Hashing

		
		[Test]
		public void TestHashing01()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			System.Collections.Generic.IEqualityComparer<int> comparer = EqualityComparer<int>.Default;
			int capacity = 0;
			
			var testing = sourceScalar.Hashing<Item, int>(
				keySelectorExpression,
				comparer,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestHashing02()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			System.Collections.Generic.IEqualityComparer<int> comparer = EqualityComparer<int>.Default;
			
			var testing = sourceScalar.Hashing<Item, int>(
				keySelectorExpression,
				comparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestHashing03()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			int capacity = 0;
			
			var testing = sourceScalar.Hashing<Item, int>(
				keySelectorExpression,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestHashing04()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			
			var testing = sourceScalar.Hashing<Item, int>(
				keySelectorExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestHashing05()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			System.Collections.Generic.IEqualityComparer<int> comparer = EqualityComparer<int>.Default;
			int capacity = 0;
			
			var testing = sourceScalar.Hashing<Item, int>(
				keySelectorExpression,
				comparer,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestHashing06()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			System.Collections.Generic.IEqualityComparer<int> comparer = EqualityComparer<int>.Default;
			
			var testing = sourceScalar.Hashing<Item, int>(
				keySelectorExpression,
				comparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestHashing07()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			int capacity = 0;
			
			var testing = sourceScalar.Hashing<Item, int>(
				keySelectorExpression,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestHashing08()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			
			var testing = sourceScalar.Hashing<Item, int>(
				keySelectorExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestHashing09()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			System.Collections.Generic.IEqualityComparer<int> comparer = EqualityComparer<int>.Default;
			int capacity = 0;
			
			var testing = source.Hashing<Item, int>(
				keySelectorExpression,
				comparer,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestHashing10()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			System.Collections.Generic.IEqualityComparer<int> comparer = EqualityComparer<int>.Default;
			
			var testing = source.Hashing<Item, int>(
				keySelectorExpression,
				comparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestHashing11()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			int capacity = 0;
			
			var testing = source.Hashing<Item, int>(
				keySelectorExpression,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestHashing12()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			
			var testing = source.Hashing<Item, int>(
				keySelectorExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestHashing13()
		{
			ObservableCollection<Item> source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			System.Collections.Generic.IEqualityComparer<int> comparer = EqualityComparer<int>.Default;
			int capacity = 0;
			
			var testing = source.Hashing<Item, int>(
				keySelectorExpression,
				comparer,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestHashing14()
		{
			ObservableCollection<Item> source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			System.Collections.Generic.IEqualityComparer<int> comparer = EqualityComparer<int>.Default;
			
			var testing = source.Hashing<Item, int>(
				keySelectorExpression,
				comparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestHashing15()
		{
			ObservableCollection<Item> source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			int capacity = 0;
			
			var testing = source.Hashing<Item, int>(
				keySelectorExpression,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestHashing16()
		{
			ObservableCollection<Item> source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int>> keySelectorExpression = i => i.Id;
			
			var testing = source.Hashing<Item, int>(
				keySelectorExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		#endregion
		#region IndicesComputing

		
		[Test]
		public void TestIndicesComputing01()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			int capacity = 0;
			
			var testing = sourceScalar.IndicesComputing<Item>(
				predicateExpression,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIndicesComputing02()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			
			var testing = sourceScalar.IndicesComputing<Item>(
				predicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIndicesComputing03()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			int capacity = 0;
			
			var testing = sourceScalar.IndicesComputing<Item>(
				predicateExpression,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIndicesComputing04()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			
			var testing = sourceScalar.IndicesComputing<Item>(
				predicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIndicesComputing05()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			int capacity = 0;
			
			var testing = source.IndicesComputing<Item>(
				predicateExpression,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestIndicesComputing06()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			
			var testing = source.IndicesComputing<Item>(
				predicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestIndicesComputing07()
		{
			ObservableCollection<Item> source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			int capacity = 0;
			
			var testing = source.IndicesComputing<Item>(
				predicateExpression,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestIndicesComputing08()
		{
			ObservableCollection<Item> source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			
			var testing = source.IndicesComputing<Item>(
				predicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		#endregion
		#region Intersecting

		
		[Test]
		public void TestIntersecting01()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			int capacity = 0;
			
			var testing = source1Scalar.Intersecting<Item>(
				source2Scalar,
				equalityComparerScalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIntersecting02()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			
			var testing = source1Scalar.Intersecting<Item>(
				source2Scalar,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIntersecting03()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			int capacity = 0;
			
			var testing = source1Scalar.Intersecting<Item>(
				source2Scalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIntersecting04()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			
			var testing = source1Scalar.Intersecting<Item>(
				source2Scalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIntersecting05()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			int capacity = 0;
			
			var testing = source1Scalar.Intersecting<Item>(
				source2Scalar,
				equalityComparerScalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIntersecting06()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			
			var testing = source1Scalar.Intersecting<Item>(
				source2Scalar,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIntersecting07()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			int capacity = 0;
			
			var testing = source1Scalar.Intersecting<Item>(
				source2Scalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIntersecting08()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			
			var testing = source1Scalar.Intersecting<Item>(
				source2Scalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIntersecting09()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			int capacity = 0;
			
			var testing = source1Scalar.Intersecting<Item>(
				source2Scalar,
				equalityComparerScalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIntersecting10()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			
			var testing = source1Scalar.Intersecting<Item>(
				source2Scalar,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIntersecting11()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			int capacity = 0;
			
			var testing = source1Scalar.Intersecting<Item>(
				source2Scalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIntersecting12()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			
			var testing = source1Scalar.Intersecting<Item>(
				source2Scalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIntersecting13()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			int capacity = 0;
			
			var testing = source1Scalar.Intersecting<Item>(
				source2Scalar,
				equalityComparerScalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIntersecting14()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			
			var testing = source1Scalar.Intersecting<Item>(
				source2Scalar,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIntersecting15()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			int capacity = 0;
			
			var testing = source1Scalar.Intersecting<Item>(
				source2Scalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIntersecting16()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			
			var testing = source1Scalar.Intersecting<Item>(
				source2Scalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIntersecting17()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			int capacity = 0;
			
			var testing = source1Scalar.Intersecting<Item>(
				source2,
				equalityComparerScalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIntersecting18()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			
			var testing = source1Scalar.Intersecting<Item>(
				source2,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIntersecting19()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			int capacity = 0;
			
			var testing = source1Scalar.Intersecting<Item>(
				source2,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIntersecting20()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			
			var testing = source1Scalar.Intersecting<Item>(
				source2);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIntersecting21()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			ObservableCollection<Item> source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			int capacity = 0;
			
			var testing = source1Scalar.Intersecting<Item>(
				source2,
				equalityComparerScalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIntersecting22()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			ObservableCollection<Item> source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			
			var testing = source1Scalar.Intersecting<Item>(
				source2,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIntersecting23()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			ObservableCollection<Item> source2 = getItems();
			int capacity = 0;
			
			var testing = source1Scalar.Intersecting<Item>(
				source2,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIntersecting24()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			ObservableCollection<Item> source2 = getItems();
			
			var testing = source1Scalar.Intersecting<Item>(
				source2);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIntersecting25()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			int capacity = 0;
			
			var testing = source1Scalar.Intersecting<Item>(
				source2,
				equalityComparerScalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIntersecting26()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			
			var testing = source1Scalar.Intersecting<Item>(
				source2,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIntersecting27()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			int capacity = 0;
			
			var testing = source1Scalar.Intersecting<Item>(
				source2,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIntersecting28()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			
			var testing = source1Scalar.Intersecting<Item>(
				source2);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIntersecting29()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			ObservableCollection<Item> source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			int capacity = 0;
			
			var testing = source1Scalar.Intersecting<Item>(
				source2,
				equalityComparerScalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIntersecting30()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			ObservableCollection<Item> source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			
			var testing = source1Scalar.Intersecting<Item>(
				source2,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIntersecting31()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			ObservableCollection<Item> source2 = getItems();
			int capacity = 0;
			
			var testing = source1Scalar.Intersecting<Item>(
				source2,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIntersecting32()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			ObservableCollection<Item> source2 = getItems();
			
			var testing = source1Scalar.Intersecting<Item>(
				source2);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIntersecting33()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			int capacity = 0;
			
			var testing = source1Scalar.Intersecting<Item>(
				source2,
				equalityComparer,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIntersecting34()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			
			var testing = source1Scalar.Intersecting<Item>(
				source2,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIntersecting35()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			ObservableCollection<Item> source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			int capacity = 0;
			
			var testing = source1Scalar.Intersecting<Item>(
				source2,
				equalityComparer,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIntersecting36()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			ObservableCollection<Item> source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			
			var testing = source1Scalar.Intersecting<Item>(
				source2,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIntersecting37()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			int capacity = 0;
			
			var testing = source1Scalar.Intersecting<Item>(
				source2,
				equalityComparer,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIntersecting38()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			
			var testing = source1Scalar.Intersecting<Item>(
				source2,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIntersecting39()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			ObservableCollection<Item> source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			int capacity = 0;
			
			var testing = source1Scalar.Intersecting<Item>(
				source2,
				equalityComparer,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIntersecting40()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			ObservableCollection<Item> source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			
			var testing = source1Scalar.Intersecting<Item>(
				source2,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIntersecting41()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			int capacity = 0;
			
			var testing = source1Scalar.Intersecting<Item>(
				source2Scalar,
				equalityComparer,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIntersecting42()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			
			var testing = source1Scalar.Intersecting<Item>(
				source2Scalar,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIntersecting43()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			int capacity = 0;
			
			var testing = source1Scalar.Intersecting<Item>(
				source2Scalar,
				equalityComparer,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIntersecting44()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			
			var testing = source1Scalar.Intersecting<Item>(
				source2Scalar,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIntersecting45()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			int capacity = 0;
			
			var testing = source1Scalar.Intersecting<Item>(
				source2Scalar,
				equalityComparer,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIntersecting46()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			
			var testing = source1Scalar.Intersecting<Item>(
				source2Scalar,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIntersecting47()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			int capacity = 0;
			
			var testing = source1Scalar.Intersecting<Item>(
				source2Scalar,
				equalityComparer,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIntersecting48()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			
			var testing = source1Scalar.Intersecting<Item>(
				source2Scalar,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIntersecting49()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			int capacity = 0;
			
			var testing = source1.Intersecting<Item>(
				source2Scalar,
				equalityComparerScalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIntersecting50()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			
			var testing = source1.Intersecting<Item>(
				source2Scalar,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIntersecting51()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			int capacity = 0;
			
			var testing = source1.Intersecting<Item>(
				source2Scalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIntersecting52()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			
			var testing = source1.Intersecting<Item>(
				source2Scalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIntersecting53()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			int capacity = 0;
			
			var testing = source1.Intersecting<Item>(
				source2Scalar,
				equalityComparerScalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIntersecting54()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			
			var testing = source1.Intersecting<Item>(
				source2Scalar,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIntersecting55()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			int capacity = 0;
			
			var testing = source1.Intersecting<Item>(
				source2Scalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIntersecting56()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			
			var testing = source1.Intersecting<Item>(
				source2Scalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIntersecting57()
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			int capacity = 0;
			
			var testing = source1.Intersecting<Item>(
				source2Scalar,
				equalityComparerScalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIntersecting58()
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			
			var testing = source1.Intersecting<Item>(
				source2Scalar,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIntersecting59()
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			int capacity = 0;
			
			var testing = source1.Intersecting<Item>(
				source2Scalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIntersecting60()
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			
			var testing = source1.Intersecting<Item>(
				source2Scalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIntersecting61()
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			int capacity = 0;
			
			var testing = source1.Intersecting<Item>(
				source2Scalar,
				equalityComparerScalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIntersecting62()
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			
			var testing = source1.Intersecting<Item>(
				source2Scalar,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIntersecting63()
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			int capacity = 0;
			
			var testing = source1.Intersecting<Item>(
				source2Scalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIntersecting64()
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			
			var testing = source1.Intersecting<Item>(
				source2Scalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIntersecting65()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			int capacity = 0;
			
			var testing = source1.Intersecting<Item>(
				source2,
				equalityComparerScalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
		}
		
		[Test]
		public void TestIntersecting66()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			
			var testing = source1.Intersecting<Item>(
				source2,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
		}
		
		[Test]
		public void TestIntersecting67()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			int capacity = 0;
			
			var testing = source1.Intersecting<Item>(
				source2,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestIntersecting68()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			
			var testing = source1.Intersecting<Item>(
				source2);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestIntersecting69()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			int capacity = 0;
			
			var testing = source1.Intersecting<Item>(
				source2,
				equalityComparerScalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
		}
		
		[Test]
		public void TestIntersecting70()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			
			var testing = source1.Intersecting<Item>(
				source2,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
		}
		
		[Test]
		public void TestIntersecting71()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			int capacity = 0;
			
			var testing = source1.Intersecting<Item>(
				source2,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestIntersecting72()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			
			var testing = source1.Intersecting<Item>(
				source2);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestIntersecting73()
		{
			ObservableCollection<Item> source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			int capacity = 0;
			
			var testing = source1.Intersecting<Item>(
				source2,
				equalityComparerScalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
		}
		
		[Test]
		public void TestIntersecting74()
		{
			ObservableCollection<Item> source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			
			var testing = source1.Intersecting<Item>(
				source2,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
		}
		
		[Test]
		public void TestIntersecting75()
		{
			ObservableCollection<Item> source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			int capacity = 0;
			
			var testing = source1.Intersecting<Item>(
				source2,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestIntersecting76()
		{
			ObservableCollection<Item> source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			
			var testing = source1.Intersecting<Item>(
				source2);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestIntersecting77()
		{
			ObservableCollection<Item> source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			int capacity = 0;
			
			var testing = source1.Intersecting<Item>(
				source2,
				equalityComparerScalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
		}
		
		[Test]
		public void TestIntersecting78()
		{
			ObservableCollection<Item> source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			
			var testing = source1.Intersecting<Item>(
				source2,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
		}
		
		[Test]
		public void TestIntersecting79()
		{
			ObservableCollection<Item> source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			int capacity = 0;
			
			var testing = source1.Intersecting<Item>(
				source2,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestIntersecting80()
		{
			ObservableCollection<Item> source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			
			var testing = source1.Intersecting<Item>(
				source2);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestIntersecting81()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			int capacity = 0;
			
			var testing = source1.Intersecting<Item>(
				source2,
				equalityComparer,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestIntersecting82()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			
			var testing = source1.Intersecting<Item>(
				source2,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestIntersecting83()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			int capacity = 0;
			
			var testing = source1.Intersecting<Item>(
				source2,
				equalityComparer,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestIntersecting84()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			
			var testing = source1.Intersecting<Item>(
				source2,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestIntersecting85()
		{
			ObservableCollection<Item> source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			int capacity = 0;
			
			var testing = source1.Intersecting<Item>(
				source2,
				equalityComparer,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestIntersecting86()
		{
			ObservableCollection<Item> source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			
			var testing = source1.Intersecting<Item>(
				source2,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestIntersecting87()
		{
			ObservableCollection<Item> source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			int capacity = 0;
			
			var testing = source1.Intersecting<Item>(
				source2,
				equalityComparer,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestIntersecting88()
		{
			ObservableCollection<Item> source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			
			var testing = source1.Intersecting<Item>(
				source2,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestIntersecting89()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			int capacity = 0;
			
			var testing = source1.Intersecting<Item>(
				source2Scalar,
				equalityComparer,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIntersecting90()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			
			var testing = source1.Intersecting<Item>(
				source2Scalar,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIntersecting91()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			int capacity = 0;
			
			var testing = source1.Intersecting<Item>(
				source2Scalar,
				equalityComparer,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIntersecting92()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			
			var testing = source1.Intersecting<Item>(
				source2Scalar,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIntersecting93()
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			int capacity = 0;
			
			var testing = source1.Intersecting<Item>(
				source2Scalar,
				equalityComparer,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIntersecting94()
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			
			var testing = source1.Intersecting<Item>(
				source2Scalar,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIntersecting95()
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			int capacity = 0;
			
			var testing = source1.Intersecting<Item>(
				source2Scalar,
				equalityComparer,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestIntersecting96()
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			
			var testing = source1.Intersecting<Item>(
				source2Scalar,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		#endregion
		#region ItemComputing

		
		[Test]
		public void TestItemComputing01()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<int> indexScalar = getScalar<int>(0);
			Scalar<Item> defaultValueScalar = getScalar<Item>(new QuickTests.Item(1, true));
			
			var testing = sourceScalar.ItemComputing<Item>(
				indexScalar,
				defaultValueScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)indexScalar).Touch();
			test();
			((Scalar<int>)indexScalar).Change(1);
			test();

			((Scalar<Item>)defaultValueScalar).Touch();
			test();
			((Scalar<Item>)defaultValueScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestItemComputing02()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<int> indexScalar = getScalar<int>(0);
			
			var testing = sourceScalar.ItemComputing<Item>(
				indexScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)indexScalar).Touch();
			test();
			((Scalar<int>)indexScalar).Change(1);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestItemComputing03()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<int> indexScalar = getScalar<int>(0);
			Scalar<Item> defaultValueScalar = getScalar<Item>(new QuickTests.Item(1, true));
			
			var testing = sourceScalar.ItemComputing<Item>(
				indexScalar,
				defaultValueScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)indexScalar).Touch();
			test();
			((Scalar<int>)indexScalar).Change(1);
			test();

			((Scalar<Item>)defaultValueScalar).Touch();
			test();
			((Scalar<Item>)defaultValueScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestItemComputing04()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<int> indexScalar = getScalar<int>(0);
			
			var testing = sourceScalar.ItemComputing<Item>(
				indexScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)indexScalar).Touch();
			test();
			((Scalar<int>)indexScalar).Change(1);
			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestItemComputing05()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			int index = 0;
			Scalar<Item> defaultValueScalar = getScalar<Item>(new QuickTests.Item(1, true));
			
			var testing = sourceScalar.ItemComputing<Item>(
				index,
				defaultValueScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Item>)defaultValueScalar).Touch();
			test();
			((Scalar<Item>)defaultValueScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestItemComputing06()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			int index = 0;
			
			var testing = sourceScalar.ItemComputing<Item>(
				index);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestItemComputing07()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			int index = 0;
			Scalar<Item> defaultValueScalar = getScalar<Item>(new QuickTests.Item(1, true));
			
			var testing = sourceScalar.ItemComputing<Item>(
				index,
				defaultValueScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Item>)defaultValueScalar).Touch();
			test();
			((Scalar<Item>)defaultValueScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestItemComputing08()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			int index = 0;
			
			var testing = sourceScalar.ItemComputing<Item>(
				index);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestItemComputing09()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			int index = 0;
			Item defaultValue = new QuickTests.Item(1, true);
			
			var testing = sourceScalar.ItemComputing<Item>(
				index,
				defaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestItemComputing10()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			int index = 0;
			Item defaultValue = new QuickTests.Item(1, true);
			
			var testing = sourceScalar.ItemComputing<Item>(
				index,
				defaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestItemComputing11()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<int> indexScalar = getScalar<int>(0);
			Item defaultValue = new QuickTests.Item(1, true);
			
			var testing = sourceScalar.ItemComputing<Item>(
				indexScalar,
				defaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)indexScalar).Touch();
			test();
			((Scalar<int>)indexScalar).Change(1);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestItemComputing12()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<int> indexScalar = getScalar<int>(0);
			Item defaultValue = new QuickTests.Item(1, true);
			
			var testing = sourceScalar.ItemComputing<Item>(
				indexScalar,
				defaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)indexScalar).Touch();
			test();
			((Scalar<int>)indexScalar).Change(1);
			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestItemComputing13()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			Scalar<int> indexScalar = getScalar<int>(0);
			Scalar<Item> defaultValueScalar = getScalar<Item>(new QuickTests.Item(1, true));
			
			var testing = source.ItemComputing<Item>(
				indexScalar,
				defaultValueScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)indexScalar).Touch();
			test();
			((Scalar<int>)indexScalar).Change(1);
			test();

			((Scalar<Item>)defaultValueScalar).Touch();
			test();
			((Scalar<Item>)defaultValueScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestItemComputing14()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			Scalar<int> indexScalar = getScalar<int>(0);
			
			var testing = source.ItemComputing<Item>(
				indexScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)indexScalar).Touch();
			test();
			((Scalar<int>)indexScalar).Change(1);
			test();
		}
		
		[Test]
		public void TestItemComputing15()
		{
			ObservableCollection<Item> source = getItems();
			Scalar<int> indexScalar = getScalar<int>(0);
			Scalar<Item> defaultValueScalar = getScalar<Item>(new QuickTests.Item(1, true));
			
			var testing = source.ItemComputing<Item>(
				indexScalar,
				defaultValueScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)indexScalar).Touch();
			test();
			((Scalar<int>)indexScalar).Change(1);
			test();

			((Scalar<Item>)defaultValueScalar).Touch();
			test();
			((Scalar<Item>)defaultValueScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestItemComputing16()
		{
			ObservableCollection<Item> source = getItems();
			Scalar<int> indexScalar = getScalar<int>(0);
			
			var testing = source.ItemComputing<Item>(
				indexScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)indexScalar).Touch();
			test();
			((Scalar<int>)indexScalar).Change(1);
			test();
		}
		
		[Test]
		public void TestItemComputing17()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			int index = 0;
			Scalar<Item> defaultValueScalar = getScalar<Item>(new QuickTests.Item(1, true));
			
			var testing = source.ItemComputing<Item>(
				index,
				defaultValueScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Item>)defaultValueScalar).Touch();
			test();
			((Scalar<Item>)defaultValueScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestItemComputing18()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			int index = 0;
			
			var testing = source.ItemComputing<Item>(
				index);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestItemComputing19()
		{
			ObservableCollection<Item> source = getItems();
			int index = 0;
			Scalar<Item> defaultValueScalar = getScalar<Item>(new QuickTests.Item(1, true));
			
			var testing = source.ItemComputing<Item>(
				index,
				defaultValueScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Item>)defaultValueScalar).Touch();
			test();
			((Scalar<Item>)defaultValueScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestItemComputing20()
		{
			ObservableCollection<Item> source = getItems();
			int index = 0;
			
			var testing = source.ItemComputing<Item>(
				index);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestItemComputing21()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			int index = 0;
			Item defaultValue = new QuickTests.Item(1, true);
			
			var testing = source.ItemComputing<Item>(
				index,
				defaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestItemComputing22()
		{
			ObservableCollection<Item> source = getItems();
			int index = 0;
			Item defaultValue = new QuickTests.Item(1, true);
			
			var testing = source.ItemComputing<Item>(
				index,
				defaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestItemComputing23()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			Scalar<int> indexScalar = getScalar<int>(0);
			Item defaultValue = new QuickTests.Item(1, true);
			
			var testing = source.ItemComputing<Item>(
				indexScalar,
				defaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)indexScalar).Touch();
			test();
			((Scalar<int>)indexScalar).Change(1);
			test();
		}
		
		[Test]
		public void TestItemComputing24()
		{
			ObservableCollection<Item> source = getItems();
			Scalar<int> indexScalar = getScalar<int>(0);
			Item defaultValue = new QuickTests.Item(1, true);
			
			var testing = source.ItemComputing<Item>(
				indexScalar,
				defaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)indexScalar).Touch();
			test();
			((Scalar<int>)indexScalar).Change(1);
			test();
		}
		#endregion
		#region Joining

		
		[Test]
		public void TestJoining01()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> joinPredicateExpression = (i1, i2) => i1.Num == i2.Num;
			int capacity = 0;
			
			var testing = outerSourceScalar.Joining<Item, Item>(
				innerSourceScalar,
				joinPredicateExpression,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestJoining02()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> joinPredicateExpression = (i1, i2) => i1.Num == i2.Num;
			
			var testing = outerSourceScalar.Joining<Item, Item>(
				innerSourceScalar,
				joinPredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestJoining03()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<ObservableCollection<Item>> innerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> joinPredicateExpression = (i1, i2) => i1.Num == i2.Num;
			int capacity = 0;
			
			var testing = outerSourceScalar.Joining<Item, Item>(
				innerSourceScalar,
				joinPredicateExpression,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestJoining04()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<ObservableCollection<Item>> innerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> joinPredicateExpression = (i1, i2) => i1.Num == i2.Num;
			
			var testing = outerSourceScalar.Joining<Item, Item>(
				innerSourceScalar,
				joinPredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestJoining05()
		{
			Scalar<ObservableCollection<Item>> outerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> joinPredicateExpression = (i1, i2) => i1.Num == i2.Num;
			int capacity = 0;
			
			var testing = outerSourceScalar.Joining<Item, Item>(
				innerSourceScalar,
				joinPredicateExpression,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestJoining06()
		{
			Scalar<ObservableCollection<Item>> outerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> joinPredicateExpression = (i1, i2) => i1.Num == i2.Num;
			
			var testing = outerSourceScalar.Joining<Item, Item>(
				innerSourceScalar,
				joinPredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestJoining07()
		{
			Scalar<ObservableCollection<Item>> outerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<ObservableCollection<Item>> innerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> joinPredicateExpression = (i1, i2) => i1.Num == i2.Num;
			int capacity = 0;
			
			var testing = outerSourceScalar.Joining<Item, Item>(
				innerSourceScalar,
				joinPredicateExpression,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestJoining08()
		{
			Scalar<ObservableCollection<Item>> outerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<ObservableCollection<Item>> innerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> joinPredicateExpression = (i1, i2) => i1.Num == i2.Num;
			
			var testing = outerSourceScalar.Joining<Item, Item>(
				innerSourceScalar,
				joinPredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestJoining09()
		{
			System.Collections.Specialized.INotifyCollectionChanged outerSource = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> joinPredicateExpression = (i1, i2) => i1.Num == i2.Num;
			int capacity = 0;
			
			var testing = outerSource.Joining<Item, Item>(
				innerSourceScalar,
				joinPredicateExpression,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestJoining10()
		{
			System.Collections.Specialized.INotifyCollectionChanged outerSource = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> joinPredicateExpression = (i1, i2) => i1.Num == i2.Num;
			
			var testing = outerSource.Joining<Item, Item>(
				innerSourceScalar,
				joinPredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestJoining11()
		{
			System.Collections.Specialized.INotifyCollectionChanged outerSource = getItems();
			Scalar<ObservableCollection<Item>> innerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> joinPredicateExpression = (i1, i2) => i1.Num == i2.Num;
			int capacity = 0;
			
			var testing = outerSource.Joining<Item, Item>(
				innerSourceScalar,
				joinPredicateExpression,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestJoining12()
		{
			System.Collections.Specialized.INotifyCollectionChanged outerSource = getItems();
			Scalar<ObservableCollection<Item>> innerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> joinPredicateExpression = (i1, i2) => i1.Num == i2.Num;
			
			var testing = outerSource.Joining<Item, Item>(
				innerSourceScalar,
				joinPredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestJoining13()
		{
			ObservableCollection<Item> outerSource = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> joinPredicateExpression = (i1, i2) => i1.Num == i2.Num;
			int capacity = 0;
			
			var testing = outerSource.Joining<Item, Item>(
				innerSourceScalar,
				joinPredicateExpression,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestJoining14()
		{
			ObservableCollection<Item> outerSource = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> joinPredicateExpression = (i1, i2) => i1.Num == i2.Num;
			
			var testing = outerSource.Joining<Item, Item>(
				innerSourceScalar,
				joinPredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestJoining15()
		{
			ObservableCollection<Item> outerSource = getItems();
			Scalar<ObservableCollection<Item>> innerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> joinPredicateExpression = (i1, i2) => i1.Num == i2.Num;
			int capacity = 0;
			
			var testing = outerSource.Joining<Item, Item>(
				innerSourceScalar,
				joinPredicateExpression,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestJoining16()
		{
			ObservableCollection<Item> outerSource = getItems();
			Scalar<ObservableCollection<Item>> innerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> joinPredicateExpression = (i1, i2) => i1.Num == i2.Num;
			
			var testing = outerSource.Joining<Item, Item>(
				innerSourceScalar,
				joinPredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestJoining17()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> joinPredicateExpression = (i1, i2) => i1.Num == i2.Num;
			int capacity = 0;
			
			var testing = outerSourceScalar.Joining<Item, Item>(
				innerSource,
				joinPredicateExpression,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestJoining18()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> joinPredicateExpression = (i1, i2) => i1.Num == i2.Num;
			
			var testing = outerSourceScalar.Joining<Item, Item>(
				innerSource,
				joinPredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestJoining19()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			ObservableCollection<Item> innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> joinPredicateExpression = (i1, i2) => i1.Num == i2.Num;
			int capacity = 0;
			
			var testing = outerSourceScalar.Joining<Item, Item>(
				innerSource,
				joinPredicateExpression,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestJoining20()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			ObservableCollection<Item> innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> joinPredicateExpression = (i1, i2) => i1.Num == i2.Num;
			
			var testing = outerSourceScalar.Joining<Item, Item>(
				innerSource,
				joinPredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestJoining21()
		{
			Scalar<ObservableCollection<Item>> outerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> joinPredicateExpression = (i1, i2) => i1.Num == i2.Num;
			int capacity = 0;
			
			var testing = outerSourceScalar.Joining<Item, Item>(
				innerSource,
				joinPredicateExpression,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestJoining22()
		{
			Scalar<ObservableCollection<Item>> outerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> joinPredicateExpression = (i1, i2) => i1.Num == i2.Num;
			
			var testing = outerSourceScalar.Joining<Item, Item>(
				innerSource,
				joinPredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestJoining23()
		{
			Scalar<ObservableCollection<Item>> outerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			ObservableCollection<Item> innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> joinPredicateExpression = (i1, i2) => i1.Num == i2.Num;
			int capacity = 0;
			
			var testing = outerSourceScalar.Joining<Item, Item>(
				innerSource,
				joinPredicateExpression,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestJoining24()
		{
			Scalar<ObservableCollection<Item>> outerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			ObservableCollection<Item> innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> joinPredicateExpression = (i1, i2) => i1.Num == i2.Num;
			
			var testing = outerSourceScalar.Joining<Item, Item>(
				innerSource,
				joinPredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestJoining25()
		{
			System.Collections.Specialized.INotifyCollectionChanged outerSource = getItems();
			System.Collections.Specialized.INotifyCollectionChanged innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> joinPredicateExpression = (i1, i2) => i1.Num == i2.Num;
			int capacity = 0;
			
			var testing = outerSource.Joining<Item, Item>(
				innerSource,
				joinPredicateExpression,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestJoining26()
		{
			System.Collections.Specialized.INotifyCollectionChanged outerSource = getItems();
			System.Collections.Specialized.INotifyCollectionChanged innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> joinPredicateExpression = (i1, i2) => i1.Num == i2.Num;
			
			var testing = outerSource.Joining<Item, Item>(
				innerSource,
				joinPredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestJoining27()
		{
			System.Collections.Specialized.INotifyCollectionChanged outerSource = getItems();
			ObservableCollection<Item> innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> joinPredicateExpression = (i1, i2) => i1.Num == i2.Num;
			int capacity = 0;
			
			var testing = outerSource.Joining<Item, Item>(
				innerSource,
				joinPredicateExpression,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestJoining28()
		{
			System.Collections.Specialized.INotifyCollectionChanged outerSource = getItems();
			ObservableCollection<Item> innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> joinPredicateExpression = (i1, i2) => i1.Num == i2.Num;
			
			var testing = outerSource.Joining<Item, Item>(
				innerSource,
				joinPredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestJoining29()
		{
			ObservableCollection<Item> outerSource = getItems();
			System.Collections.Specialized.INotifyCollectionChanged innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> joinPredicateExpression = (i1, i2) => i1.Num == i2.Num;
			int capacity = 0;
			
			var testing = outerSource.Joining<Item, Item>(
				innerSource,
				joinPredicateExpression,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestJoining30()
		{
			ObservableCollection<Item> outerSource = getItems();
			System.Collections.Specialized.INotifyCollectionChanged innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> joinPredicateExpression = (i1, i2) => i1.Num == i2.Num;
			
			var testing = outerSource.Joining<Item, Item>(
				innerSource,
				joinPredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestJoining31()
		{
			ObservableCollection<Item> outerSource = getItems();
			ObservableCollection<Item> innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> joinPredicateExpression = (i1, i2) => i1.Num == i2.Num;
			int capacity = 0;
			
			var testing = outerSource.Joining<Item, Item>(
				innerSource,
				joinPredicateExpression,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestJoining32()
		{
			ObservableCollection<Item> outerSource = getItems();
			ObservableCollection<Item> innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> joinPredicateExpression = (i1, i2) => i1.Num == i2.Num;
			
			var testing = outerSource.Joining<Item, Item>(
				innerSource,
				joinPredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		#endregion
		#region LastComputing

		
		[Test]
		public void TestLastComputing01()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<Item> defaultValueScalar = getScalar<Item>(null);
			
			var testing = sourceScalar.LastComputing<Item>(
				defaultValueScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Item>)defaultValueScalar).Touch();
			test();
			((Scalar<Item>)defaultValueScalar).Change(new QuickTests.Item(1, true));
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestLastComputing02()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			
			var testing = sourceScalar.LastComputing<Item>();

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestLastComputing03()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<Item> defaultValueScalar = getScalar<Item>(null);
			
			var testing = sourceScalar.LastComputing<Item>(
				defaultValueScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Item>)defaultValueScalar).Touch();
			test();
			((Scalar<Item>)defaultValueScalar).Change(new QuickTests.Item(1, true));
			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestLastComputing04()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			
			var testing = sourceScalar.LastComputing<Item>();

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestLastComputing05()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			Scalar<Item> defaultValueScalar = getScalar<Item>(null);
			
			var testing = source.LastComputing<Item>(
				defaultValueScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Item>)defaultValueScalar).Touch();
			test();
			((Scalar<Item>)defaultValueScalar).Change(new QuickTests.Item(1, true));
			test();
		}
		
		[Test]
		public void TestLastComputing06()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			
			var testing = source.LastComputing<Item>();

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestLastComputing07()
		{
			ObservableCollection<Item> source = getItems();
			Scalar<Item> defaultValueScalar = getScalar<Item>(null);
			
			var testing = source.LastComputing<Item>(
				defaultValueScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Item>)defaultValueScalar).Touch();
			test();
			((Scalar<Item>)defaultValueScalar).Change(new QuickTests.Item(1, true));
			test();
		}
		
		[Test]
		public void TestLastComputing08()
		{
			ObservableCollection<Item> source = getItems();
			
			var testing = source.LastComputing<Item>();

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestLastComputing09()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Item defaultValue = null;
			
			var testing = sourceScalar.LastComputing<Item>(
				defaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestLastComputing10()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Item defaultValue = null;
			
			var testing = sourceScalar.LastComputing<Item>(
				defaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestLastComputing11()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			Item defaultValue = null;
			
			var testing = source.LastComputing<Item>(
				defaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestLastComputing12()
		{
			ObservableCollection<Item> source = getItems();
			Item defaultValue = null;
			
			var testing = source.LastComputing<Item>(
				defaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		#endregion
		#region Maximazing

		
		[Test]
		public void TestMaximazing01()
		{
			IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			Scalar<int> defaultValueScalar = getScalar<int>(0);
			
			var testing = sourceScalar.Maximazing<int>(
				comparerScalar,
				defaultValueScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();

			((Scalar<int>)defaultValueScalar).Touch();
			test();
			((Scalar<int>)defaultValueScalar).Change(1);
			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestMaximazing02()
		{
			IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			
			var testing = sourceScalar.Maximazing<int>(
				comparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestMaximazing03()
		{
			IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			Scalar<int> defaultValueScalar = getScalar<int>(0);
			
			var testing = sourceScalar.Maximazing<int>(
				defaultValueScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)defaultValueScalar).Touch();
			test();
			((Scalar<int>)defaultValueScalar).Change(1);
			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestMaximazing04()
		{
			IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			
			var testing = sourceScalar.Maximazing<int>();

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestMaximazing05()
		{
			IReadScalar<ObservableCollection<int>> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			Scalar<int> defaultValueScalar = getScalar<int>(0);
			
			var testing = sourceScalar.Maximazing<int>(
				comparerScalar,
				defaultValueScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();

			((Scalar<int>)defaultValueScalar).Touch();
			test();
			((Scalar<int>)defaultValueScalar).Change(1);
			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestMaximazing06()
		{
			IReadScalar<ObservableCollection<int>> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			
			var testing = sourceScalar.Maximazing<int>(
				comparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestMaximazing07()
		{
			IReadScalar<ObservableCollection<int>> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			Scalar<int> defaultValueScalar = getScalar<int>(0);
			
			var testing = sourceScalar.Maximazing<int>(
				defaultValueScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)defaultValueScalar).Touch();
			test();
			((Scalar<int>)defaultValueScalar).Change(1);
			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestMaximazing08()
		{
			IReadScalar<ObservableCollection<int>> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			
			var testing = sourceScalar.Maximazing<int>();

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestMaximazing09()
		{
			IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			Scalar<int> defaultValueScalar = getScalar<int>(0);
			
			var testing = sourceScalar.Maximazing<int>(
				comparer,
				defaultValueScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)defaultValueScalar).Touch();
			test();
			((Scalar<int>)defaultValueScalar).Change(1);
			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestMaximazing10()
		{
			IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			
			var testing = sourceScalar.Maximazing<int>(
				comparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestMaximazing11()
		{
			IReadScalar<ObservableCollection<int>> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			Scalar<int> defaultValueScalar = getScalar<int>(0);
			
			var testing = sourceScalar.Maximazing<int>(
				comparer,
				defaultValueScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)defaultValueScalar).Touch();
			test();
			((Scalar<int>)defaultValueScalar).Change(1);
			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestMaximazing12()
		{
			IReadScalar<ObservableCollection<int>> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			
			var testing = sourceScalar.Maximazing<int>(
				comparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestMaximazing13()
		{
			IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			int defaultValue = 0;
			
			var testing = sourceScalar.Maximazing<int>(
				comparer,
				defaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestMaximazing14()
		{
			IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			int defaultValue = 0;
			
			var testing = sourceScalar.Maximazing<int>(
				defaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestMaximazing15()
		{
			IReadScalar<ObservableCollection<int>> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			int defaultValue = 0;
			
			var testing = sourceScalar.Maximazing<int>(
				comparer,
				defaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestMaximazing16()
		{
			IReadScalar<ObservableCollection<int>> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			int defaultValue = 0;
			
			var testing = sourceScalar.Maximazing<int>(
				defaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestMaximazing17()
		{
			IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			int defaultValue = 0;
			
			var testing = sourceScalar.Maximazing<int>(
				comparerScalar,
				defaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestMaximazing18()
		{
			IReadScalar<ObservableCollection<int>> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			int defaultValue = 0;
			
			var testing = sourceScalar.Maximazing<int>(
				comparerScalar,
				defaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestMaximazing19()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			Scalar<int> defaultValueScalar = getScalar<int>(0);
			
			var testing = source.Maximazing<int>(
				comparerScalar,
				defaultValueScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();

			((Scalar<int>)defaultValueScalar).Touch();
			test();
			((Scalar<int>)defaultValueScalar).Change(1);
			test();
		}
		
		[Test]
		public void TestMaximazing20()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			
			var testing = source.Maximazing<int>(
				comparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestMaximazing21()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			Scalar<int> defaultValueScalar = getScalar<int>(0);
			
			var testing = source.Maximazing<int>(
				defaultValueScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)defaultValueScalar).Touch();
			test();
			((Scalar<int>)defaultValueScalar).Change(1);
			test();
		}
		
		[Test]
		public void TestMaximazing22()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			
			var testing = source.Maximazing<int>();

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestMaximazing23()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			Scalar<int> defaultValueScalar = getScalar<int>(0);
			
			var testing = source.Maximazing<int>(
				comparerScalar,
				defaultValueScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();

			((Scalar<int>)defaultValueScalar).Touch();
			test();
			((Scalar<int>)defaultValueScalar).Change(1);
			test();
		}
		
		[Test]
		public void TestMaximazing24()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			
			var testing = source.Maximazing<int>(
				comparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestMaximazing25()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			Scalar<int> defaultValueScalar = getScalar<int>(0);
			
			var testing = source.Maximazing<int>(
				defaultValueScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)defaultValueScalar).Touch();
			test();
			((Scalar<int>)defaultValueScalar).Change(1);
			test();
		}
		
		[Test]
		public void TestMaximazing26()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			
			var testing = source.Maximazing<int>();

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestMaximazing27()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			Scalar<int> defaultValueScalar = getScalar<int>(0);
			
			var testing = source.Maximazing<int>(
				comparer,
				defaultValueScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)defaultValueScalar).Touch();
			test();
			((Scalar<int>)defaultValueScalar).Change(1);
			test();
		}
		
		[Test]
		public void TestMaximazing28()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			
			var testing = source.Maximazing<int>(
				comparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestMaximazing29()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			Scalar<int> defaultValueScalar = getScalar<int>(0);
			
			var testing = source.Maximazing<int>(
				comparer,
				defaultValueScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)defaultValueScalar).Touch();
			test();
			((Scalar<int>)defaultValueScalar).Change(1);
			test();
		}
		
		[Test]
		public void TestMaximazing30()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			
			var testing = source.Maximazing<int>(
				comparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestMaximazing31()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			int defaultValue = 0;
			
			var testing = source.Maximazing<int>(
				comparer,
				defaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestMaximazing32()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			int defaultValue = 0;
			
			var testing = source.Maximazing<int>(
				defaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestMaximazing33()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			int defaultValue = 0;
			
			var testing = source.Maximazing<int>(
				comparer,
				defaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestMaximazing34()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			int defaultValue = 0;
			
			var testing = source.Maximazing<int>(
				defaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestMaximazing35()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			int defaultValue = 0;
			
			var testing = source.Maximazing<int>(
				comparerScalar,
				defaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestMaximazing36()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			int defaultValue = 0;
			
			var testing = source.Maximazing<int>(
				comparerScalar,
				defaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();
		}
		#endregion
		#region Minimazing

		
		[Test]
		public void TestMinimazing01()
		{
			IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			Scalar<int> defaultValueScalar = getScalar<int>(0);
			
			var testing = sourceScalar.Minimazing<int>(
				comparerScalar,
				defaultValueScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();

			((Scalar<int>)defaultValueScalar).Touch();
			test();
			((Scalar<int>)defaultValueScalar).Change(1);
			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestMinimazing02()
		{
			IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			
			var testing = sourceScalar.Minimazing<int>(
				comparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestMinimazing03()
		{
			IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			Scalar<int> defaultValueScalar = getScalar<int>(0);
			
			var testing = sourceScalar.Minimazing<int>(
				defaultValueScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)defaultValueScalar).Touch();
			test();
			((Scalar<int>)defaultValueScalar).Change(1);
			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestMinimazing04()
		{
			IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			
			var testing = sourceScalar.Minimazing<int>();

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestMinimazing05()
		{
			IReadScalar<ObservableCollection<int>> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			Scalar<int> defaultValueScalar = getScalar<int>(0);
			
			var testing = sourceScalar.Minimazing<int>(
				comparerScalar,
				defaultValueScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();

			((Scalar<int>)defaultValueScalar).Touch();
			test();
			((Scalar<int>)defaultValueScalar).Change(1);
			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestMinimazing06()
		{
			IReadScalar<ObservableCollection<int>> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			
			var testing = sourceScalar.Minimazing<int>(
				comparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestMinimazing07()
		{
			IReadScalar<ObservableCollection<int>> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			Scalar<int> defaultValueScalar = getScalar<int>(0);
			
			var testing = sourceScalar.Minimazing<int>(
				defaultValueScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)defaultValueScalar).Touch();
			test();
			((Scalar<int>)defaultValueScalar).Change(1);
			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestMinimazing08()
		{
			IReadScalar<ObservableCollection<int>> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			
			var testing = sourceScalar.Minimazing<int>();

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestMinimazing09()
		{
			IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			Scalar<int> defaultValueScalar = getScalar<int>(0);
			
			var testing = sourceScalar.Minimazing<int>(
				comparer,
				defaultValueScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)defaultValueScalar).Touch();
			test();
			((Scalar<int>)defaultValueScalar).Change(1);
			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestMinimazing10()
		{
			IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			
			var testing = sourceScalar.Minimazing<int>(
				comparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestMinimazing11()
		{
			IReadScalar<ObservableCollection<int>> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			Scalar<int> defaultValueScalar = getScalar<int>(0);
			
			var testing = sourceScalar.Minimazing<int>(
				comparer,
				defaultValueScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)defaultValueScalar).Touch();
			test();
			((Scalar<int>)defaultValueScalar).Change(1);
			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestMinimazing12()
		{
			IReadScalar<ObservableCollection<int>> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			
			var testing = sourceScalar.Minimazing<int>(
				comparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestMinimazing13()
		{
			IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			int defaultValue = 0;
			
			var testing = sourceScalar.Minimazing<int>(
				comparer,
				defaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestMinimazing14()
		{
			IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			int defaultValue = 0;
			
			var testing = sourceScalar.Minimazing<int>(
				defaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestMinimazing15()
		{
			IReadScalar<ObservableCollection<int>> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			int defaultValue = 0;
			
			var testing = sourceScalar.Minimazing<int>(
				comparer,
				defaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestMinimazing16()
		{
			IReadScalar<ObservableCollection<int>> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			int defaultValue = 0;
			
			var testing = sourceScalar.Minimazing<int>(
				defaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestMinimazing17()
		{
			IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			int defaultValue = 0;
			
			var testing = sourceScalar.Minimazing<int>(
				comparerScalar,
				defaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestMinimazing18()
		{
			IReadScalar<ObservableCollection<int>> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			int defaultValue = 0;
			
			var testing = sourceScalar.Minimazing<int>(
				comparerScalar,
				defaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestMinimazing19()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			Scalar<int> defaultValueScalar = getScalar<int>(0);
			
			var testing = source.Minimazing<int>(
				comparerScalar,
				defaultValueScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();

			((Scalar<int>)defaultValueScalar).Touch();
			test();
			((Scalar<int>)defaultValueScalar).Change(1);
			test();
		}
		
		[Test]
		public void TestMinimazing20()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			
			var testing = source.Minimazing<int>(
				comparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestMinimazing21()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			Scalar<int> defaultValueScalar = getScalar<int>(0);
			
			var testing = source.Minimazing<int>(
				defaultValueScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)defaultValueScalar).Touch();
			test();
			((Scalar<int>)defaultValueScalar).Change(1);
			test();
		}
		
		[Test]
		public void TestMinimazing22()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			
			var testing = source.Minimazing<int>();

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestMinimazing23()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			Scalar<int> defaultValueScalar = getScalar<int>(0);
			
			var testing = source.Minimazing<int>(
				comparerScalar,
				defaultValueScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();

			((Scalar<int>)defaultValueScalar).Touch();
			test();
			((Scalar<int>)defaultValueScalar).Change(1);
			test();
		}
		
		[Test]
		public void TestMinimazing24()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			
			var testing = source.Minimazing<int>(
				comparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestMinimazing25()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			Scalar<int> defaultValueScalar = getScalar<int>(0);
			
			var testing = source.Minimazing<int>(
				defaultValueScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)defaultValueScalar).Touch();
			test();
			((Scalar<int>)defaultValueScalar).Change(1);
			test();
		}
		
		[Test]
		public void TestMinimazing26()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			
			var testing = source.Minimazing<int>();

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestMinimazing27()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			Scalar<int> defaultValueScalar = getScalar<int>(0);
			
			var testing = source.Minimazing<int>(
				comparer,
				defaultValueScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)defaultValueScalar).Touch();
			test();
			((Scalar<int>)defaultValueScalar).Change(1);
			test();
		}
		
		[Test]
		public void TestMinimazing28()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			
			var testing = source.Minimazing<int>(
				comparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestMinimazing29()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			Scalar<int> defaultValueScalar = getScalar<int>(0);
			
			var testing = source.Minimazing<int>(
				comparer,
				defaultValueScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)defaultValueScalar).Touch();
			test();
			((Scalar<int>)defaultValueScalar).Change(1);
			test();
		}
		
		[Test]
		public void TestMinimazing30()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			
			var testing = source.Minimazing<int>(
				comparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestMinimazing31()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			int defaultValue = 0;
			
			var testing = source.Minimazing<int>(
				comparer,
				defaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestMinimazing32()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			int defaultValue = 0;
			
			var testing = source.Minimazing<int>(
				defaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestMinimazing33()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			int defaultValue = 0;
			
			var testing = source.Minimazing<int>(
				comparer,
				defaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestMinimazing34()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			int defaultValue = 0;
			
			var testing = source.Minimazing<int>(
				defaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestMinimazing35()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			int defaultValue = 0;
			
			var testing = source.Minimazing<int>(
				comparerScalar,
				defaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestMinimazing36()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			int defaultValue = 0;
			
			var testing = source.Minimazing<int>(
				comparerScalar,
				defaultValue);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();
		}
		#endregion
		#region OfTypeComputing

		
		[Test]
		public void TestOfTypeComputing01()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			
			var testing = sourceScalar.OfTypeComputing<object>();

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestOfTypeComputing02()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			
			var testing = source.OfTypeComputing<object>();

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		#endregion
		#region Ordering

		
		[Test]
		public void TestOrdering01()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			Scalar<System.ComponentModel.ListSortDirection> sortDirectionScalar = getScalar<System.ComponentModel.ListSortDirection>(System.ComponentModel.ListSortDirection.Ascending);
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			int maxTogetherThenOrderings = 0;
			
			var testing = source.Ordering<int, int>(
				orderingValueSelectorExpression,
				sortDirectionScalar,
				comparerScalar,
				maxTogetherThenOrderings);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Touch();
			test();
			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Change(System.ComponentModel.ListSortDirection.Descending);
			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestOrdering02()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			Scalar<System.ComponentModel.ListSortDirection> sortDirectionScalar = getScalar<System.ComponentModel.ListSortDirection>(System.ComponentModel.ListSortDirection.Ascending);
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			
			var testing = source.Ordering<int, int>(
				orderingValueSelectorExpression,
				sortDirectionScalar,
				comparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Touch();
			test();
			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Change(System.ComponentModel.ListSortDirection.Descending);
			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestOrdering03()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			Scalar<System.ComponentModel.ListSortDirection> sortDirectionScalar = getScalar<System.ComponentModel.ListSortDirection>(System.ComponentModel.ListSortDirection.Ascending);
			int maxTogetherThenOrderings = 0;
			
			var testing = source.Ordering<int, int>(
				orderingValueSelectorExpression,
				sortDirectionScalar,
				maxTogetherThenOrderings);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Touch();
			test();
			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Change(System.ComponentModel.ListSortDirection.Descending);
			test();
		}
		
		[Test]
		public void TestOrdering04()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			Scalar<System.ComponentModel.ListSortDirection> sortDirectionScalar = getScalar<System.ComponentModel.ListSortDirection>(System.ComponentModel.ListSortDirection.Ascending);
			
			var testing = source.Ordering<int, int>(
				orderingValueSelectorExpression,
				sortDirectionScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Touch();
			test();
			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Change(System.ComponentModel.ListSortDirection.Descending);
			test();
		}
		
		[Test]
		public void TestOrdering05()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			int maxTogetherThenOrderings = 0;
			
			var testing = source.Ordering<int, int>(
				orderingValueSelectorExpression,
				comparerScalar,
				maxTogetherThenOrderings);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestOrdering06()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			
			var testing = source.Ordering<int, int>(
				orderingValueSelectorExpression,
				comparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestOrdering07()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			int maxTogetherThenOrderings = 0;
			
			var testing = source.Ordering<int, int>(
				orderingValueSelectorExpression,
				maxTogetherThenOrderings);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestOrdering08()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			
			var testing = source.Ordering<int, int>(
				orderingValueSelectorExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestOrdering09()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			Scalar<System.ComponentModel.ListSortDirection> sortDirectionScalar = getScalar<System.ComponentModel.ListSortDirection>(System.ComponentModel.ListSortDirection.Ascending);
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			int maxTogetherThenOrderings = 0;
			
			var testing = source.Ordering<int, int>(
				orderingValueSelectorExpression,
				sortDirectionScalar,
				comparerScalar,
				maxTogetherThenOrderings);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Touch();
			test();
			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Change(System.ComponentModel.ListSortDirection.Descending);
			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestOrdering10()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			Scalar<System.ComponentModel.ListSortDirection> sortDirectionScalar = getScalar<System.ComponentModel.ListSortDirection>(System.ComponentModel.ListSortDirection.Ascending);
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			
			var testing = source.Ordering<int, int>(
				orderingValueSelectorExpression,
				sortDirectionScalar,
				comparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Touch();
			test();
			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Change(System.ComponentModel.ListSortDirection.Descending);
			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestOrdering11()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			Scalar<System.ComponentModel.ListSortDirection> sortDirectionScalar = getScalar<System.ComponentModel.ListSortDirection>(System.ComponentModel.ListSortDirection.Ascending);
			int maxTogetherThenOrderings = 0;
			
			var testing = source.Ordering<int, int>(
				orderingValueSelectorExpression,
				sortDirectionScalar,
				maxTogetherThenOrderings);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Touch();
			test();
			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Change(System.ComponentModel.ListSortDirection.Descending);
			test();
		}
		
		[Test]
		public void TestOrdering12()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			Scalar<System.ComponentModel.ListSortDirection> sortDirectionScalar = getScalar<System.ComponentModel.ListSortDirection>(System.ComponentModel.ListSortDirection.Ascending);
			
			var testing = source.Ordering<int, int>(
				orderingValueSelectorExpression,
				sortDirectionScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Touch();
			test();
			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Change(System.ComponentModel.ListSortDirection.Descending);
			test();
		}
		
		[Test]
		public void TestOrdering13()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			int maxTogetherThenOrderings = 0;
			
			var testing = source.Ordering<int, int>(
				orderingValueSelectorExpression,
				comparerScalar,
				maxTogetherThenOrderings);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestOrdering14()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			
			var testing = source.Ordering<int, int>(
				orderingValueSelectorExpression,
				comparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestOrdering15()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			int maxTogetherThenOrderings = 0;
			
			var testing = source.Ordering<int, int>(
				orderingValueSelectorExpression,
				maxTogetherThenOrderings);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestOrdering16()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			
			var testing = source.Ordering<int, int>(
				orderingValueSelectorExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestOrdering17()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			System.ComponentModel.ListSortDirection sortDirection = System.ComponentModel.ListSortDirection.Ascending;
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			int maxTogetherThenOrderings = 0;
			
			var testing = source.Ordering<int, int>(
				orderingValueSelectorExpression,
				sortDirection,
				comparerScalar,
				maxTogetherThenOrderings);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestOrdering18()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			System.ComponentModel.ListSortDirection sortDirection = System.ComponentModel.ListSortDirection.Ascending;
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			
			var testing = source.Ordering<int, int>(
				orderingValueSelectorExpression,
				sortDirection,
				comparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestOrdering19()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			System.ComponentModel.ListSortDirection sortDirection = System.ComponentModel.ListSortDirection.Ascending;
			int maxTogetherThenOrderings = 0;
			
			var testing = source.Ordering<int, int>(
				orderingValueSelectorExpression,
				sortDirection,
				maxTogetherThenOrderings);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestOrdering20()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			System.ComponentModel.ListSortDirection sortDirection = System.ComponentModel.ListSortDirection.Ascending;
			
			var testing = source.Ordering<int, int>(
				orderingValueSelectorExpression,
				sortDirection);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestOrdering21()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			System.ComponentModel.ListSortDirection sortDirection = System.ComponentModel.ListSortDirection.Ascending;
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			int maxTogetherThenOrderings = 0;
			
			var testing = source.Ordering<int, int>(
				orderingValueSelectorExpression,
				sortDirection,
				comparerScalar,
				maxTogetherThenOrderings);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestOrdering22()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			System.ComponentModel.ListSortDirection sortDirection = System.ComponentModel.ListSortDirection.Ascending;
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			
			var testing = source.Ordering<int, int>(
				orderingValueSelectorExpression,
				sortDirection,
				comparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestOrdering23()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			System.ComponentModel.ListSortDirection sortDirection = System.ComponentModel.ListSortDirection.Ascending;
			int maxTogetherThenOrderings = 0;
			
			var testing = source.Ordering<int, int>(
				orderingValueSelectorExpression,
				sortDirection,
				maxTogetherThenOrderings);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestOrdering24()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			System.ComponentModel.ListSortDirection sortDirection = System.ComponentModel.ListSortDirection.Ascending;
			
			var testing = source.Ordering<int, int>(
				orderingValueSelectorExpression,
				sortDirection);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestOrdering25()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			Scalar<System.ComponentModel.ListSortDirection> sortDirectionScalar = getScalar<System.ComponentModel.ListSortDirection>(System.ComponentModel.ListSortDirection.Ascending);
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			int maxTogetherThenOrderings = 0;
			
			var testing = source.Ordering<int, int>(
				orderingValueSelectorExpression,
				sortDirectionScalar,
				comparer,
				maxTogetherThenOrderings);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Touch();
			test();
			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Change(System.ComponentModel.ListSortDirection.Descending);
			test();
		}
		
		[Test]
		public void TestOrdering26()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			Scalar<System.ComponentModel.ListSortDirection> sortDirectionScalar = getScalar<System.ComponentModel.ListSortDirection>(System.ComponentModel.ListSortDirection.Ascending);
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			
			var testing = source.Ordering<int, int>(
				orderingValueSelectorExpression,
				sortDirectionScalar,
				comparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Touch();
			test();
			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Change(System.ComponentModel.ListSortDirection.Descending);
			test();
		}
		
		[Test]
		public void TestOrdering27()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			int maxTogetherThenOrderings = 0;
			
			var testing = source.Ordering<int, int>(
				orderingValueSelectorExpression,
				comparer,
				maxTogetherThenOrderings);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestOrdering28()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			
			var testing = source.Ordering<int, int>(
				orderingValueSelectorExpression,
				comparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestOrdering29()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			Scalar<System.ComponentModel.ListSortDirection> sortDirectionScalar = getScalar<System.ComponentModel.ListSortDirection>(System.ComponentModel.ListSortDirection.Ascending);
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			int maxTogetherThenOrderings = 0;
			
			var testing = source.Ordering<int, int>(
				orderingValueSelectorExpression,
				sortDirectionScalar,
				comparer,
				maxTogetherThenOrderings);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Touch();
			test();
			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Change(System.ComponentModel.ListSortDirection.Descending);
			test();
		}
		
		[Test]
		public void TestOrdering30()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			Scalar<System.ComponentModel.ListSortDirection> sortDirectionScalar = getScalar<System.ComponentModel.ListSortDirection>(System.ComponentModel.ListSortDirection.Ascending);
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			
			var testing = source.Ordering<int, int>(
				orderingValueSelectorExpression,
				sortDirectionScalar,
				comparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Touch();
			test();
			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Change(System.ComponentModel.ListSortDirection.Descending);
			test();
		}
		
		[Test]
		public void TestOrdering31()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			int maxTogetherThenOrderings = 0;
			
			var testing = source.Ordering<int, int>(
				orderingValueSelectorExpression,
				comparer,
				maxTogetherThenOrderings);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestOrdering32()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			
			var testing = source.Ordering<int, int>(
				orderingValueSelectorExpression,
				comparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestOrdering33()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			System.ComponentModel.ListSortDirection sortDirection = System.ComponentModel.ListSortDirection.Ascending;
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			int maxTogetherThenOrderings = 0;
			
			var testing = source.Ordering<int, int>(
				orderingValueSelectorExpression,
				sortDirection,
				comparer,
				maxTogetherThenOrderings);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestOrdering34()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			System.ComponentModel.ListSortDirection sortDirection = System.ComponentModel.ListSortDirection.Ascending;
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			
			var testing = source.Ordering<int, int>(
				orderingValueSelectorExpression,
				sortDirection,
				comparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestOrdering35()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			System.ComponentModel.ListSortDirection sortDirection = System.ComponentModel.ListSortDirection.Ascending;
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			int maxTogetherThenOrderings = 0;
			
			var testing = source.Ordering<int, int>(
				orderingValueSelectorExpression,
				sortDirection,
				comparer,
				maxTogetherThenOrderings);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestOrdering36()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			System.ComponentModel.ListSortDirection sortDirection = System.ComponentModel.ListSortDirection.Ascending;
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			
			var testing = source.Ordering<int, int>(
				orderingValueSelectorExpression,
				sortDirection,
				comparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestOrdering37()
		{
			IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			Scalar<System.ComponentModel.ListSortDirection> sortDirectionScalar = getScalar<System.ComponentModel.ListSortDirection>(System.ComponentModel.ListSortDirection.Ascending);
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			int maxTogetherThenOrderings = 0;
			
			var testing = sourceScalar.Ordering<int, int>(
				orderingValueSelectorExpression,
				sortDirectionScalar,
				comparerScalar,
				maxTogetherThenOrderings);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Touch();
			test();
			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Change(System.ComponentModel.ListSortDirection.Descending);
			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestOrdering38()
		{
			IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			Scalar<System.ComponentModel.ListSortDirection> sortDirectionScalar = getScalar<System.ComponentModel.ListSortDirection>(System.ComponentModel.ListSortDirection.Ascending);
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			
			var testing = sourceScalar.Ordering<int, int>(
				orderingValueSelectorExpression,
				sortDirectionScalar,
				comparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Touch();
			test();
			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Change(System.ComponentModel.ListSortDirection.Descending);
			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestOrdering39()
		{
			IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			Scalar<System.ComponentModel.ListSortDirection> sortDirectionScalar = getScalar<System.ComponentModel.ListSortDirection>(System.ComponentModel.ListSortDirection.Ascending);
			int maxTogetherThenOrderings = 0;
			
			var testing = sourceScalar.Ordering<int, int>(
				orderingValueSelectorExpression,
				sortDirectionScalar,
				maxTogetherThenOrderings);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Touch();
			test();
			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Change(System.ComponentModel.ListSortDirection.Descending);
			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestOrdering40()
		{
			IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			Scalar<System.ComponentModel.ListSortDirection> sortDirectionScalar = getScalar<System.ComponentModel.ListSortDirection>(System.ComponentModel.ListSortDirection.Ascending);
			
			var testing = sourceScalar.Ordering<int, int>(
				orderingValueSelectorExpression,
				sortDirectionScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Touch();
			test();
			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Change(System.ComponentModel.ListSortDirection.Descending);
			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestOrdering41()
		{
			IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			int maxTogetherThenOrderings = 0;
			
			var testing = sourceScalar.Ordering<int, int>(
				orderingValueSelectorExpression,
				comparerScalar,
				maxTogetherThenOrderings);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestOrdering42()
		{
			IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			
			var testing = sourceScalar.Ordering<int, int>(
				orderingValueSelectorExpression,
				comparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestOrdering43()
		{
			IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			int maxTogetherThenOrderings = 0;
			
			var testing = sourceScalar.Ordering<int, int>(
				orderingValueSelectorExpression,
				maxTogetherThenOrderings);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestOrdering44()
		{
			IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			
			var testing = sourceScalar.Ordering<int, int>(
				orderingValueSelectorExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestOrdering45()
		{
			IReadScalar<ObservableCollection<int>> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			Scalar<System.ComponentModel.ListSortDirection> sortDirectionScalar = getScalar<System.ComponentModel.ListSortDirection>(System.ComponentModel.ListSortDirection.Ascending);
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			int maxTogetherThenOrderings = 0;
			
			var testing = sourceScalar.Ordering<int, int>(
				orderingValueSelectorExpression,
				sortDirectionScalar,
				comparerScalar,
				maxTogetherThenOrderings);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Touch();
			test();
			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Change(System.ComponentModel.ListSortDirection.Descending);
			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestOrdering46()
		{
			IReadScalar<ObservableCollection<int>> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			Scalar<System.ComponentModel.ListSortDirection> sortDirectionScalar = getScalar<System.ComponentModel.ListSortDirection>(System.ComponentModel.ListSortDirection.Ascending);
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			
			var testing = sourceScalar.Ordering<int, int>(
				orderingValueSelectorExpression,
				sortDirectionScalar,
				comparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Touch();
			test();
			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Change(System.ComponentModel.ListSortDirection.Descending);
			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestOrdering47()
		{
			IReadScalar<ObservableCollection<int>> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			Scalar<System.ComponentModel.ListSortDirection> sortDirectionScalar = getScalar<System.ComponentModel.ListSortDirection>(System.ComponentModel.ListSortDirection.Ascending);
			int maxTogetherThenOrderings = 0;
			
			var testing = sourceScalar.Ordering<int, int>(
				orderingValueSelectorExpression,
				sortDirectionScalar,
				maxTogetherThenOrderings);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Touch();
			test();
			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Change(System.ComponentModel.ListSortDirection.Descending);
			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestOrdering48()
		{
			IReadScalar<ObservableCollection<int>> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			Scalar<System.ComponentModel.ListSortDirection> sortDirectionScalar = getScalar<System.ComponentModel.ListSortDirection>(System.ComponentModel.ListSortDirection.Ascending);
			
			var testing = sourceScalar.Ordering<int, int>(
				orderingValueSelectorExpression,
				sortDirectionScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Touch();
			test();
			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Change(System.ComponentModel.ListSortDirection.Descending);
			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestOrdering49()
		{
			IReadScalar<ObservableCollection<int>> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			int maxTogetherThenOrderings = 0;
			
			var testing = sourceScalar.Ordering<int, int>(
				orderingValueSelectorExpression,
				comparerScalar,
				maxTogetherThenOrderings);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestOrdering50()
		{
			IReadScalar<ObservableCollection<int>> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			
			var testing = sourceScalar.Ordering<int, int>(
				orderingValueSelectorExpression,
				comparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestOrdering51()
		{
			IReadScalar<ObservableCollection<int>> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			int maxTogetherThenOrderings = 0;
			
			var testing = sourceScalar.Ordering<int, int>(
				orderingValueSelectorExpression,
				maxTogetherThenOrderings);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestOrdering52()
		{
			IReadScalar<ObservableCollection<int>> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			
			var testing = sourceScalar.Ordering<int, int>(
				orderingValueSelectorExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestOrdering53()
		{
			IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			System.ComponentModel.ListSortDirection sortDirection = System.ComponentModel.ListSortDirection.Ascending;
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			int maxTogetherThenOrderings = 0;
			
			var testing = sourceScalar.Ordering<int, int>(
				orderingValueSelectorExpression,
				sortDirection,
				comparerScalar,
				maxTogetherThenOrderings);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestOrdering54()
		{
			IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			System.ComponentModel.ListSortDirection sortDirection = System.ComponentModel.ListSortDirection.Ascending;
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			
			var testing = sourceScalar.Ordering<int, int>(
				orderingValueSelectorExpression,
				sortDirection,
				comparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestOrdering55()
		{
			IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			System.ComponentModel.ListSortDirection sortDirection = System.ComponentModel.ListSortDirection.Ascending;
			int maxTogetherThenOrderings = 0;
			
			var testing = sourceScalar.Ordering<int, int>(
				orderingValueSelectorExpression,
				sortDirection,
				maxTogetherThenOrderings);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestOrdering56()
		{
			IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			System.ComponentModel.ListSortDirection sortDirection = System.ComponentModel.ListSortDirection.Ascending;
			
			var testing = sourceScalar.Ordering<int, int>(
				orderingValueSelectorExpression,
				sortDirection);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestOrdering57()
		{
			IReadScalar<ObservableCollection<int>> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			System.ComponentModel.ListSortDirection sortDirection = System.ComponentModel.ListSortDirection.Ascending;
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			int maxTogetherThenOrderings = 0;
			
			var testing = sourceScalar.Ordering<int, int>(
				orderingValueSelectorExpression,
				sortDirection,
				comparerScalar,
				maxTogetherThenOrderings);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestOrdering58()
		{
			IReadScalar<ObservableCollection<int>> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			System.ComponentModel.ListSortDirection sortDirection = System.ComponentModel.ListSortDirection.Ascending;
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			
			var testing = sourceScalar.Ordering<int, int>(
				orderingValueSelectorExpression,
				sortDirection,
				comparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestOrdering59()
		{
			IReadScalar<ObservableCollection<int>> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			System.ComponentModel.ListSortDirection sortDirection = System.ComponentModel.ListSortDirection.Ascending;
			int maxTogetherThenOrderings = 0;
			
			var testing = sourceScalar.Ordering<int, int>(
				orderingValueSelectorExpression,
				sortDirection,
				maxTogetherThenOrderings);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestOrdering60()
		{
			IReadScalar<ObservableCollection<int>> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			System.ComponentModel.ListSortDirection sortDirection = System.ComponentModel.ListSortDirection.Ascending;
			
			var testing = sourceScalar.Ordering<int, int>(
				orderingValueSelectorExpression,
				sortDirection);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestOrdering61()
		{
			IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			Scalar<System.ComponentModel.ListSortDirection> sortDirectionScalar = getScalar<System.ComponentModel.ListSortDirection>(System.ComponentModel.ListSortDirection.Ascending);
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			int maxTogetherThenOrderings = 0;
			
			var testing = sourceScalar.Ordering<int, int>(
				orderingValueSelectorExpression,
				sortDirectionScalar,
				comparer,
				maxTogetherThenOrderings);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Touch();
			test();
			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Change(System.ComponentModel.ListSortDirection.Descending);
			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestOrdering62()
		{
			IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			Scalar<System.ComponentModel.ListSortDirection> sortDirectionScalar = getScalar<System.ComponentModel.ListSortDirection>(System.ComponentModel.ListSortDirection.Ascending);
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			
			var testing = sourceScalar.Ordering<int, int>(
				orderingValueSelectorExpression,
				sortDirectionScalar,
				comparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Touch();
			test();
			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Change(System.ComponentModel.ListSortDirection.Descending);
			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestOrdering63()
		{
			IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			int maxTogetherThenOrderings = 0;
			
			var testing = sourceScalar.Ordering<int, int>(
				orderingValueSelectorExpression,
				comparer,
				maxTogetherThenOrderings);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestOrdering64()
		{
			IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			
			var testing = sourceScalar.Ordering<int, int>(
				orderingValueSelectorExpression,
				comparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestOrdering65()
		{
			IReadScalar<ObservableCollection<int>> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			Scalar<System.ComponentModel.ListSortDirection> sortDirectionScalar = getScalar<System.ComponentModel.ListSortDirection>(System.ComponentModel.ListSortDirection.Ascending);
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			int maxTogetherThenOrderings = 0;
			
			var testing = sourceScalar.Ordering<int, int>(
				orderingValueSelectorExpression,
				sortDirectionScalar,
				comparer,
				maxTogetherThenOrderings);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Touch();
			test();
			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Change(System.ComponentModel.ListSortDirection.Descending);
			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestOrdering66()
		{
			IReadScalar<ObservableCollection<int>> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			Scalar<System.ComponentModel.ListSortDirection> sortDirectionScalar = getScalar<System.ComponentModel.ListSortDirection>(System.ComponentModel.ListSortDirection.Ascending);
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			
			var testing = sourceScalar.Ordering<int, int>(
				orderingValueSelectorExpression,
				sortDirectionScalar,
				comparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Touch();
			test();
			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Change(System.ComponentModel.ListSortDirection.Descending);
			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestOrdering67()
		{
			IReadScalar<ObservableCollection<int>> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			int maxTogetherThenOrderings = 0;
			
			var testing = sourceScalar.Ordering<int, int>(
				orderingValueSelectorExpression,
				comparer,
				maxTogetherThenOrderings);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestOrdering68()
		{
			IReadScalar<ObservableCollection<int>> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			
			var testing = sourceScalar.Ordering<int, int>(
				orderingValueSelectorExpression,
				comparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestOrdering69()
		{
			IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			System.ComponentModel.ListSortDirection sortDirection = System.ComponentModel.ListSortDirection.Ascending;
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			int maxTogetherThenOrderings = 0;
			
			var testing = sourceScalar.Ordering<int, int>(
				orderingValueSelectorExpression,
				sortDirection,
				comparer,
				maxTogetherThenOrderings);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestOrdering70()
		{
			IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			System.ComponentModel.ListSortDirection sortDirection = System.ComponentModel.ListSortDirection.Ascending;
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			
			var testing = sourceScalar.Ordering<int, int>(
				orderingValueSelectorExpression,
				sortDirection,
				comparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestOrdering71()
		{
			IReadScalar<ObservableCollection<int>> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			System.ComponentModel.ListSortDirection sortDirection = System.ComponentModel.ListSortDirection.Ascending;
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			int maxTogetherThenOrderings = 0;
			
			var testing = sourceScalar.Ordering<int, int>(
				orderingValueSelectorExpression,
				sortDirection,
				comparer,
				maxTogetherThenOrderings);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestOrdering72()
		{
			IReadScalar<ObservableCollection<int>> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			System.ComponentModel.ListSortDirection sortDirection = System.ComponentModel.ListSortDirection.Ascending;
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			
			var testing = sourceScalar.Ordering<int, int>(
				orderingValueSelectorExpression,
				sortDirection,
				comparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		#endregion
		#region PredicateGroupJoining

		
		[Test]
		public void TestPredicateGroupJoining01()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> joinPredicateExpression = (i1, i2) => i1.Num == i2.Num;
			
			var testing = outerSourceScalar.PredicateGroupJoining<Item, Item>(
				innerSourceScalar,
				joinPredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestPredicateGroupJoining02()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<ObservableCollection<Item>> innerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> joinPredicateExpression = (i1, i2) => i1.Num == i2.Num;
			
			var testing = outerSourceScalar.PredicateGroupJoining<Item, Item>(
				innerSourceScalar,
				joinPredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestPredicateGroupJoining03()
		{
			Scalar<ObservableCollection<Item>> outerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> joinPredicateExpression = (i1, i2) => i1.Num == i2.Num;
			
			var testing = outerSourceScalar.PredicateGroupJoining<Item, Item>(
				innerSourceScalar,
				joinPredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestPredicateGroupJoining04()
		{
			Scalar<ObservableCollection<Item>> outerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<ObservableCollection<Item>> innerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> joinPredicateExpression = (i1, i2) => i1.Num == i2.Num;
			
			var testing = outerSourceScalar.PredicateGroupJoining<Item, Item>(
				innerSourceScalar,
				joinPredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestPredicateGroupJoining05()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> joinPredicateExpression = (i1, i2) => i1.Num == i2.Num;
			
			var testing = outerSourceScalar.PredicateGroupJoining<Item, Item>(
				innerSource,
				joinPredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestPredicateGroupJoining06()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> outerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			ObservableCollection<Item> innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> joinPredicateExpression = (i1, i2) => i1.Num == i2.Num;
			
			var testing = outerSourceScalar.PredicateGroupJoining<Item, Item>(
				innerSource,
				joinPredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)outerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestPredicateGroupJoining07()
		{
			Scalar<ObservableCollection<Item>> outerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> joinPredicateExpression = (i1, i2) => i1.Num == i2.Num;
			
			var testing = outerSourceScalar.PredicateGroupJoining<Item, Item>(
				innerSource,
				joinPredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestPredicateGroupJoining08()
		{
			Scalar<ObservableCollection<Item>> outerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			ObservableCollection<Item> innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> joinPredicateExpression = (i1, i2) => i1.Num == i2.Num;
			
			var testing = outerSourceScalar.PredicateGroupJoining<Item, Item>(
				innerSource,
				joinPredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSourceScalar.Value));

				if (outerSourceScalarValue != null)
				{		
					outerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Active = !outerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					outerSourceScalarValue[2].Num = outerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceScalarValue != null)
				{
					outerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)outerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestPredicateGroupJoining09()
		{
			System.Collections.Specialized.INotifyCollectionChanged outerSource = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> joinPredicateExpression = (i1, i2) => i1.Num == i2.Num;
			
			var testing = outerSource.PredicateGroupJoining<Item, Item>(
				innerSourceScalar,
				joinPredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestPredicateGroupJoining10()
		{
			System.Collections.Specialized.INotifyCollectionChanged outerSource = getItems();
			Scalar<ObservableCollection<Item>> innerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> joinPredicateExpression = (i1, i2) => i1.Num == i2.Num;
			
			var testing = outerSource.PredicateGroupJoining<Item, Item>(
				innerSourceScalar,
				joinPredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestPredicateGroupJoining11()
		{
			ObservableCollection<Item> outerSource = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> innerSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> joinPredicateExpression = (i1, i2) => i1.Num == i2.Num;
			
			var testing = outerSource.PredicateGroupJoining<Item, Item>(
				innerSourceScalar,
				joinPredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)innerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestPredicateGroupJoining12()
		{
			ObservableCollection<Item> outerSource = getItems();
			Scalar<ObservableCollection<Item>> innerSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> joinPredicateExpression = (i1, i2) => i1.Num == i2.Num;
			
			var testing = outerSource.PredicateGroupJoining<Item, Item>(
				innerSourceScalar,
				joinPredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSourceScalar.Value));

				if (innerSourceScalarValue != null)
				{		
					innerSourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Active = !innerSourceScalarValue[2].Active;
					testing.ValidateConsistency();
					innerSourceScalarValue[2].Num = innerSourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceScalarValue != null)
				{
					innerSourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)innerSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestPredicateGroupJoining13()
		{
			System.Collections.Specialized.INotifyCollectionChanged outerSource = getItems();
			System.Collections.Specialized.INotifyCollectionChanged innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> joinPredicateExpression = (i1, i2) => i1.Num == i2.Num;
			
			var testing = outerSource.PredicateGroupJoining<Item, Item>(
				innerSource,
				joinPredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestPredicateGroupJoining14()
		{
			System.Collections.Specialized.INotifyCollectionChanged outerSource = getItems();
			ObservableCollection<Item> innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> joinPredicateExpression = (i1, i2) => i1.Num == i2.Num;
			
			var testing = outerSource.PredicateGroupJoining<Item, Item>(
				innerSource,
				joinPredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestPredicateGroupJoining15()
		{
			ObservableCollection<Item> outerSource = getItems();
			System.Collections.Specialized.INotifyCollectionChanged innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> joinPredicateExpression = (i1, i2) => i1.Num == i2.Num;
			
			var testing = outerSource.PredicateGroupJoining<Item, Item>(
				innerSource,
				joinPredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestPredicateGroupJoining16()
		{
			ObservableCollection<Item> outerSource = getItems();
			ObservableCollection<Item> innerSource = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, Item, bool>> joinPredicateExpression = (i1, i2) => i1.Num == i2.Num;
			
			var testing = outerSource.PredicateGroupJoining<Item, Item>(
				innerSource,
				joinPredicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var outerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)outerSource));

				if (outerSourceValue != null)
				{		
					outerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					outerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					outerSourceValue[2].Active = !outerSourceValue[2].Active;
					testing.ValidateConsistency();
					outerSourceValue[2].Num = outerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					outerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var innerSourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)innerSource));

				if (innerSourceValue != null)
				{		
					innerSourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					innerSourceValue.Move(1, 3);
					testing.ValidateConsistency();
					innerSourceValue[2].Active = !innerSourceValue[2].Active;
					testing.ValidateConsistency();
					innerSourceValue[2].Num = innerSourceValue[2].Num + 1;
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					innerSourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)outerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)innerSource));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (outerSourceValue != null)
				{
					outerSourceValue.Insert(0, new QuickTests.Item(1, true));
					outerSourceValue.Insert(1, new QuickTests.Item(2, true));
					outerSourceValue.Insert(2, new QuickTests.Item(3, true));
					outerSourceValue.Insert(3, new QuickTests.Item(3, true));
					outerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (innerSourceValue != null)
				{
					innerSourceValue.Insert(0, new QuickTests.Item(1, true));
					innerSourceValue.Insert(1, new QuickTests.Item(2, true));
					innerSourceValue.Insert(2, new QuickTests.Item(3, true));
					innerSourceValue.Insert(3, new QuickTests.Item(3, true));
					innerSourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		#endregion
		#region Prepending

		
		[Test]
		public void TestPrepending01()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<Item> itemScalar = getScalar<Item>(new QuickTests.Item(1, true));
			
			var testing = sourceScalar.Prepending<Item>(
				itemScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Item>)itemScalar).Touch();
			test();
			((Scalar<Item>)itemScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestPrepending02()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<Item> itemScalar = getScalar<Item>(new QuickTests.Item(1, true));
			
			var testing = sourceScalar.Prepending<Item>(
				itemScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Item>)itemScalar).Touch();
			test();
			((Scalar<Item>)itemScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestPrepending03()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			Scalar<Item> itemScalar = getScalar<Item>(new QuickTests.Item(1, true));
			
			var testing = source.Prepending<Item>(
				itemScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Item>)itemScalar).Touch();
			test();
			((Scalar<Item>)itemScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestPrepending04()
		{
			ObservableCollection<Item> source = getItems();
			Scalar<Item> itemScalar = getScalar<Item>(new QuickTests.Item(1, true));
			
			var testing = source.Prepending<Item>(
				itemScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Item>)itemScalar).Touch();
			test();
			((Scalar<Item>)itemScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestPrepending05()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			Item item = new QuickTests.Item(1, true);
			
			var testing = source.Prepending<Item>(
				item);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestPrepending06()
		{
			ObservableCollection<Item> source = getItems();
			Item item = new QuickTests.Item(1, true);
			
			var testing = source.Prepending<Item>(
				item);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestPrepending07()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Item item = new QuickTests.Item(1, true);
			
			var testing = sourceScalar.Prepending<Item>(
				item);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestPrepending08()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Item item = new QuickTests.Item(1, true);
			
			var testing = sourceScalar.Prepending<Item>(
				item);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
		}
		#endregion
		#region Reversing

		
		[Test]
		public void TestReversing01()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			
			var testing = sourceScalar.Reversing<Item>();

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestReversing02()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			
			var testing = sourceScalar.Reversing<Item>();

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestReversing03()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			
			var testing = source.Reversing<Item>();

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestReversing04()
		{
			ObservableCollection<Item> source = getItems();
			
			var testing = source.Reversing<Item>();

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		#endregion
		#region Selecting

		
		[Test]
		public void TestSelecting01()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, object>> selectorExpression = i => i.Num;
			
			var testing = sourceScalar.Selecting<Item, object>(
				selectorExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestSelecting02()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, object>> selectorExpression = i => i.Num;
			
			var testing = sourceScalar.Selecting<Item, object>(
				selectorExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestSelecting03()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, object>> selectorExpression = i => i.Num;
			
			var testing = source.Selecting<Item, object>(
				selectorExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestSelecting04()
		{
			ObservableCollection<Item> source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, object>> selectorExpression = i => i.Num;
			
			var testing = source.Selecting<Item, object>(
				selectorExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		#endregion
		#region SelectingMany

		
		[Test]
		public void TestSelectingMany01()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, System.Collections.Specialized.INotifyCollectionChanged>> selectorExpression = i => i.Items;
			
			var testing = sourceScalar.SelectingMany<Item, object>(
				selectorExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestSelectingMany02()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, System.Collections.Specialized.INotifyCollectionChanged>> selectorExpression = i => i.Items;
			
			var testing = sourceScalar.SelectingMany<Item, object>(
				selectorExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestSelectingMany03()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, System.Collections.Specialized.INotifyCollectionChanged>> selectorExpression = i => i.Items;
			
			var testing = source.SelectingMany<Item, object>(
				selectorExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestSelectingMany04()
		{
			ObservableCollection<Item> source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, System.Collections.Specialized.INotifyCollectionChanged>> selectorExpression = i => i.Items;
			
			var testing = source.SelectingMany<Item, object>(
				selectorExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestSelectingMany05()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int, System.Collections.Specialized.INotifyCollectionChanged>> selectorExpression = (i, ind) => i.Items;
			
			var testing = sourceScalar.SelectingMany<Item, object>(
				selectorExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestSelectingMany06()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int, System.Collections.Specialized.INotifyCollectionChanged>> selectorExpression = (i, ind) => i.Items;
			
			var testing = sourceScalar.SelectingMany<Item, object>(
				selectorExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestSelectingMany07()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int, System.Collections.Specialized.INotifyCollectionChanged>> selectorExpression = (i, ind) => i.Items;
			
			var testing = source.SelectingMany<Item, object>(
				selectorExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestSelectingMany08()
		{
			ObservableCollection<Item> source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int, System.Collections.Specialized.INotifyCollectionChanged>> selectorExpression = (i, ind) => i.Items;
			
			var testing = source.SelectingMany<Item, object>(
				selectorExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		#endregion
		#region SequenceComputing

		
		[Test]
		public void TestSequenceComputing01()
		{
			Scalar<int> countScalar = getScalar<int>(3);
			
			var testing = countScalar.SequenceComputing();

			void test()
			{
				testing.ValidateConsistency();

				IList listSource;
			}

			test();

			((Scalar<int>)countScalar).Touch();
			test();
			((Scalar<int>)countScalar).Change(4);
			test();
		}
		#endregion
		#region Skipping

		
		[Test]
		public void TestSkipping01()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<int> countScalar = getScalar<int>(3);
			int capacity = 0;
			
			var testing = sourceScalar.Skipping<Item>(
				countScalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)countScalar).Touch();
			test();
			((Scalar<int>)countScalar).Change(4);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestSkipping02()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<int> countScalar = getScalar<int>(3);
			
			var testing = sourceScalar.Skipping<Item>(
				countScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)countScalar).Touch();
			test();
			((Scalar<int>)countScalar).Change(4);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestSkipping03()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<int> countScalar = getScalar<int>(3);
			int capacity = 0;
			
			var testing = sourceScalar.Skipping<Item>(
				countScalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)countScalar).Touch();
			test();
			((Scalar<int>)countScalar).Change(4);
			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestSkipping04()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<int> countScalar = getScalar<int>(3);
			
			var testing = sourceScalar.Skipping<Item>(
				countScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)countScalar).Touch();
			test();
			((Scalar<int>)countScalar).Change(4);
			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestSkipping05()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			Scalar<int> countScalar = getScalar<int>(3);
			int capacity = 0;
			
			var testing = source.Skipping<Item>(
				countScalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)countScalar).Touch();
			test();
			((Scalar<int>)countScalar).Change(4);
			test();
		}
		
		[Test]
		public void TestSkipping06()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			Scalar<int> countScalar = getScalar<int>(3);
			
			var testing = source.Skipping<Item>(
				countScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)countScalar).Touch();
			test();
			((Scalar<int>)countScalar).Change(4);
			test();
		}
		
		[Test]
		public void TestSkipping07()
		{
			ObservableCollection<Item> source = getItems();
			Scalar<int> countScalar = getScalar<int>(3);
			int capacity = 0;
			
			var testing = source.Skipping<Item>(
				countScalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)countScalar).Touch();
			test();
			((Scalar<int>)countScalar).Change(4);
			test();
		}
		
		[Test]
		public void TestSkipping08()
		{
			ObservableCollection<Item> source = getItems();
			Scalar<int> countScalar = getScalar<int>(3);
			
			var testing = source.Skipping<Item>(
				countScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)countScalar).Touch();
			test();
			((Scalar<int>)countScalar).Change(4);
			test();
		}
		
		[Test]
		public void TestSkipping09()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			int count = 3;
			int capacity = 0;
			
			var testing = sourceScalar.Skipping<Item>(
				count,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestSkipping10()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			int count = 3;
			
			var testing = sourceScalar.Skipping<Item>(
				count);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestSkipping11()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			int count = 3;
			int capacity = 0;
			
			var testing = sourceScalar.Skipping<Item>(
				count,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestSkipping12()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			int count = 3;
			
			var testing = sourceScalar.Skipping<Item>(
				count);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestSkipping13()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			int count = 3;
			int capacity = 0;
			
			var testing = source.Skipping<Item>(
				count,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestSkipping14()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			int count = 3;
			
			var testing = source.Skipping<Item>(
				count);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestSkipping15()
		{
			ObservableCollection<Item> source = getItems();
			int count = 3;
			int capacity = 0;
			
			var testing = source.Skipping<Item>(
				count,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestSkipping16()
		{
			ObservableCollection<Item> source = getItems();
			int count = 3;
			
			var testing = source.Skipping<Item>(
				count);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		#endregion
		#region SkippingWhile

		
		[Test]
		public void TestSkippingWhile01()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int, bool>> predicateExpression = (i, ind) => i.Active;
			int capacity = 0;
			
			var testing = sourceScalar.SkippingWhile<Item>(
				predicateExpression,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestSkippingWhile02()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int, bool>> predicateExpression = (i, ind) => i.Active;
			
			var testing = sourceScalar.SkippingWhile<Item>(
				predicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestSkippingWhile03()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int, bool>> predicateExpression = (i, ind) => i.Active;
			int capacity = 0;
			
			var testing = sourceScalar.SkippingWhile<Item>(
				predicateExpression,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestSkippingWhile04()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int, bool>> predicateExpression = (i, ind) => i.Active;
			
			var testing = sourceScalar.SkippingWhile<Item>(
				predicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestSkippingWhile05()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int, bool>> predicateExpression = (i, ind) => i.Active;
			int capacity = 0;
			
			var testing = source.SkippingWhile<Item>(
				predicateExpression,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestSkippingWhile06()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int, bool>> predicateExpression = (i, ind) => i.Active;
			
			var testing = source.SkippingWhile<Item>(
				predicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestSkippingWhile07()
		{
			ObservableCollection<Item> source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int, bool>> predicateExpression = (i, ind) => i.Active;
			int capacity = 0;
			
			var testing = source.SkippingWhile<Item>(
				predicateExpression,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestSkippingWhile08()
		{
			ObservableCollection<Item> source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int, bool>> predicateExpression = (i, ind) => i.Active;
			
			var testing = source.SkippingWhile<Item>(
				predicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestSkippingWhile09()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			int capacity = 0;
			
			var testing = sourceScalar.SkippingWhile<Item>(
				predicateExpression,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestSkippingWhile10()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			
			var testing = sourceScalar.SkippingWhile<Item>(
				predicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestSkippingWhile11()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			int capacity = 0;
			
			var testing = sourceScalar.SkippingWhile<Item>(
				predicateExpression,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestSkippingWhile12()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			
			var testing = sourceScalar.SkippingWhile<Item>(
				predicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestSkippingWhile13()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			int capacity = 0;
			
			var testing = source.SkippingWhile<Item>(
				predicateExpression,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestSkippingWhile14()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			
			var testing = source.SkippingWhile<Item>(
				predicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestSkippingWhile15()
		{
			ObservableCollection<Item> source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			int capacity = 0;
			
			var testing = source.SkippingWhile<Item>(
				predicateExpression,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestSkippingWhile16()
		{
			ObservableCollection<Item> source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			
			var testing = source.SkippingWhile<Item>(
				predicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		#endregion
		#region StringsConcatenating

		
		[Test]
		public void TestStringsConcatenating01()
		{
			IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<Selecting<Item, string>>(getItems().Selecting(i => i.Num.ToString()));
			Scalar<string> separatorScalar = getScalar<string>("&");
			
			var testing = sourceScalar.StringsConcatenating(
				separatorScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, string>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, string>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<string>)separatorScalar).Touch();
			test();
			((Scalar<string>)separatorScalar).Change("&&&");
			test();
			((Scalar<string>)separatorScalar).Change("&&");
			test();

			((Scalar<Selecting<Item, string>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, string>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestStringsConcatenating02()
		{
			IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<Selecting<Item, string>>(getItems().Selecting(i => i.Num.ToString()));
			
			var testing = sourceScalar.StringsConcatenating();

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, string>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, string>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Selecting<Item, string>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, string>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestStringsConcatenating03()
		{
			Selecting<Item, string> source = getItems().Selecting(i => i.Num.ToString());
			Scalar<string> separatorScalar = getScalar<string>("&");
			
			var testing = source.StringsConcatenating(
				separatorScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, string>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, string>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<string>)separatorScalar).Touch();
			test();
			((Scalar<string>)separatorScalar).Change("&&&");
			test();
			((Scalar<string>)separatorScalar).Change("&&");
			test();
		}
		
		[Test]
		public void TestStringsConcatenating04()
		{
			Selecting<Item, string> source = getItems().Selecting(i => i.Num.ToString());
			
			var testing = source.StringsConcatenating();

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, string>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, string>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestStringsConcatenating05()
		{
			Selecting<Item, string> source = getItems().Selecting(i => i.Num.ToString());
			string separator = "&";
			
			var testing = source.StringsConcatenating(
				separator);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, string>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, string>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestStringsConcatenating06()
		{
			IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<Selecting<Item, string>>(getItems().Selecting(i => i.Num.ToString()));
			string separator = "&";
			
			var testing = sourceScalar.StringsConcatenating(
				separator);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, string>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, string>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Selecting<Item, string>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, string>>)sourceScalar).Change(null);
			test();
		}
		#endregion
		#region Summarizing

		
		[Test]
		public void TestSummarizing01()
		{
			IReadScalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			
			var testing = sourceScalar.Summarizing<int>();

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestSummarizing02()
		{
			IReadScalar<ObservableCollection<int>> sourceScalar = getScalar<Selecting<Item, int>>(getItems().Selecting(i => i.Num));
			
			var testing = sourceScalar.Summarizing<int>();

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((Selecting<Item, int>)sourceScalar.Value)?.Source);

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)sourceScalar.Value)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<Selecting<Item, int>>)sourceScalar).Touch();
			test();
			((Scalar<Selecting<Item, int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestSummarizing03()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			
			var testing = source.Summarizing<int>();

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestSummarizing04()
		{
			Selecting<Item, int> source = getItems().Selecting(i => i.Num);
			
			var testing = source.Summarizing<int>();

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((Selecting<Item, int>)source)?.Source);

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((Selecting<Item, int>)source)?.Source);
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		#endregion
		#region Taking

		
		[Test]
		public void TestTaking01()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<int> startIndexScalar = getScalar<int>(0);
			Scalar<int> countScalar = getScalar<int>(3);
			int capacity = 0;
			
			var testing = sourceScalar.Taking<Item>(
				startIndexScalar,
				countScalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)startIndexScalar).Touch();
			test();
			((Scalar<int>)startIndexScalar).Change(1);
			test();

			((Scalar<int>)countScalar).Touch();
			test();
			((Scalar<int>)countScalar).Change(4);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestTaking02()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<int> startIndexScalar = getScalar<int>(0);
			Scalar<int> countScalar = getScalar<int>(3);
			
			var testing = sourceScalar.Taking<Item>(
				startIndexScalar,
				countScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)startIndexScalar).Touch();
			test();
			((Scalar<int>)startIndexScalar).Change(1);
			test();

			((Scalar<int>)countScalar).Touch();
			test();
			((Scalar<int>)countScalar).Change(4);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestTaking03()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<int> startIndexScalar = getScalar<int>(0);
			Scalar<int> countScalar = getScalar<int>(3);
			int capacity = 0;
			
			var testing = sourceScalar.Taking<Item>(
				startIndexScalar,
				countScalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)startIndexScalar).Touch();
			test();
			((Scalar<int>)startIndexScalar).Change(1);
			test();

			((Scalar<int>)countScalar).Touch();
			test();
			((Scalar<int>)countScalar).Change(4);
			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestTaking04()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<int> startIndexScalar = getScalar<int>(0);
			Scalar<int> countScalar = getScalar<int>(3);
			
			var testing = sourceScalar.Taking<Item>(
				startIndexScalar,
				countScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)startIndexScalar).Touch();
			test();
			((Scalar<int>)startIndexScalar).Change(1);
			test();

			((Scalar<int>)countScalar).Touch();
			test();
			((Scalar<int>)countScalar).Change(4);
			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestTaking05()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<int> startIndexScalar = getScalar<int>(0);
			int count = 3;
			
			var testing = sourceScalar.Taking<Item>(
				startIndexScalar,
				count);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)startIndexScalar).Touch();
			test();
			((Scalar<int>)startIndexScalar).Change(1);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestTaking06()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<int> startIndexScalar = getScalar<int>(0);
			int count = 3;
			
			var testing = sourceScalar.Taking<Item>(
				startIndexScalar,
				count);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)startIndexScalar).Touch();
			test();
			((Scalar<int>)startIndexScalar).Change(1);
			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestTaking07()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			int startIndex = 0;
			Scalar<int> countScalar = getScalar<int>(3);
			int capacity = 0;
			
			var testing = sourceScalar.Taking<Item>(
				startIndex,
				countScalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)countScalar).Touch();
			test();
			((Scalar<int>)countScalar).Change(4);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestTaking08()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			int startIndex = 0;
			Scalar<int> countScalar = getScalar<int>(3);
			
			var testing = sourceScalar.Taking<Item>(
				startIndex,
				countScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)countScalar).Touch();
			test();
			((Scalar<int>)countScalar).Change(4);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestTaking09()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			int startIndex = 0;
			Scalar<int> countScalar = getScalar<int>(3);
			int capacity = 0;
			
			var testing = sourceScalar.Taking<Item>(
				startIndex,
				countScalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)countScalar).Touch();
			test();
			((Scalar<int>)countScalar).Change(4);
			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestTaking10()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			int startIndex = 0;
			Scalar<int> countScalar = getScalar<int>(3);
			
			var testing = sourceScalar.Taking<Item>(
				startIndex,
				countScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)countScalar).Touch();
			test();
			((Scalar<int>)countScalar).Change(4);
			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestTaking11()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			int startIndex = 0;
			int count = 3;
			
			var testing = sourceScalar.Taking<Item>(
				startIndex,
				count);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestTaking12()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			int startIndex = 0;
			int count = 3;
			
			var testing = sourceScalar.Taking<Item>(
				startIndex,
				count);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestTaking13()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			Scalar<int> startIndexScalar = getScalar<int>(0);
			Scalar<int> countScalar = getScalar<int>(3);
			int capacity = 0;
			
			var testing = source.Taking<Item>(
				startIndexScalar,
				countScalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)startIndexScalar).Touch();
			test();
			((Scalar<int>)startIndexScalar).Change(1);
			test();

			((Scalar<int>)countScalar).Touch();
			test();
			((Scalar<int>)countScalar).Change(4);
			test();
		}
		
		[Test]
		public void TestTaking14()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			Scalar<int> startIndexScalar = getScalar<int>(0);
			Scalar<int> countScalar = getScalar<int>(3);
			
			var testing = source.Taking<Item>(
				startIndexScalar,
				countScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)startIndexScalar).Touch();
			test();
			((Scalar<int>)startIndexScalar).Change(1);
			test();

			((Scalar<int>)countScalar).Touch();
			test();
			((Scalar<int>)countScalar).Change(4);
			test();
		}
		
		[Test]
		public void TestTaking15()
		{
			ObservableCollection<Item> source = getItems();
			Scalar<int> startIndexScalar = getScalar<int>(0);
			Scalar<int> countScalar = getScalar<int>(3);
			int capacity = 0;
			
			var testing = source.Taking<Item>(
				startIndexScalar,
				countScalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)startIndexScalar).Touch();
			test();
			((Scalar<int>)startIndexScalar).Change(1);
			test();

			((Scalar<int>)countScalar).Touch();
			test();
			((Scalar<int>)countScalar).Change(4);
			test();
		}
		
		[Test]
		public void TestTaking16()
		{
			ObservableCollection<Item> source = getItems();
			Scalar<int> startIndexScalar = getScalar<int>(0);
			Scalar<int> countScalar = getScalar<int>(3);
			
			var testing = source.Taking<Item>(
				startIndexScalar,
				countScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)startIndexScalar).Touch();
			test();
			((Scalar<int>)startIndexScalar).Change(1);
			test();

			((Scalar<int>)countScalar).Touch();
			test();
			((Scalar<int>)countScalar).Change(4);
			test();
		}
		
		[Test]
		public void TestTaking17()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			Scalar<int> startIndexScalar = getScalar<int>(0);
			int count = 3;
			
			var testing = source.Taking<Item>(
				startIndexScalar,
				count);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)startIndexScalar).Touch();
			test();
			((Scalar<int>)startIndexScalar).Change(1);
			test();
		}
		
		[Test]
		public void TestTaking18()
		{
			ObservableCollection<Item> source = getItems();
			Scalar<int> startIndexScalar = getScalar<int>(0);
			int count = 3;
			
			var testing = source.Taking<Item>(
				startIndexScalar,
				count);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)startIndexScalar).Touch();
			test();
			((Scalar<int>)startIndexScalar).Change(1);
			test();
		}
		
		[Test]
		public void TestTaking19()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			int startIndex = 0;
			Scalar<int> countScalar = getScalar<int>(3);
			int capacity = 0;
			
			var testing = source.Taking<Item>(
				startIndex,
				countScalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)countScalar).Touch();
			test();
			((Scalar<int>)countScalar).Change(4);
			test();
		}
		
		[Test]
		public void TestTaking20()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			int startIndex = 0;
			Scalar<int> countScalar = getScalar<int>(3);
			
			var testing = source.Taking<Item>(
				startIndex,
				countScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)countScalar).Touch();
			test();
			((Scalar<int>)countScalar).Change(4);
			test();
		}
		
		[Test]
		public void TestTaking21()
		{
			ObservableCollection<Item> source = getItems();
			int startIndex = 0;
			Scalar<int> countScalar = getScalar<int>(3);
			int capacity = 0;
			
			var testing = source.Taking<Item>(
				startIndex,
				countScalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)countScalar).Touch();
			test();
			((Scalar<int>)countScalar).Change(4);
			test();
		}
		
		[Test]
		public void TestTaking22()
		{
			ObservableCollection<Item> source = getItems();
			int startIndex = 0;
			Scalar<int> countScalar = getScalar<int>(3);
			
			var testing = source.Taking<Item>(
				startIndex,
				countScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<int>)countScalar).Touch();
			test();
			((Scalar<int>)countScalar).Change(4);
			test();
		}
		
		[Test]
		public void TestTaking23()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			int startIndex = 0;
			int count = 3;
			
			var testing = source.Taking<Item>(
				startIndex,
				count);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestTaking24()
		{
			ObservableCollection<Item> source = getItems();
			int startIndex = 0;
			int count = 3;
			
			var testing = source.Taking<Item>(
				startIndex,
				count);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		#endregion
		#region TakingWhile

		
		[Test]
		public void TestTakingWhile01()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int, bool>> predicateExpression = (i, ind) => i.Active;
			int capacity = 0;
			
			var testing = sourceScalar.TakingWhile<Item>(
				predicateExpression,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestTakingWhile02()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int, bool>> predicateExpression = (i, ind) => i.Active;
			
			var testing = sourceScalar.TakingWhile<Item>(
				predicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestTakingWhile03()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int, bool>> predicateExpression = (i, ind) => i.Active;
			int capacity = 0;
			
			var testing = sourceScalar.TakingWhile<Item>(
				predicateExpression,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestTakingWhile04()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, int, bool>> predicateExpression = (i, ind) => i.Active;
			
			var testing = sourceScalar.TakingWhile<Item>(
				predicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestTakingWhile05()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int, bool>> predicateExpression = (i, ind) => i.Active;
			int capacity = 0;
			
			var testing = source.TakingWhile<Item>(
				predicateExpression,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestTakingWhile06()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int, bool>> predicateExpression = (i, ind) => i.Active;
			
			var testing = source.TakingWhile<Item>(
				predicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestTakingWhile07()
		{
			ObservableCollection<Item> source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int, bool>> predicateExpression = (i, ind) => i.Active;
			int capacity = 0;
			
			var testing = source.TakingWhile<Item>(
				predicateExpression,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestTakingWhile08()
		{
			ObservableCollection<Item> source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, int, bool>> predicateExpression = (i, ind) => i.Active;
			
			var testing = source.TakingWhile<Item>(
				predicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestTakingWhile09()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			int capacity = 0;
			
			var testing = sourceScalar.TakingWhile<Item>(
				predicateExpression,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestTakingWhile10()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			
			var testing = sourceScalar.TakingWhile<Item>(
				predicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestTakingWhile11()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			int capacity = 0;
			
			var testing = sourceScalar.TakingWhile<Item>(
				predicateExpression,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestTakingWhile12()
		{
			Scalar<ObservableCollection<Item>> sourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			
			var testing = sourceScalar.TakingWhile<Item>(
				predicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)sourceScalar.Value));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)sourceScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)sourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestTakingWhile13()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			int capacity = 0;
			
			var testing = source.TakingWhile<Item>(
				predicateExpression,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestTakingWhile14()
		{
			System.Collections.Specialized.INotifyCollectionChanged source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			
			var testing = source.TakingWhile<Item>(
				predicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestTakingWhile15()
		{
			ObservableCollection<Item> source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			int capacity = 0;
			
			var testing = source.TakingWhile<Item>(
				predicateExpression,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestTakingWhile16()
		{
			ObservableCollection<Item> source = getItems();
			System.Linq.Expressions.Expression<System.Func<Item, bool>> predicateExpression = i => i.Active;
			
			var testing = source.TakingWhile<Item>(
				predicateExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		#endregion
		#region ThenOrdering

		
		[Test]
		public void TestThenOrdering01()
		{
			IBCode.ObservableComputations.Common.Interface.IOrdering<int> source = getItems().Selecting(i => i.Num).Ordering(i => i, 32);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			Scalar<System.ComponentModel.ListSortDirection> sortDirectionScalar = getScalar<System.ComponentModel.ListSortDirection>(System.ComponentModel.ListSortDirection.Ascending);
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			int maxTogetherThenOrderings = 0;
			
			var testing = source.ThenOrdering<int, int>(
				orderingValueSelectorExpression,
				sortDirectionScalar,
				comparerScalar,
				maxTogetherThenOrderings);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((IBCode.ObservableComputations.Common.Interface.IOrdering<int>)source).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((IBCode.ObservableComputations.Common.Interface.IOrdering<int>)source).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Touch();
			test();
			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Change(System.ComponentModel.ListSortDirection.Descending);
			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestThenOrdering02()
		{
			IBCode.ObservableComputations.Common.Interface.IOrdering<int> source = getItems().Selecting(i => i.Num).Ordering(i => i, 32);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			Scalar<System.ComponentModel.ListSortDirection> sortDirectionScalar = getScalar<System.ComponentModel.ListSortDirection>(System.ComponentModel.ListSortDirection.Ascending);
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			
			var testing = source.ThenOrdering<int, int>(
				orderingValueSelectorExpression,
				sortDirectionScalar,
				comparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((IBCode.ObservableComputations.Common.Interface.IOrdering<int>)source).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((IBCode.ObservableComputations.Common.Interface.IOrdering<int>)source).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Touch();
			test();
			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Change(System.ComponentModel.ListSortDirection.Descending);
			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestThenOrdering03()
		{
			IBCode.ObservableComputations.Common.Interface.IOrdering<int> source = getItems().Selecting(i => i.Num).Ordering(i => i, 32);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			Scalar<System.ComponentModel.ListSortDirection> sortDirectionScalar = getScalar<System.ComponentModel.ListSortDirection>(System.ComponentModel.ListSortDirection.Ascending);
			int maxTogetherThenOrderings = 0;
			
			var testing = source.ThenOrdering<int, int>(
				orderingValueSelectorExpression,
				sortDirectionScalar,
				maxTogetherThenOrderings);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((IBCode.ObservableComputations.Common.Interface.IOrdering<int>)source).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((IBCode.ObservableComputations.Common.Interface.IOrdering<int>)source).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Touch();
			test();
			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Change(System.ComponentModel.ListSortDirection.Descending);
			test();
		}
		
		[Test]
		public void TestThenOrdering04()
		{
			IBCode.ObservableComputations.Common.Interface.IOrdering<int> source = getItems().Selecting(i => i.Num).Ordering(i => i, 32);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			Scalar<System.ComponentModel.ListSortDirection> sortDirectionScalar = getScalar<System.ComponentModel.ListSortDirection>(System.ComponentModel.ListSortDirection.Ascending);
			
			var testing = source.ThenOrdering<int, int>(
				orderingValueSelectorExpression,
				sortDirectionScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((IBCode.ObservableComputations.Common.Interface.IOrdering<int>)source).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((IBCode.ObservableComputations.Common.Interface.IOrdering<int>)source).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Touch();
			test();
			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Change(System.ComponentModel.ListSortDirection.Descending);
			test();
		}
		
		[Test]
		public void TestThenOrdering05()
		{
			IBCode.ObservableComputations.Common.Interface.IOrdering<int> source = getItems().Selecting(i => i.Num).Ordering(i => i, 32);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			int maxTogetherThenOrderings = 0;
			
			var testing = source.ThenOrdering<int, int>(
				orderingValueSelectorExpression,
				comparerScalar,
				maxTogetherThenOrderings);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((IBCode.ObservableComputations.Common.Interface.IOrdering<int>)source).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((IBCode.ObservableComputations.Common.Interface.IOrdering<int>)source).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestThenOrdering06()
		{
			IBCode.ObservableComputations.Common.Interface.IOrdering<int> source = getItems().Selecting(i => i.Num).Ordering(i => i, 32);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			
			var testing = source.ThenOrdering<int, int>(
				orderingValueSelectorExpression,
				comparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((IBCode.ObservableComputations.Common.Interface.IOrdering<int>)source).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((IBCode.ObservableComputations.Common.Interface.IOrdering<int>)source).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestThenOrdering07()
		{
			IBCode.ObservableComputations.Common.Interface.IOrdering<int> source = getItems().Selecting(i => i.Num).Ordering(i => i, 32);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			int maxTogetherThenOrderings = 0;
			
			var testing = source.ThenOrdering<int, int>(
				orderingValueSelectorExpression,
				maxTogetherThenOrderings);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((IBCode.ObservableComputations.Common.Interface.IOrdering<int>)source).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((IBCode.ObservableComputations.Common.Interface.IOrdering<int>)source).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestThenOrdering08()
		{
			IBCode.ObservableComputations.Common.Interface.IOrdering<int> source = getItems().Selecting(i => i.Num).Ordering(i => i, 32);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			
			var testing = source.ThenOrdering<int, int>(
				orderingValueSelectorExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((IBCode.ObservableComputations.Common.Interface.IOrdering<int>)source).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((IBCode.ObservableComputations.Common.Interface.IOrdering<int>)source).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestThenOrdering09()
		{
			IBCode.ObservableComputations.Common.Interface.IOrdering<int> source = getItems().Selecting(i => i.Num).Ordering(i => i, 32);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			System.ComponentModel.ListSortDirection sortDirection = System.ComponentModel.ListSortDirection.Ascending;
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			int maxTogetherThenOrderings = 0;
			
			var testing = source.ThenOrdering<int, int>(
				orderingValueSelectorExpression,
				sortDirection,
				comparerScalar,
				maxTogetherThenOrderings);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((IBCode.ObservableComputations.Common.Interface.IOrdering<int>)source).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((IBCode.ObservableComputations.Common.Interface.IOrdering<int>)source).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestThenOrdering10()
		{
			IBCode.ObservableComputations.Common.Interface.IOrdering<int> source = getItems().Selecting(i => i.Num).Ordering(i => i, 32);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			System.ComponentModel.ListSortDirection sortDirection = System.ComponentModel.ListSortDirection.Ascending;
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			
			var testing = source.ThenOrdering<int, int>(
				orderingValueSelectorExpression,
				sortDirection,
				comparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((IBCode.ObservableComputations.Common.Interface.IOrdering<int>)source).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((IBCode.ObservableComputations.Common.Interface.IOrdering<int>)source).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestThenOrdering11()
		{
			IBCode.ObservableComputations.Common.Interface.IOrdering<int> source = getItems().Selecting(i => i.Num).Ordering(i => i, 32);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			System.ComponentModel.ListSortDirection sortDirection = System.ComponentModel.ListSortDirection.Ascending;
			int maxTogetherThenOrderings = 0;
			
			var testing = source.ThenOrdering<int, int>(
				orderingValueSelectorExpression,
				sortDirection,
				maxTogetherThenOrderings);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((IBCode.ObservableComputations.Common.Interface.IOrdering<int>)source).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((IBCode.ObservableComputations.Common.Interface.IOrdering<int>)source).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestThenOrdering12()
		{
			IBCode.ObservableComputations.Common.Interface.IOrdering<int> source = getItems().Selecting(i => i.Num).Ordering(i => i, 32);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			System.ComponentModel.ListSortDirection sortDirection = System.ComponentModel.ListSortDirection.Ascending;
			
			var testing = source.ThenOrdering<int, int>(
				orderingValueSelectorExpression,
				sortDirection);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((IBCode.ObservableComputations.Common.Interface.IOrdering<int>)source).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((IBCode.ObservableComputations.Common.Interface.IOrdering<int>)source).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestThenOrdering13()
		{
			IBCode.ObservableComputations.Common.Interface.IOrdering<int> source = getItems().Selecting(i => i.Num).Ordering(i => i, 32);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			Scalar<System.ComponentModel.ListSortDirection> sortDirectionScalar = getScalar<System.ComponentModel.ListSortDirection>(System.ComponentModel.ListSortDirection.Ascending);
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			int maxTogetherThenOrderings = 0;
			
			var testing = source.ThenOrdering<int, int>(
				orderingValueSelectorExpression,
				sortDirectionScalar,
				comparer,
				maxTogetherThenOrderings);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((IBCode.ObservableComputations.Common.Interface.IOrdering<int>)source).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((IBCode.ObservableComputations.Common.Interface.IOrdering<int>)source).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Touch();
			test();
			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Change(System.ComponentModel.ListSortDirection.Descending);
			test();
		}
		
		[Test]
		public void TestThenOrdering14()
		{
			IBCode.ObservableComputations.Common.Interface.IOrdering<int> source = getItems().Selecting(i => i.Num).Ordering(i => i, 32);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			Scalar<System.ComponentModel.ListSortDirection> sortDirectionScalar = getScalar<System.ComponentModel.ListSortDirection>(System.ComponentModel.ListSortDirection.Ascending);
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			
			var testing = source.ThenOrdering<int, int>(
				orderingValueSelectorExpression,
				sortDirectionScalar,
				comparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((IBCode.ObservableComputations.Common.Interface.IOrdering<int>)source).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((IBCode.ObservableComputations.Common.Interface.IOrdering<int>)source).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Touch();
			test();
			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Change(System.ComponentModel.ListSortDirection.Descending);
			test();
		}
		
		[Test]
		public void TestThenOrdering15()
		{
			IBCode.ObservableComputations.Common.Interface.IOrdering<int> source = getItems().Selecting(i => i.Num).Ordering(i => i, 32);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			int maxTogetherThenOrderings = 0;
			
			var testing = source.ThenOrdering<int, int>(
				orderingValueSelectorExpression,
				comparer,
				maxTogetherThenOrderings);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((IBCode.ObservableComputations.Common.Interface.IOrdering<int>)source).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((IBCode.ObservableComputations.Common.Interface.IOrdering<int>)source).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestThenOrdering16()
		{
			IBCode.ObservableComputations.Common.Interface.IOrdering<int> source = getItems().Selecting(i => i.Num).Ordering(i => i, 32);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			
			var testing = source.ThenOrdering<int, int>(
				orderingValueSelectorExpression,
				comparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((IBCode.ObservableComputations.Common.Interface.IOrdering<int>)source).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((IBCode.ObservableComputations.Common.Interface.IOrdering<int>)source).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestThenOrdering17()
		{
			IBCode.ObservableComputations.Common.Interface.IOrdering<int> source = getItems().Selecting(i => i.Num).Ordering(i => i, 32);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			System.ComponentModel.ListSortDirection sortDirection = System.ComponentModel.ListSortDirection.Ascending;
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			int maxTogetherThenOrderings = 0;
			
			var testing = source.ThenOrdering<int, int>(
				orderingValueSelectorExpression,
				sortDirection,
				comparer,
				maxTogetherThenOrderings);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((IBCode.ObservableComputations.Common.Interface.IOrdering<int>)source).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((IBCode.ObservableComputations.Common.Interface.IOrdering<int>)source).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestThenOrdering18()
		{
			IBCode.ObservableComputations.Common.Interface.IOrdering<int> source = getItems().Selecting(i => i.Num).Ordering(i => i, 32);
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			System.ComponentModel.ListSortDirection sortDirection = System.ComponentModel.ListSortDirection.Ascending;
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			
			var testing = source.ThenOrdering<int, int>(
				orderingValueSelectorExpression,
				sortDirection,
				comparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceValue = ((ObservableCollection<Item>)((IBCode.ObservableComputations.Common.Interface.IOrdering<int>)source).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));

				if (sourceValue != null)
				{		
					sourceValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceValue[2].Active = !sourceValue[2].Active;
					testing.ValidateConsistency();
					sourceValue[2].Num = sourceValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((IBCode.ObservableComputations.Common.Interface.IOrdering<int>)source).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceValue != null)
				{
					sourceValue.Insert(0, new QuickTests.Item(1, true));
					sourceValue.Insert(1, new QuickTests.Item(2, true));
					sourceValue.Insert(2, new QuickTests.Item(3, true));
					sourceValue.Insert(3, new QuickTests.Item(3, true));
					sourceValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestThenOrdering19()
		{
			Scalar<IBCode.ObservableComputations.Common.Interface.IOrdering<int>> sourceScalar = getScalar<IBCode.ObservableComputations.Common.Interface.IOrdering<int>>(getItems().Selecting(i => i.Num).Ordering(i => i, 32));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			Scalar<System.ComponentModel.ListSortDirection> sortDirectionScalar = getScalar<System.ComponentModel.ListSortDirection>(System.ComponentModel.ListSortDirection.Ascending);
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			int maxTogetherThenOrderings = 0;
			
			var testing = sourceScalar.ThenOrdering<int, int>(
				orderingValueSelectorExpression,
				sortDirectionScalar,
				comparerScalar,
				maxTogetherThenOrderings);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((IBCode.ObservableComputations.Common.Interface.IOrdering<int>)sourceScalar.Value).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((IBCode.ObservableComputations.Common.Interface.IOrdering<int>)sourceScalar.Value).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Touch();
			test();
			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Change(System.ComponentModel.ListSortDirection.Descending);
			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();

			((Scalar<IBCode.ObservableComputations.Common.Interface.IOrdering<int>>)sourceScalar).Touch();
			test();
			((Scalar<IBCode.ObservableComputations.Common.Interface.IOrdering<int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestThenOrdering20()
		{
			Scalar<IBCode.ObservableComputations.Common.Interface.IOrdering<int>> sourceScalar = getScalar<IBCode.ObservableComputations.Common.Interface.IOrdering<int>>(getItems().Selecting(i => i.Num).Ordering(i => i, 32));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			Scalar<System.ComponentModel.ListSortDirection> sortDirectionScalar = getScalar<System.ComponentModel.ListSortDirection>(System.ComponentModel.ListSortDirection.Ascending);
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			
			var testing = sourceScalar.ThenOrdering<int, int>(
				orderingValueSelectorExpression,
				sortDirectionScalar,
				comparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((IBCode.ObservableComputations.Common.Interface.IOrdering<int>)sourceScalar.Value).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((IBCode.ObservableComputations.Common.Interface.IOrdering<int>)sourceScalar.Value).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Touch();
			test();
			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Change(System.ComponentModel.ListSortDirection.Descending);
			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();

			((Scalar<IBCode.ObservableComputations.Common.Interface.IOrdering<int>>)sourceScalar).Touch();
			test();
			((Scalar<IBCode.ObservableComputations.Common.Interface.IOrdering<int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestThenOrdering21()
		{
			Scalar<IBCode.ObservableComputations.Common.Interface.IOrdering<int>> sourceScalar = getScalar<IBCode.ObservableComputations.Common.Interface.IOrdering<int>>(getItems().Selecting(i => i.Num).Ordering(i => i, 32));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			Scalar<System.ComponentModel.ListSortDirection> sortDirectionScalar = getScalar<System.ComponentModel.ListSortDirection>(System.ComponentModel.ListSortDirection.Ascending);
			int maxTogetherThenOrderings = 0;
			
			var testing = sourceScalar.ThenOrdering<int, int>(
				orderingValueSelectorExpression,
				sortDirectionScalar,
				maxTogetherThenOrderings);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((IBCode.ObservableComputations.Common.Interface.IOrdering<int>)sourceScalar.Value).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((IBCode.ObservableComputations.Common.Interface.IOrdering<int>)sourceScalar.Value).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Touch();
			test();
			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Change(System.ComponentModel.ListSortDirection.Descending);
			test();

			((Scalar<IBCode.ObservableComputations.Common.Interface.IOrdering<int>>)sourceScalar).Touch();
			test();
			((Scalar<IBCode.ObservableComputations.Common.Interface.IOrdering<int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestThenOrdering22()
		{
			Scalar<IBCode.ObservableComputations.Common.Interface.IOrdering<int>> sourceScalar = getScalar<IBCode.ObservableComputations.Common.Interface.IOrdering<int>>(getItems().Selecting(i => i.Num).Ordering(i => i, 32));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			Scalar<System.ComponentModel.ListSortDirection> sortDirectionScalar = getScalar<System.ComponentModel.ListSortDirection>(System.ComponentModel.ListSortDirection.Ascending);
			
			var testing = sourceScalar.ThenOrdering<int, int>(
				orderingValueSelectorExpression,
				sortDirectionScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((IBCode.ObservableComputations.Common.Interface.IOrdering<int>)sourceScalar.Value).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((IBCode.ObservableComputations.Common.Interface.IOrdering<int>)sourceScalar.Value).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Touch();
			test();
			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Change(System.ComponentModel.ListSortDirection.Descending);
			test();

			((Scalar<IBCode.ObservableComputations.Common.Interface.IOrdering<int>>)sourceScalar).Touch();
			test();
			((Scalar<IBCode.ObservableComputations.Common.Interface.IOrdering<int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestThenOrdering23()
		{
			Scalar<IBCode.ObservableComputations.Common.Interface.IOrdering<int>> sourceScalar = getScalar<IBCode.ObservableComputations.Common.Interface.IOrdering<int>>(getItems().Selecting(i => i.Num).Ordering(i => i, 32));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			int maxTogetherThenOrderings = 0;
			
			var testing = sourceScalar.ThenOrdering<int, int>(
				orderingValueSelectorExpression,
				comparerScalar,
				maxTogetherThenOrderings);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((IBCode.ObservableComputations.Common.Interface.IOrdering<int>)sourceScalar.Value).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((IBCode.ObservableComputations.Common.Interface.IOrdering<int>)sourceScalar.Value).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();

			((Scalar<IBCode.ObservableComputations.Common.Interface.IOrdering<int>>)sourceScalar).Touch();
			test();
			((Scalar<IBCode.ObservableComputations.Common.Interface.IOrdering<int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestThenOrdering24()
		{
			Scalar<IBCode.ObservableComputations.Common.Interface.IOrdering<int>> sourceScalar = getScalar<IBCode.ObservableComputations.Common.Interface.IOrdering<int>>(getItems().Selecting(i => i.Num).Ordering(i => i, 32));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			
			var testing = sourceScalar.ThenOrdering<int, int>(
				orderingValueSelectorExpression,
				comparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((IBCode.ObservableComputations.Common.Interface.IOrdering<int>)sourceScalar.Value).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((IBCode.ObservableComputations.Common.Interface.IOrdering<int>)sourceScalar.Value).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();

			((Scalar<IBCode.ObservableComputations.Common.Interface.IOrdering<int>>)sourceScalar).Touch();
			test();
			((Scalar<IBCode.ObservableComputations.Common.Interface.IOrdering<int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestThenOrdering25()
		{
			Scalar<IBCode.ObservableComputations.Common.Interface.IOrdering<int>> sourceScalar = getScalar<IBCode.ObservableComputations.Common.Interface.IOrdering<int>>(getItems().Selecting(i => i.Num).Ordering(i => i, 32));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			int maxTogetherThenOrderings = 0;
			
			var testing = sourceScalar.ThenOrdering<int, int>(
				orderingValueSelectorExpression,
				maxTogetherThenOrderings);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((IBCode.ObservableComputations.Common.Interface.IOrdering<int>)sourceScalar.Value).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((IBCode.ObservableComputations.Common.Interface.IOrdering<int>)sourceScalar.Value).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<IBCode.ObservableComputations.Common.Interface.IOrdering<int>>)sourceScalar).Touch();
			test();
			((Scalar<IBCode.ObservableComputations.Common.Interface.IOrdering<int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestThenOrdering26()
		{
			Scalar<IBCode.ObservableComputations.Common.Interface.IOrdering<int>> sourceScalar = getScalar<IBCode.ObservableComputations.Common.Interface.IOrdering<int>>(getItems().Selecting(i => i.Num).Ordering(i => i, 32));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			
			var testing = sourceScalar.ThenOrdering<int, int>(
				orderingValueSelectorExpression);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((IBCode.ObservableComputations.Common.Interface.IOrdering<int>)sourceScalar.Value).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((IBCode.ObservableComputations.Common.Interface.IOrdering<int>)sourceScalar.Value).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<IBCode.ObservableComputations.Common.Interface.IOrdering<int>>)sourceScalar).Touch();
			test();
			((Scalar<IBCode.ObservableComputations.Common.Interface.IOrdering<int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestThenOrdering27()
		{
			Scalar<IBCode.ObservableComputations.Common.Interface.IOrdering<int>> sourceScalar = getScalar<IBCode.ObservableComputations.Common.Interface.IOrdering<int>>(getItems().Selecting(i => i.Num).Ordering(i => i, 32));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			System.ComponentModel.ListSortDirection sortDirection = System.ComponentModel.ListSortDirection.Ascending;
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			int maxTogetherThenOrderings = 0;
			
			var testing = sourceScalar.ThenOrdering<int, int>(
				orderingValueSelectorExpression,
				sortDirection,
				comparerScalar,
				maxTogetherThenOrderings);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((IBCode.ObservableComputations.Common.Interface.IOrdering<int>)sourceScalar.Value).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((IBCode.ObservableComputations.Common.Interface.IOrdering<int>)sourceScalar.Value).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();

			((Scalar<IBCode.ObservableComputations.Common.Interface.IOrdering<int>>)sourceScalar).Touch();
			test();
			((Scalar<IBCode.ObservableComputations.Common.Interface.IOrdering<int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestThenOrdering28()
		{
			Scalar<IBCode.ObservableComputations.Common.Interface.IOrdering<int>> sourceScalar = getScalar<IBCode.ObservableComputations.Common.Interface.IOrdering<int>>(getItems().Selecting(i => i.Num).Ordering(i => i, 32));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			System.ComponentModel.ListSortDirection sortDirection = System.ComponentModel.ListSortDirection.Ascending;
			Scalar<System.Collections.Generic.IComparer<int>> comparerScalar = getScalar<System.Collections.Generic.IComparer<int>>(Comparer<int>.Default);
			
			var testing = sourceScalar.ThenOrdering<int, int>(
				orderingValueSelectorExpression,
				sortDirection,
				comparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((IBCode.ObservableComputations.Common.Interface.IOrdering<int>)sourceScalar.Value).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((IBCode.ObservableComputations.Common.Interface.IOrdering<int>)sourceScalar.Value).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IComparer<int>>)comparerScalar).Change(null);
			test();

			((Scalar<IBCode.ObservableComputations.Common.Interface.IOrdering<int>>)sourceScalar).Touch();
			test();
			((Scalar<IBCode.ObservableComputations.Common.Interface.IOrdering<int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestThenOrdering29()
		{
			Scalar<IBCode.ObservableComputations.Common.Interface.IOrdering<int>> sourceScalar = getScalar<IBCode.ObservableComputations.Common.Interface.IOrdering<int>>(getItems().Selecting(i => i.Num).Ordering(i => i, 32));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			System.ComponentModel.ListSortDirection sortDirection = System.ComponentModel.ListSortDirection.Ascending;
			int maxTogetherThenOrderings = 0;
			
			var testing = sourceScalar.ThenOrdering<int, int>(
				orderingValueSelectorExpression,
				sortDirection,
				maxTogetherThenOrderings);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((IBCode.ObservableComputations.Common.Interface.IOrdering<int>)sourceScalar.Value).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((IBCode.ObservableComputations.Common.Interface.IOrdering<int>)sourceScalar.Value).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<IBCode.ObservableComputations.Common.Interface.IOrdering<int>>)sourceScalar).Touch();
			test();
			((Scalar<IBCode.ObservableComputations.Common.Interface.IOrdering<int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestThenOrdering30()
		{
			Scalar<IBCode.ObservableComputations.Common.Interface.IOrdering<int>> sourceScalar = getScalar<IBCode.ObservableComputations.Common.Interface.IOrdering<int>>(getItems().Selecting(i => i.Num).Ordering(i => i, 32));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			System.ComponentModel.ListSortDirection sortDirection = System.ComponentModel.ListSortDirection.Ascending;
			
			var testing = sourceScalar.ThenOrdering<int, int>(
				orderingValueSelectorExpression,
				sortDirection);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((IBCode.ObservableComputations.Common.Interface.IOrdering<int>)sourceScalar.Value).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((IBCode.ObservableComputations.Common.Interface.IOrdering<int>)sourceScalar.Value).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<IBCode.ObservableComputations.Common.Interface.IOrdering<int>>)sourceScalar).Touch();
			test();
			((Scalar<IBCode.ObservableComputations.Common.Interface.IOrdering<int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestThenOrdering31()
		{
			Scalar<IBCode.ObservableComputations.Common.Interface.IOrdering<int>> sourceScalar = getScalar<IBCode.ObservableComputations.Common.Interface.IOrdering<int>>(getItems().Selecting(i => i.Num).Ordering(i => i, 32));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			Scalar<System.ComponentModel.ListSortDirection> sortDirectionScalar = getScalar<System.ComponentModel.ListSortDirection>(System.ComponentModel.ListSortDirection.Ascending);
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			int maxTogetherThenOrderings = 0;
			
			var testing = sourceScalar.ThenOrdering<int, int>(
				orderingValueSelectorExpression,
				sortDirectionScalar,
				comparer,
				maxTogetherThenOrderings);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((IBCode.ObservableComputations.Common.Interface.IOrdering<int>)sourceScalar.Value).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((IBCode.ObservableComputations.Common.Interface.IOrdering<int>)sourceScalar.Value).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Touch();
			test();
			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Change(System.ComponentModel.ListSortDirection.Descending);
			test();

			((Scalar<IBCode.ObservableComputations.Common.Interface.IOrdering<int>>)sourceScalar).Touch();
			test();
			((Scalar<IBCode.ObservableComputations.Common.Interface.IOrdering<int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestThenOrdering32()
		{
			Scalar<IBCode.ObservableComputations.Common.Interface.IOrdering<int>> sourceScalar = getScalar<IBCode.ObservableComputations.Common.Interface.IOrdering<int>>(getItems().Selecting(i => i.Num).Ordering(i => i, 32));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			Scalar<System.ComponentModel.ListSortDirection> sortDirectionScalar = getScalar<System.ComponentModel.ListSortDirection>(System.ComponentModel.ListSortDirection.Ascending);
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			
			var testing = sourceScalar.ThenOrdering<int, int>(
				orderingValueSelectorExpression,
				sortDirectionScalar,
				comparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((IBCode.ObservableComputations.Common.Interface.IOrdering<int>)sourceScalar.Value).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((IBCode.ObservableComputations.Common.Interface.IOrdering<int>)sourceScalar.Value).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Touch();
			test();
			((Scalar<System.ComponentModel.ListSortDirection>)sortDirectionScalar).Change(System.ComponentModel.ListSortDirection.Descending);
			test();

			((Scalar<IBCode.ObservableComputations.Common.Interface.IOrdering<int>>)sourceScalar).Touch();
			test();
			((Scalar<IBCode.ObservableComputations.Common.Interface.IOrdering<int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestThenOrdering33()
		{
			Scalar<IBCode.ObservableComputations.Common.Interface.IOrdering<int>> sourceScalar = getScalar<IBCode.ObservableComputations.Common.Interface.IOrdering<int>>(getItems().Selecting(i => i.Num).Ordering(i => i, 32));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			int maxTogetherThenOrderings = 0;
			
			var testing = sourceScalar.ThenOrdering<int, int>(
				orderingValueSelectorExpression,
				comparer,
				maxTogetherThenOrderings);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((IBCode.ObservableComputations.Common.Interface.IOrdering<int>)sourceScalar.Value).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((IBCode.ObservableComputations.Common.Interface.IOrdering<int>)sourceScalar.Value).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<IBCode.ObservableComputations.Common.Interface.IOrdering<int>>)sourceScalar).Touch();
			test();
			((Scalar<IBCode.ObservableComputations.Common.Interface.IOrdering<int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestThenOrdering34()
		{
			Scalar<IBCode.ObservableComputations.Common.Interface.IOrdering<int>> sourceScalar = getScalar<IBCode.ObservableComputations.Common.Interface.IOrdering<int>>(getItems().Selecting(i => i.Num).Ordering(i => i, 32));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			
			var testing = sourceScalar.ThenOrdering<int, int>(
				orderingValueSelectorExpression,
				comparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((IBCode.ObservableComputations.Common.Interface.IOrdering<int>)sourceScalar.Value).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((IBCode.ObservableComputations.Common.Interface.IOrdering<int>)sourceScalar.Value).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<IBCode.ObservableComputations.Common.Interface.IOrdering<int>>)sourceScalar).Touch();
			test();
			((Scalar<IBCode.ObservableComputations.Common.Interface.IOrdering<int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestThenOrdering35()
		{
			Scalar<IBCode.ObservableComputations.Common.Interface.IOrdering<int>> sourceScalar = getScalar<IBCode.ObservableComputations.Common.Interface.IOrdering<int>>(getItems().Selecting(i => i.Num).Ordering(i => i, 32));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			System.ComponentModel.ListSortDirection sortDirection = System.ComponentModel.ListSortDirection.Ascending;
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			int maxTogetherThenOrderings = 0;
			
			var testing = sourceScalar.ThenOrdering<int, int>(
				orderingValueSelectorExpression,
				sortDirection,
				comparer,
				maxTogetherThenOrderings);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((IBCode.ObservableComputations.Common.Interface.IOrdering<int>)sourceScalar.Value).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((IBCode.ObservableComputations.Common.Interface.IOrdering<int>)sourceScalar.Value).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<IBCode.ObservableComputations.Common.Interface.IOrdering<int>>)sourceScalar).Touch();
			test();
			((Scalar<IBCode.ObservableComputations.Common.Interface.IOrdering<int>>)sourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestThenOrdering36()
		{
			Scalar<IBCode.ObservableComputations.Common.Interface.IOrdering<int>> sourceScalar = getScalar<IBCode.ObservableComputations.Common.Interface.IOrdering<int>>(getItems().Selecting(i => i.Num).Ordering(i => i, 32));
			System.Linq.Expressions.Expression<System.Func<int, int>> orderingValueSelectorExpression = i => i;
			System.ComponentModel.ListSortDirection sortDirection = System.ComponentModel.ListSortDirection.Ascending;
			System.Collections.Generic.IComparer<int> comparer = Comparer<int>.Default;
			
			var testing = sourceScalar.ThenOrdering<int, int>(
				orderingValueSelectorExpression,
				sortDirection,
				comparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourceScalarValue = ((ObservableCollection<Item>)((IBCode.ObservableComputations.Common.Interface.IOrdering<int>)sourceScalar.Value).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));

				if (sourceScalarValue != null)
				{		
					sourceScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					sourceScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					sourceScalarValue[2].Active = !sourceScalarValue[2].Active;
					testing.ValidateConsistency();
					sourceScalarValue[2].Num = sourceScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					sourceScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((IBCode.ObservableComputations.Common.Interface.IOrdering<int>)sourceScalar.Value).GetValueAs(s => ((Ordering<int, int>)s)?.Source)?.GetValueAs(s => ((Selecting<Item, int>)s)?.Source));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourceScalarValue != null)
				{
					sourceScalarValue.Insert(0, new QuickTests.Item(1, true));
					sourceScalarValue.Insert(1, new QuickTests.Item(2, true));
					sourceScalarValue.Insert(2, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(3, new QuickTests.Item(3, true));
					sourceScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<IBCode.ObservableComputations.Common.Interface.IOrdering<int>>)sourceScalar).Touch();
			test();
			((Scalar<IBCode.ObservableComputations.Common.Interface.IOrdering<int>>)sourceScalar).Change(null);
			test();
		}
		#endregion
		#region Uniting

		
		[Test]
		public void TestUniting01()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourcesScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getCollectionsOfItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			int capacity = 0;
			
			var testing = sourcesScalar.Uniting<Item>(
				equalityComparerScalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourcesScalarValue = ((ObservableCollection<ObservableCollection<Item>>)((System.Collections.Specialized.INotifyCollectionChanged)sourcesScalar.Value));
				
				if (sourcesScalarValue != null)
				{
					sourcesScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true)}));
					testing.ValidateConsistency();
					sourcesScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourcesScalarValue.Move(0, 1);
					testing.ValidateConsistency();
				}


				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourcesScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourcesScalarValue != null)
				{
					sourcesScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true), new Item(2, true), new Item(3, true), new Item(4, true), new Item(5, true)}));
					sourcesScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(6, true), new Item(7, true), new Item(8, true), new Item(8, true), new Item(10, true)}));
					testing.ValidateConsistency();
				}

			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourcesScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourcesScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting02()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourcesScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getCollectionsOfItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			
			var testing = sourcesScalar.Uniting<Item>(
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourcesScalarValue = ((ObservableCollection<ObservableCollection<Item>>)((System.Collections.Specialized.INotifyCollectionChanged)sourcesScalar.Value));
				
				if (sourcesScalarValue != null)
				{
					sourcesScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true)}));
					testing.ValidateConsistency();
					sourcesScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourcesScalarValue.Move(0, 1);
					testing.ValidateConsistency();
				}


				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourcesScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourcesScalarValue != null)
				{
					sourcesScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true), new Item(2, true), new Item(3, true), new Item(4, true), new Item(5, true)}));
					sourcesScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(6, true), new Item(7, true), new Item(8, true), new Item(8, true), new Item(10, true)}));
					testing.ValidateConsistency();
				}

			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourcesScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourcesScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting03()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourcesScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getCollectionsOfItems());
			int capacity = 0;
			
			var testing = sourcesScalar.Uniting<Item>(
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourcesScalarValue = ((ObservableCollection<ObservableCollection<Item>>)((System.Collections.Specialized.INotifyCollectionChanged)sourcesScalar.Value));
				
				if (sourcesScalarValue != null)
				{
					sourcesScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true)}));
					testing.ValidateConsistency();
					sourcesScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourcesScalarValue.Move(0, 1);
					testing.ValidateConsistency();
				}


				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourcesScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourcesScalarValue != null)
				{
					sourcesScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true), new Item(2, true), new Item(3, true), new Item(4, true), new Item(5, true)}));
					sourcesScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(6, true), new Item(7, true), new Item(8, true), new Item(8, true), new Item(10, true)}));
					testing.ValidateConsistency();
				}

			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourcesScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourcesScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting04()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourcesScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getCollectionsOfItems());
			
			var testing = sourcesScalar.Uniting<Item>();

			void test()
			{
				testing.ValidateConsistency();
				var sourcesScalarValue = ((ObservableCollection<ObservableCollection<Item>>)((System.Collections.Specialized.INotifyCollectionChanged)sourcesScalar.Value));
				
				if (sourcesScalarValue != null)
				{
					sourcesScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true)}));
					testing.ValidateConsistency();
					sourcesScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourcesScalarValue.Move(0, 1);
					testing.ValidateConsistency();
				}


				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourcesScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourcesScalarValue != null)
				{
					sourcesScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true), new Item(2, true), new Item(3, true), new Item(4, true), new Item(5, true)}));
					sourcesScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(6, true), new Item(7, true), new Item(8, true), new Item(8, true), new Item(10, true)}));
					testing.ValidateConsistency();
				}

			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourcesScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourcesScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting05()
		{
			Scalar<ObservableCollection<ObservableCollection<Item>>> sourcesScalar = getScalar<ObservableCollection<ObservableCollection<Item>>>(getCollectionsOfItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			int capacity = 0;
			
			var testing = sourcesScalar.Uniting<Item>(
				equalityComparerScalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourcesScalarValue = ((ObservableCollection<ObservableCollection<Item>>)((ObservableCollection<ObservableCollection<Item>>)sourcesScalar.Value));
				
				if (sourcesScalarValue != null)
				{
					sourcesScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true)}));
					testing.ValidateConsistency();
					sourcesScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourcesScalarValue.Move(0, 1);
					testing.ValidateConsistency();
				}


				IList listSource;
				listSource = ((IList)((ObservableCollection<ObservableCollection<Item>>)sourcesScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourcesScalarValue != null)
				{
					sourcesScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true), new Item(2, true), new Item(3, true), new Item(4, true), new Item(5, true)}));
					sourcesScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(6, true), new Item(7, true), new Item(8, true), new Item(8, true), new Item(10, true)}));
					testing.ValidateConsistency();
				}

			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<ObservableCollection<ObservableCollection<Item>>>)sourcesScalar).Touch();
			test();
			((Scalar<ObservableCollection<ObservableCollection<Item>>>)sourcesScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting06()
		{
			Scalar<ObservableCollection<ObservableCollection<Item>>> sourcesScalar = getScalar<ObservableCollection<ObservableCollection<Item>>>(getCollectionsOfItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			
			var testing = sourcesScalar.Uniting<Item>(
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourcesScalarValue = ((ObservableCollection<ObservableCollection<Item>>)((ObservableCollection<ObservableCollection<Item>>)sourcesScalar.Value));
				
				if (sourcesScalarValue != null)
				{
					sourcesScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true)}));
					testing.ValidateConsistency();
					sourcesScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourcesScalarValue.Move(0, 1);
					testing.ValidateConsistency();
				}


				IList listSource;
				listSource = ((IList)((ObservableCollection<ObservableCollection<Item>>)sourcesScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourcesScalarValue != null)
				{
					sourcesScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true), new Item(2, true), new Item(3, true), new Item(4, true), new Item(5, true)}));
					sourcesScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(6, true), new Item(7, true), new Item(8, true), new Item(8, true), new Item(10, true)}));
					testing.ValidateConsistency();
				}

			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<ObservableCollection<ObservableCollection<Item>>>)sourcesScalar).Touch();
			test();
			((Scalar<ObservableCollection<ObservableCollection<Item>>>)sourcesScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting07()
		{
			Scalar<ObservableCollection<ObservableCollection<Item>>> sourcesScalar = getScalar<ObservableCollection<ObservableCollection<Item>>>(getCollectionsOfItems());
			int capacity = 0;
			
			var testing = sourcesScalar.Uniting<Item>(
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourcesScalarValue = ((ObservableCollection<ObservableCollection<Item>>)((ObservableCollection<ObservableCollection<Item>>)sourcesScalar.Value));
				
				if (sourcesScalarValue != null)
				{
					sourcesScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true)}));
					testing.ValidateConsistency();
					sourcesScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourcesScalarValue.Move(0, 1);
					testing.ValidateConsistency();
				}


				IList listSource;
				listSource = ((IList)((ObservableCollection<ObservableCollection<Item>>)sourcesScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourcesScalarValue != null)
				{
					sourcesScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true), new Item(2, true), new Item(3, true), new Item(4, true), new Item(5, true)}));
					sourcesScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(6, true), new Item(7, true), new Item(8, true), new Item(8, true), new Item(10, true)}));
					testing.ValidateConsistency();
				}

			}

			test();

			((Scalar<ObservableCollection<ObservableCollection<Item>>>)sourcesScalar).Touch();
			test();
			((Scalar<ObservableCollection<ObservableCollection<Item>>>)sourcesScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting08()
		{
			Scalar<ObservableCollection<ObservableCollection<Item>>> sourcesScalar = getScalar<ObservableCollection<ObservableCollection<Item>>>(getCollectionsOfItems());
			
			var testing = sourcesScalar.Uniting<Item>();

			void test()
			{
				testing.ValidateConsistency();
				var sourcesScalarValue = ((ObservableCollection<ObservableCollection<Item>>)((ObservableCollection<ObservableCollection<Item>>)sourcesScalar.Value));
				
				if (sourcesScalarValue != null)
				{
					sourcesScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true)}));
					testing.ValidateConsistency();
					sourcesScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourcesScalarValue.Move(0, 1);
					testing.ValidateConsistency();
				}


				IList listSource;
				listSource = ((IList)((ObservableCollection<ObservableCollection<Item>>)sourcesScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourcesScalarValue != null)
				{
					sourcesScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true), new Item(2, true), new Item(3, true), new Item(4, true), new Item(5, true)}));
					sourcesScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(6, true), new Item(7, true), new Item(8, true), new Item(8, true), new Item(10, true)}));
					testing.ValidateConsistency();
				}

			}

			test();

			((Scalar<ObservableCollection<ObservableCollection<Item>>>)sourcesScalar).Touch();
			test();
			((Scalar<ObservableCollection<ObservableCollection<Item>>>)sourcesScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting09()
		{
			System.Collections.Specialized.INotifyCollectionChanged sources = getCollectionsOfItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			int capacity = 0;
			
			var testing = sources.Uniting<Item>(
				equalityComparerScalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourcesValue = ((ObservableCollection<ObservableCollection<Item>>)((System.Collections.Specialized.INotifyCollectionChanged)sources));
				
				if (sourcesValue != null)
				{
					sourcesValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true)}));
					testing.ValidateConsistency();
					sourcesValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourcesValue.Move(0, 1);
					testing.ValidateConsistency();
				}


				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sources));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourcesValue != null)
				{
					sourcesValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true), new Item(2, true), new Item(3, true), new Item(4, true), new Item(5, true)}));
					sourcesValue.Insert(0, new ObservableCollection<Item>(new []{new Item(6, true), new Item(7, true), new Item(8, true), new Item(8, true), new Item(10, true)}));
					testing.ValidateConsistency();
				}

			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting10()
		{
			System.Collections.Specialized.INotifyCollectionChanged sources = getCollectionsOfItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			
			var testing = sources.Uniting<Item>(
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourcesValue = ((ObservableCollection<ObservableCollection<Item>>)((System.Collections.Specialized.INotifyCollectionChanged)sources));
				
				if (sourcesValue != null)
				{
					sourcesValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true)}));
					testing.ValidateConsistency();
					sourcesValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourcesValue.Move(0, 1);
					testing.ValidateConsistency();
				}


				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sources));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourcesValue != null)
				{
					sourcesValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true), new Item(2, true), new Item(3, true), new Item(4, true), new Item(5, true)}));
					sourcesValue.Insert(0, new ObservableCollection<Item>(new []{new Item(6, true), new Item(7, true), new Item(8, true), new Item(8, true), new Item(10, true)}));
					testing.ValidateConsistency();
				}

			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting11()
		{
			System.Collections.Specialized.INotifyCollectionChanged sources = getCollectionsOfItems();
			int capacity = 0;
			
			var testing = sources.Uniting<Item>(
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourcesValue = ((ObservableCollection<ObservableCollection<Item>>)((System.Collections.Specialized.INotifyCollectionChanged)sources));
				
				if (sourcesValue != null)
				{
					sourcesValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true)}));
					testing.ValidateConsistency();
					sourcesValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourcesValue.Move(0, 1);
					testing.ValidateConsistency();
				}


				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sources));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourcesValue != null)
				{
					sourcesValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true), new Item(2, true), new Item(3, true), new Item(4, true), new Item(5, true)}));
					sourcesValue.Insert(0, new ObservableCollection<Item>(new []{new Item(6, true), new Item(7, true), new Item(8, true), new Item(8, true), new Item(10, true)}));
					testing.ValidateConsistency();
				}

			}

			test();
		}
		
		[Test]
		public void TestUniting12()
		{
			System.Collections.Specialized.INotifyCollectionChanged sources = getCollectionsOfItems();
			
			var testing = sources.Uniting<Item>();

			void test()
			{
				testing.ValidateConsistency();
				var sourcesValue = ((ObservableCollection<ObservableCollection<Item>>)((System.Collections.Specialized.INotifyCollectionChanged)sources));
				
				if (sourcesValue != null)
				{
					sourcesValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true)}));
					testing.ValidateConsistency();
					sourcesValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourcesValue.Move(0, 1);
					testing.ValidateConsistency();
				}


				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sources));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourcesValue != null)
				{
					sourcesValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true), new Item(2, true), new Item(3, true), new Item(4, true), new Item(5, true)}));
					sourcesValue.Insert(0, new ObservableCollection<Item>(new []{new Item(6, true), new Item(7, true), new Item(8, true), new Item(8, true), new Item(10, true)}));
					testing.ValidateConsistency();
				}

			}

			test();
		}
		
		[Test]
		public void TestUniting13()
		{
			ObservableCollection<ObservableCollection<Item>> sources = getCollectionsOfItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			int capacity = 0;
			
			var testing = sources.Uniting<Item>(
				equalityComparerScalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourcesValue = ((ObservableCollection<ObservableCollection<Item>>)((ObservableCollection<ObservableCollection<Item>>)sources));
				
				if (sourcesValue != null)
				{
					sourcesValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true)}));
					testing.ValidateConsistency();
					sourcesValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourcesValue.Move(0, 1);
					testing.ValidateConsistency();
				}


				IList listSource;
				listSource = ((IList)((ObservableCollection<ObservableCollection<Item>>)sources));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourcesValue != null)
				{
					sourcesValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true), new Item(2, true), new Item(3, true), new Item(4, true), new Item(5, true)}));
					sourcesValue.Insert(0, new ObservableCollection<Item>(new []{new Item(6, true), new Item(7, true), new Item(8, true), new Item(8, true), new Item(10, true)}));
					testing.ValidateConsistency();
				}

			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting14()
		{
			ObservableCollection<ObservableCollection<Item>> sources = getCollectionsOfItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			
			var testing = sources.Uniting<Item>(
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var sourcesValue = ((ObservableCollection<ObservableCollection<Item>>)((ObservableCollection<ObservableCollection<Item>>)sources));
				
				if (sourcesValue != null)
				{
					sourcesValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true)}));
					testing.ValidateConsistency();
					sourcesValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourcesValue.Move(0, 1);
					testing.ValidateConsistency();
				}


				IList listSource;
				listSource = ((IList)((ObservableCollection<ObservableCollection<Item>>)sources));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourcesValue != null)
				{
					sourcesValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true), new Item(2, true), new Item(3, true), new Item(4, true), new Item(5, true)}));
					sourcesValue.Insert(0, new ObservableCollection<Item>(new []{new Item(6, true), new Item(7, true), new Item(8, true), new Item(8, true), new Item(10, true)}));
					testing.ValidateConsistency();
				}

			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting15()
		{
			ObservableCollection<ObservableCollection<Item>> sources = getCollectionsOfItems();
			int capacity = 0;
			
			var testing = sources.Uniting<Item>(
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourcesValue = ((ObservableCollection<ObservableCollection<Item>>)((ObservableCollection<ObservableCollection<Item>>)sources));
				
				if (sourcesValue != null)
				{
					sourcesValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true)}));
					testing.ValidateConsistency();
					sourcesValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourcesValue.Move(0, 1);
					testing.ValidateConsistency();
				}


				IList listSource;
				listSource = ((IList)((ObservableCollection<ObservableCollection<Item>>)sources));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourcesValue != null)
				{
					sourcesValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true), new Item(2, true), new Item(3, true), new Item(4, true), new Item(5, true)}));
					sourcesValue.Insert(0, new ObservableCollection<Item>(new []{new Item(6, true), new Item(7, true), new Item(8, true), new Item(8, true), new Item(10, true)}));
					testing.ValidateConsistency();
				}

			}

			test();
		}
		
		[Test]
		public void TestUniting16()
		{
			ObservableCollection<ObservableCollection<Item>> sources = getCollectionsOfItems();
			
			var testing = sources.Uniting<Item>();

			void test()
			{
				testing.ValidateConsistency();
				var sourcesValue = ((ObservableCollection<ObservableCollection<Item>>)((ObservableCollection<ObservableCollection<Item>>)sources));
				
				if (sourcesValue != null)
				{
					sourcesValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true)}));
					testing.ValidateConsistency();
					sourcesValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourcesValue.Move(0, 1);
					testing.ValidateConsistency();
				}


				IList listSource;
				listSource = ((IList)((ObservableCollection<ObservableCollection<Item>>)sources));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourcesValue != null)
				{
					sourcesValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true), new Item(2, true), new Item(3, true), new Item(4, true), new Item(5, true)}));
					sourcesValue.Insert(0, new ObservableCollection<Item>(new []{new Item(6, true), new Item(7, true), new Item(8, true), new Item(8, true), new Item(10, true)}));
					testing.ValidateConsistency();
				}

			}

			test();
		}
		
		[Test]
		public void TestUniting17()
		{
			System.Collections.Specialized.INotifyCollectionChanged sources = getCollectionsOfItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			int capacity = 0;
			
			var testing = sources.Uniting<Item>(
				equalityComparer,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourcesValue = ((ObservableCollection<ObservableCollection<Item>>)((System.Collections.Specialized.INotifyCollectionChanged)sources));
				
				if (sourcesValue != null)
				{
					sourcesValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true)}));
					testing.ValidateConsistency();
					sourcesValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourcesValue.Move(0, 1);
					testing.ValidateConsistency();
				}


				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sources));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourcesValue != null)
				{
					sourcesValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true), new Item(2, true), new Item(3, true), new Item(4, true), new Item(5, true)}));
					sourcesValue.Insert(0, new ObservableCollection<Item>(new []{new Item(6, true), new Item(7, true), new Item(8, true), new Item(8, true), new Item(10, true)}));
					testing.ValidateConsistency();
				}

			}

			test();
		}
		
		[Test]
		public void TestUniting18()
		{
			System.Collections.Specialized.INotifyCollectionChanged sources = getCollectionsOfItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			
			var testing = sources.Uniting<Item>(
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourcesValue = ((ObservableCollection<ObservableCollection<Item>>)((System.Collections.Specialized.INotifyCollectionChanged)sources));
				
				if (sourcesValue != null)
				{
					sourcesValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true)}));
					testing.ValidateConsistency();
					sourcesValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourcesValue.Move(0, 1);
					testing.ValidateConsistency();
				}


				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sources));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourcesValue != null)
				{
					sourcesValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true), new Item(2, true), new Item(3, true), new Item(4, true), new Item(5, true)}));
					sourcesValue.Insert(0, new ObservableCollection<Item>(new []{new Item(6, true), new Item(7, true), new Item(8, true), new Item(8, true), new Item(10, true)}));
					testing.ValidateConsistency();
				}

			}

			test();
		}
		
		[Test]
		public void TestUniting19()
		{
			ObservableCollection<ObservableCollection<Item>> sources = getCollectionsOfItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			int capacity = 0;
			
			var testing = sources.Uniting<Item>(
				equalityComparer,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourcesValue = ((ObservableCollection<ObservableCollection<Item>>)((ObservableCollection<ObservableCollection<Item>>)sources));
				
				if (sourcesValue != null)
				{
					sourcesValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true)}));
					testing.ValidateConsistency();
					sourcesValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourcesValue.Move(0, 1);
					testing.ValidateConsistency();
				}


				IList listSource;
				listSource = ((IList)((ObservableCollection<ObservableCollection<Item>>)sources));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourcesValue != null)
				{
					sourcesValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true), new Item(2, true), new Item(3, true), new Item(4, true), new Item(5, true)}));
					sourcesValue.Insert(0, new ObservableCollection<Item>(new []{new Item(6, true), new Item(7, true), new Item(8, true), new Item(8, true), new Item(10, true)}));
					testing.ValidateConsistency();
				}

			}

			test();
		}
		
		[Test]
		public void TestUniting20()
		{
			ObservableCollection<ObservableCollection<Item>> sources = getCollectionsOfItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			
			var testing = sources.Uniting<Item>(
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourcesValue = ((ObservableCollection<ObservableCollection<Item>>)((ObservableCollection<ObservableCollection<Item>>)sources));
				
				if (sourcesValue != null)
				{
					sourcesValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true)}));
					testing.ValidateConsistency();
					sourcesValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourcesValue.Move(0, 1);
					testing.ValidateConsistency();
				}


				IList listSource;
				listSource = ((IList)((ObservableCollection<ObservableCollection<Item>>)sources));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourcesValue != null)
				{
					sourcesValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true), new Item(2, true), new Item(3, true), new Item(4, true), new Item(5, true)}));
					sourcesValue.Insert(0, new ObservableCollection<Item>(new []{new Item(6, true), new Item(7, true), new Item(8, true), new Item(8, true), new Item(10, true)}));
					testing.ValidateConsistency();
				}

			}

			test();
		}
		
		[Test]
		public void TestUniting21()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourcesScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getCollectionsOfItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			int capacity = 0;
			
			var testing = sourcesScalar.Uniting<Item>(
				equalityComparer,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourcesScalarValue = ((ObservableCollection<ObservableCollection<Item>>)((System.Collections.Specialized.INotifyCollectionChanged)sourcesScalar.Value));
				
				if (sourcesScalarValue != null)
				{
					sourcesScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true)}));
					testing.ValidateConsistency();
					sourcesScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourcesScalarValue.Move(0, 1);
					testing.ValidateConsistency();
				}


				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourcesScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourcesScalarValue != null)
				{
					sourcesScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true), new Item(2, true), new Item(3, true), new Item(4, true), new Item(5, true)}));
					sourcesScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(6, true), new Item(7, true), new Item(8, true), new Item(8, true), new Item(10, true)}));
					testing.ValidateConsistency();
				}

			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourcesScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourcesScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting22()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> sourcesScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getCollectionsOfItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			
			var testing = sourcesScalar.Uniting<Item>(
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourcesScalarValue = ((ObservableCollection<ObservableCollection<Item>>)((System.Collections.Specialized.INotifyCollectionChanged)sourcesScalar.Value));
				
				if (sourcesScalarValue != null)
				{
					sourcesScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true)}));
					testing.ValidateConsistency();
					sourcesScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourcesScalarValue.Move(0, 1);
					testing.ValidateConsistency();
				}


				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)sourcesScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourcesScalarValue != null)
				{
					sourcesScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true), new Item(2, true), new Item(3, true), new Item(4, true), new Item(5, true)}));
					sourcesScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(6, true), new Item(7, true), new Item(8, true), new Item(8, true), new Item(10, true)}));
					testing.ValidateConsistency();
				}

			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourcesScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)sourcesScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting23()
		{
			Scalar<ObservableCollection<ObservableCollection<Item>>> sourcesScalar = getScalar<ObservableCollection<ObservableCollection<Item>>>(getCollectionsOfItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			int capacity = 0;
			
			var testing = sourcesScalar.Uniting<Item>(
				equalityComparer,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var sourcesScalarValue = ((ObservableCollection<ObservableCollection<Item>>)((ObservableCollection<ObservableCollection<Item>>)sourcesScalar.Value));
				
				if (sourcesScalarValue != null)
				{
					sourcesScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true)}));
					testing.ValidateConsistency();
					sourcesScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourcesScalarValue.Move(0, 1);
					testing.ValidateConsistency();
				}


				IList listSource;
				listSource = ((IList)((ObservableCollection<ObservableCollection<Item>>)sourcesScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourcesScalarValue != null)
				{
					sourcesScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true), new Item(2, true), new Item(3, true), new Item(4, true), new Item(5, true)}));
					sourcesScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(6, true), new Item(7, true), new Item(8, true), new Item(8, true), new Item(10, true)}));
					testing.ValidateConsistency();
				}

			}

			test();

			((Scalar<ObservableCollection<ObservableCollection<Item>>>)sourcesScalar).Touch();
			test();
			((Scalar<ObservableCollection<ObservableCollection<Item>>>)sourcesScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting24()
		{
			Scalar<ObservableCollection<ObservableCollection<Item>>> sourcesScalar = getScalar<ObservableCollection<ObservableCollection<Item>>>(getCollectionsOfItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			
			var testing = sourcesScalar.Uniting<Item>(
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var sourcesScalarValue = ((ObservableCollection<ObservableCollection<Item>>)((ObservableCollection<ObservableCollection<Item>>)sourcesScalar.Value));
				
				if (sourcesScalarValue != null)
				{
					sourcesScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true)}));
					testing.ValidateConsistency();
					sourcesScalarValue.RemoveAt(1);
					testing.ValidateConsistency();
					sourcesScalarValue.Move(0, 1);
					testing.ValidateConsistency();
				}


				IList listSource;
				listSource = ((IList)((ObservableCollection<ObservableCollection<Item>>)sourcesScalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (sourcesScalarValue != null)
				{
					sourcesScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(1, true), new Item(2, true), new Item(3, true), new Item(4, true), new Item(5, true)}));
					sourcesScalarValue.Insert(0, new ObservableCollection<Item>(new []{new Item(6, true), new Item(7, true), new Item(8, true), new Item(8, true), new Item(10, true)}));
					testing.ValidateConsistency();
				}

			}

			test();

			((Scalar<ObservableCollection<ObservableCollection<Item>>>)sourcesScalar).Touch();
			test();
			((Scalar<ObservableCollection<ObservableCollection<Item>>>)sourcesScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting25()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			int capacity = 0;
			
			var testing = source1.Uniting<Item>(
				source2,
				equalityComparer,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestUniting26()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			
			var testing = source1.Uniting<Item>(
				source2,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestUniting27()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			int capacity = 0;
			
			var testing = source1.Uniting<Item>(
				source2,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestUniting28()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			
			var testing = source1.Uniting<Item>(
				source2);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestUniting29()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			int capacity = 0;
			
			var testing = source1.Uniting<Item>(
				source2,
				equalityComparer,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestUniting30()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			
			var testing = source1.Uniting<Item>(
				source2,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestUniting31()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			int capacity = 0;
			
			var testing = source1.Uniting<Item>(
				source2,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestUniting32()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			
			var testing = source1.Uniting<Item>(
				source2);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestUniting33()
		{
			ObservableCollection<Item> source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			int capacity = 0;
			
			var testing = source1.Uniting<Item>(
				source2,
				equalityComparer,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestUniting34()
		{
			ObservableCollection<Item> source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			
			var testing = source1.Uniting<Item>(
				source2,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestUniting35()
		{
			ObservableCollection<Item> source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			int capacity = 0;
			
			var testing = source1.Uniting<Item>(
				source2,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestUniting36()
		{
			ObservableCollection<Item> source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			
			var testing = source1.Uniting<Item>(
				source2);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestUniting37()
		{
			ObservableCollection<Item> source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			int capacity = 0;
			
			var testing = source1.Uniting<Item>(
				source2,
				equalityComparer,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestUniting38()
		{
			ObservableCollection<Item> source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			
			var testing = source1.Uniting<Item>(
				source2,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestUniting39()
		{
			ObservableCollection<Item> source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			int capacity = 0;
			
			var testing = source1.Uniting<Item>(
				source2,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestUniting40()
		{
			ObservableCollection<Item> source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			
			var testing = source1.Uniting<Item>(
				source2);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();
		}
		
		[Test]
		public void TestUniting41()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			int capacity = 0;
			
			var testing = source1Scalar.Uniting<Item>(
				source2,
				equalityComparer,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting42()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			
			var testing = source1Scalar.Uniting<Item>(
				source2,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting43()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			int capacity = 0;
			
			var testing = source1Scalar.Uniting<Item>(
				source2,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting44()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			
			var testing = source1Scalar.Uniting<Item>(
				source2);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting45()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			ObservableCollection<Item> source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			int capacity = 0;
			
			var testing = source1Scalar.Uniting<Item>(
				source2,
				equalityComparer,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting46()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			ObservableCollection<Item> source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			
			var testing = source1Scalar.Uniting<Item>(
				source2,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting47()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			ObservableCollection<Item> source2 = getItems();
			int capacity = 0;
			
			var testing = source1Scalar.Uniting<Item>(
				source2,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting48()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			ObservableCollection<Item> source2 = getItems();
			
			var testing = source1Scalar.Uniting<Item>(
				source2);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting49()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			int capacity = 0;
			
			var testing = source1Scalar.Uniting<Item>(
				source2,
				equalityComparer,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting50()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			
			var testing = source1Scalar.Uniting<Item>(
				source2,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting51()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			int capacity = 0;
			
			var testing = source1Scalar.Uniting<Item>(
				source2,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting52()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			
			var testing = source1Scalar.Uniting<Item>(
				source2);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting53()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			ObservableCollection<Item> source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			int capacity = 0;
			
			var testing = source1Scalar.Uniting<Item>(
				source2,
				equalityComparer,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting54()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			ObservableCollection<Item> source2 = getItems();
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			
			var testing = source1Scalar.Uniting<Item>(
				source2,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting55()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			ObservableCollection<Item> source2 = getItems();
			int capacity = 0;
			
			var testing = source1Scalar.Uniting<Item>(
				source2,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting56()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			ObservableCollection<Item> source2 = getItems();
			
			var testing = source1Scalar.Uniting<Item>(
				source2);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting57()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			int capacity = 0;
			
			var testing = source1Scalar.Uniting<Item>(
				source2Scalar,
				equalityComparer,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting58()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			
			var testing = source1Scalar.Uniting<Item>(
				source2Scalar,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting59()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			int capacity = 0;
			
			var testing = source1Scalar.Uniting<Item>(
				source2Scalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting60()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			
			var testing = source1Scalar.Uniting<Item>(
				source2Scalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting61()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			int capacity = 0;
			
			var testing = source1Scalar.Uniting<Item>(
				source2Scalar,
				equalityComparer,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting62()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			
			var testing = source1Scalar.Uniting<Item>(
				source2Scalar,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting63()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			int capacity = 0;
			
			var testing = source1Scalar.Uniting<Item>(
				source2Scalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting64()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			
			var testing = source1Scalar.Uniting<Item>(
				source2Scalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting65()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			int capacity = 0;
			
			var testing = source1Scalar.Uniting<Item>(
				source2Scalar,
				equalityComparer,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting66()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			
			var testing = source1Scalar.Uniting<Item>(
				source2Scalar,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting67()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			int capacity = 0;
			
			var testing = source1Scalar.Uniting<Item>(
				source2Scalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting68()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			
			var testing = source1Scalar.Uniting<Item>(
				source2Scalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting69()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			int capacity = 0;
			
			var testing = source1Scalar.Uniting<Item>(
				source2Scalar,
				equalityComparer,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting70()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			
			var testing = source1Scalar.Uniting<Item>(
				source2Scalar,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting71()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			int capacity = 0;
			
			var testing = source1Scalar.Uniting<Item>(
				source2Scalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting72()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			
			var testing = source1Scalar.Uniting<Item>(
				source2Scalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting73()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			int capacity = 0;
			
			var testing = source1.Uniting<Item>(
				source2Scalar,
				equalityComparer,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting74()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			
			var testing = source1.Uniting<Item>(
				source2Scalar,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting75()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			int capacity = 0;
			
			var testing = source1.Uniting<Item>(
				source2Scalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting76()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			
			var testing = source1.Uniting<Item>(
				source2Scalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting77()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			int capacity = 0;
			
			var testing = source1.Uniting<Item>(
				source2Scalar,
				equalityComparer,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting78()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			
			var testing = source1.Uniting<Item>(
				source2Scalar,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting79()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			int capacity = 0;
			
			var testing = source1.Uniting<Item>(
				source2Scalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting80()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			
			var testing = source1.Uniting<Item>(
				source2Scalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting81()
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			int capacity = 0;
			
			var testing = source1.Uniting<Item>(
				source2Scalar,
				equalityComparer,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting82()
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			
			var testing = source1.Uniting<Item>(
				source2Scalar,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting83()
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			int capacity = 0;
			
			var testing = source1.Uniting<Item>(
				source2Scalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting84()
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			
			var testing = source1.Uniting<Item>(
				source2Scalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting85()
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			int capacity = 0;
			
			var testing = source1.Uniting<Item>(
				source2Scalar,
				equalityComparer,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting86()
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Generic.IEqualityComparer<Item> equalityComparer = EqualityComparer<Item>.Default;
			
			var testing = source1.Uniting<Item>(
				source2Scalar,
				equalityComparer);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting87()
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			int capacity = 0;
			
			var testing = source1.Uniting<Item>(
				source2Scalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting88()
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			
			var testing = source1.Uniting<Item>(
				source2Scalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting89()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			int capacity = 0;
			
			var testing = source1.Uniting<Item>(
				source2,
				equalityComparerScalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting90()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			
			var testing = source1.Uniting<Item>(
				source2,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting91()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			int capacity = 0;
			
			var testing = source1.Uniting<Item>(
				source2,
				equalityComparerScalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting92()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			
			var testing = source1.Uniting<Item>(
				source2,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting93()
		{
			ObservableCollection<Item> source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			int capacity = 0;
			
			var testing = source1.Uniting<Item>(
				source2,
				equalityComparerScalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting94()
		{
			ObservableCollection<Item> source1 = getItems();
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			
			var testing = source1.Uniting<Item>(
				source2,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting95()
		{
			ObservableCollection<Item> source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			int capacity = 0;
			
			var testing = source1.Uniting<Item>(
				source2,
				equalityComparerScalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting96()
		{
			ObservableCollection<Item> source1 = getItems();
			ObservableCollection<Item> source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			
			var testing = source1.Uniting<Item>(
				source2,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting97()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			int capacity = 0;
			
			var testing = source1Scalar.Uniting<Item>(
				source2,
				equalityComparerScalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting98()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			
			var testing = source1Scalar.Uniting<Item>(
				source2,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting99()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			ObservableCollection<Item> source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			int capacity = 0;
			
			var testing = source1Scalar.Uniting<Item>(
				source2,
				equalityComparerScalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting100()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			ObservableCollection<Item> source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			
			var testing = source1Scalar.Uniting<Item>(
				source2,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting101()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			int capacity = 0;
			
			var testing = source1Scalar.Uniting<Item>(
				source2,
				equalityComparerScalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting102()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			
			var testing = source1Scalar.Uniting<Item>(
				source2,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting103()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			ObservableCollection<Item> source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			int capacity = 0;
			
			var testing = source1Scalar.Uniting<Item>(
				source2,
				equalityComparerScalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting104()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			ObservableCollection<Item> source2 = getItems();
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			
			var testing = source1Scalar.Uniting<Item>(
				source2,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2));

				if (source2Value != null)
				{		
					source2Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2Value.RemoveAt(3);
					testing.ValidateConsistency();
					source2Value.Move(1, 3);
					testing.ValidateConsistency();
					source2Value[2].Active = !source2Value[2].Active;
					testing.ValidateConsistency();
					source2Value[2].Num = source2Value[2].Num + 1;
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.RemoveAt(0);
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2Value != null)
				{
					source2Value.Insert(0, new QuickTests.Item(1, true));
					source2Value.Insert(1, new QuickTests.Item(2, true));
					source2Value.Insert(2, new QuickTests.Item(3, true));
					source2Value.Insert(3, new QuickTests.Item(3, true));
					source2Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting105()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			int capacity = 0;
			
			var testing = source1Scalar.Uniting<Item>(
				source2Scalar,
				equalityComparerScalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting106()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			
			var testing = source1Scalar.Uniting<Item>(
				source2Scalar,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting107()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			int capacity = 0;
			
			var testing = source1Scalar.Uniting<Item>(
				source2Scalar,
				equalityComparerScalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting108()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source1Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			
			var testing = source1Scalar.Uniting<Item>(
				source2Scalar,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting109()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			int capacity = 0;
			
			var testing = source1Scalar.Uniting<Item>(
				source2Scalar,
				equalityComparerScalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting110()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			
			var testing = source1Scalar.Uniting<Item>(
				source2Scalar,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting111()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			int capacity = 0;
			
			var testing = source1Scalar.Uniting<Item>(
				source2Scalar,
				equalityComparerScalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting112()
		{
			Scalar<ObservableCollection<Item>> source1Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			
			var testing = source1Scalar.Uniting<Item>(
				source2Scalar,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1Scalar.Value));

				if (source1ScalarValue != null)
				{		
					source1ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source1ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source1ScalarValue[2].Active = !source1ScalarValue[2].Active;
					testing.ValidateConsistency();
					source1ScalarValue[2].Num = source1ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1ScalarValue != null)
				{
					source1ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source1ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source1ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source1ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source1Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source1Scalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting113()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			int capacity = 0;
			
			var testing = source1.Uniting<Item>(
				source2Scalar,
				equalityComparerScalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting114()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			
			var testing = source1.Uniting<Item>(
				source2Scalar,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting115()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			int capacity = 0;
			
			var testing = source1.Uniting<Item>(
				source2Scalar,
				equalityComparerScalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting116()
		{
			System.Collections.Specialized.INotifyCollectionChanged source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			
			var testing = source1.Uniting<Item>(
				source2Scalar,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting117()
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			int capacity = 0;
			
			var testing = source1.Uniting<Item>(
				source2Scalar,
				equalityComparerScalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting118()
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> source2Scalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			
			var testing = source1.Uniting<Item>(
				source2Scalar,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((System.Collections.Specialized.INotifyCollectionChanged)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting119()
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			int capacity = 0;
			
			var testing = source1.Uniting<Item>(
				source2Scalar,
				equalityComparerScalar,
				capacity);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		
		[Test]
		public void TestUniting120()
		{
			ObservableCollection<Item> source1 = getItems();
			Scalar<ObservableCollection<Item>> source2Scalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Generic.IEqualityComparer<Item>> equalityComparerScalar = getScalar<System.Collections.Generic.IEqualityComparer<Item>>(EqualityComparer<Item>.Default);
			
			var testing = source1.Uniting<Item>(
				source2Scalar,
				equalityComparerScalar);

			void test()
			{
				testing.ValidateConsistency();
				var source1Value = ((ObservableCollection<Item>)((ObservableCollection<Item>)source1));

				if (source1Value != null)
				{		
					source1Value.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source1Value.RemoveAt(3);
					testing.ValidateConsistency();
					source1Value.Move(1, 3);
					testing.ValidateConsistency();
					source1Value[2].Active = !source1Value[2].Active;
					testing.ValidateConsistency();
					source1Value[2].Num = source1Value[2].Num + 1;
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.RemoveAt(0);
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source1Value.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}
				var source2ScalarValue = ((ObservableCollection<Item>)((ObservableCollection<Item>)source2Scalar.Value));

				if (source2ScalarValue != null)
				{		
					source2ScalarValue.Insert(2, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue[3] = new QuickTests.Item(7, true);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(3);
					testing.ValidateConsistency();
					source2ScalarValue.Move(1, 3);
					testing.ValidateConsistency();
					source2ScalarValue[2].Active = !source2ScalarValue[2].Active;
					testing.ValidateConsistency();
					source2ScalarValue[2].Num = source2ScalarValue[2].Num + 1;
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.RemoveAt(0);
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					testing.ValidateConsistency();
					source2ScalarValue.Insert(0, new QuickTests.Item(2, true));
					testing.ValidateConsistency();
				}

				IList listSource;
				listSource = ((IList)((ObservableCollection<Item>)source1));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				listSource = ((IList)((ObservableCollection<Item>)source2Scalar.Value));
				if (listSource != null)
				{
					listSource.Clear();
					testing.ValidateConsistency();
				}

				if (source1Value != null)
				{
					source1Value.Insert(0, new QuickTests.Item(1, true));
					source1Value.Insert(1, new QuickTests.Item(2, true));
					source1Value.Insert(2, new QuickTests.Item(3, true));
					source1Value.Insert(3, new QuickTests.Item(3, true));
					source1Value.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
				if (source2ScalarValue != null)
				{
					source2ScalarValue.Insert(0, new QuickTests.Item(1, true));
					source2ScalarValue.Insert(1, new QuickTests.Item(2, true));
					source2ScalarValue.Insert(2, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(3, new QuickTests.Item(3, true));
					source2ScalarValue.Insert(4, new QuickTests.Item(3, true));
					testing.ValidateConsistency();
				}
			}

			test();

			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Touch();
			test();
			((Scalar<System.Collections.Generic.IEqualityComparer<Item>>)equalityComparerScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)source2Scalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)source2Scalar).Change(null);
			test();
		}
		#endregion
		#region Zipping

		
		[Test]
		public void TestZipping01()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> leftSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged rightSource = getItems();
			
			var testing = leftSourceScalar.Zipping<Item, Item>(
				rightSource);

			void test()
			{
				testing.ValidateConsistency();

				IList listSource;
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)leftSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)leftSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestZipping02()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> leftSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			ObservableCollection<Item> rightSource = getItems();
			
			var testing = leftSourceScalar.Zipping<Item, Item>(
				rightSource);

			void test()
			{
				testing.ValidateConsistency();

				IList listSource;
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)leftSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)leftSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestZipping03()
		{
			Scalar<ObservableCollection<Item>> leftSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			System.Collections.Specialized.INotifyCollectionChanged rightSource = getItems();
			
			var testing = leftSourceScalar.Zipping<Item, Item>(
				rightSource);

			void test()
			{
				testing.ValidateConsistency();

				IList listSource;
			}

			test();

			((Scalar<ObservableCollection<Item>>)leftSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)leftSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestZipping04()
		{
			Scalar<ObservableCollection<Item>> leftSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			ObservableCollection<Item> rightSource = getItems();
			
			var testing = leftSourceScalar.Zipping<Item, Item>(
				rightSource);

			void test()
			{
				testing.ValidateConsistency();

				IList listSource;
			}

			test();

			((Scalar<ObservableCollection<Item>>)leftSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)leftSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestZipping05()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> leftSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> rightSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			
			var testing = leftSourceScalar.Zipping<Item, Item>(
				rightSourceScalar);

			void test()
			{
				testing.ValidateConsistency();

				IList listSource;
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)leftSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)leftSourceScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)rightSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)rightSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestZipping06()
		{
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> leftSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			Scalar<ObservableCollection<Item>> rightSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			
			var testing = leftSourceScalar.Zipping<Item, Item>(
				rightSourceScalar);

			void test()
			{
				testing.ValidateConsistency();

				IList listSource;
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)leftSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)leftSourceScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)rightSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)rightSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestZipping07()
		{
			Scalar<ObservableCollection<Item>> leftSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> rightSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			
			var testing = leftSourceScalar.Zipping<Item, Item>(
				rightSourceScalar);

			void test()
			{
				testing.ValidateConsistency();

				IList listSource;
			}

			test();

			((Scalar<ObservableCollection<Item>>)leftSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)leftSourceScalar).Change(null);
			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)rightSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)rightSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestZipping08()
		{
			Scalar<ObservableCollection<Item>> leftSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			Scalar<ObservableCollection<Item>> rightSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			
			var testing = leftSourceScalar.Zipping<Item, Item>(
				rightSourceScalar);

			void test()
			{
				testing.ValidateConsistency();

				IList listSource;
			}

			test();

			((Scalar<ObservableCollection<Item>>)leftSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)leftSourceScalar).Change(null);
			test();

			((Scalar<ObservableCollection<Item>>)rightSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)rightSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestZipping09()
		{
			System.Collections.Specialized.INotifyCollectionChanged leftSource = getItems();
			System.Collections.Specialized.INotifyCollectionChanged rightSource = getItems();
			
			var testing = leftSource.Zipping<Item, Item>(
				rightSource);

			void test()
			{
				testing.ValidateConsistency();

				IList listSource;
			}

			test();
		}
		
		[Test]
		public void TestZipping10()
		{
			System.Collections.Specialized.INotifyCollectionChanged leftSource = getItems();
			ObservableCollection<Item> rightSource = getItems();
			
			var testing = leftSource.Zipping<Item, Item>(
				rightSource);

			void test()
			{
				testing.ValidateConsistency();

				IList listSource;
			}

			test();
		}
		
		[Test]
		public void TestZipping11()
		{
			ObservableCollection<Item> leftSource = getItems();
			System.Collections.Specialized.INotifyCollectionChanged rightSource = getItems();
			
			var testing = leftSource.Zipping<Item, Item>(
				rightSource);

			void test()
			{
				testing.ValidateConsistency();

				IList listSource;
			}

			test();
		}
		
		[Test]
		public void TestZipping12()
		{
			ObservableCollection<Item> leftSource = getItems();
			ObservableCollection<Item> rightSource = getItems();
			
			var testing = leftSource.Zipping<Item, Item>(
				rightSource);

			void test()
			{
				testing.ValidateConsistency();

				IList listSource;
			}

			test();
		}
		
		[Test]
		public void TestZipping13()
		{
			System.Collections.Specialized.INotifyCollectionChanged leftSource = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> rightSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			
			var testing = leftSource.Zipping<Item, Item>(
				rightSourceScalar);

			void test()
			{
				testing.ValidateConsistency();

				IList listSource;
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)rightSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)rightSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestZipping14()
		{
			System.Collections.Specialized.INotifyCollectionChanged leftSource = getItems();
			Scalar<ObservableCollection<Item>> rightSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			
			var testing = leftSource.Zipping<Item, Item>(
				rightSourceScalar);

			void test()
			{
				testing.ValidateConsistency();

				IList listSource;
			}

			test();

			((Scalar<ObservableCollection<Item>>)rightSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)rightSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestZipping15()
		{
			ObservableCollection<Item> leftSource = getItems();
			Scalar<System.Collections.Specialized.INotifyCollectionChanged> rightSourceScalar = getScalar<System.Collections.Specialized.INotifyCollectionChanged>(getItems());
			
			var testing = leftSource.Zipping<Item, Item>(
				rightSourceScalar);

			void test()
			{
				testing.ValidateConsistency();

				IList listSource;
			}

			test();

			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)rightSourceScalar).Touch();
			test();
			((Scalar<System.Collections.Specialized.INotifyCollectionChanged>)rightSourceScalar).Change(null);
			test();
		}
		
		[Test]
		public void TestZipping16()
		{
			ObservableCollection<Item> leftSource = getItems();
			Scalar<ObservableCollection<Item>> rightSourceScalar = getScalar<ObservableCollection<Item>>(getItems());
			
			var testing = leftSource.Zipping<Item, Item>(
				rightSourceScalar);

			void test()
			{
				testing.ValidateConsistency();

				IList listSource;
			}

			test();

			((Scalar<ObservableCollection<Item>>)rightSourceScalar).Touch();
			test();
			((Scalar<ObservableCollection<Item>>)rightSourceScalar).Change(null);
			test();
		}
		#endregion
	}
}
